<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>github提交403错误</title>
    <link href="/github%E6%8F%90%E4%BA%A4403%E9%94%99%E8%AF%AF/"/>
    <url>/github%E6%8F%90%E4%BA%A4403%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<dl><dt>自己有梯子还是git push失败</dt><dd>Failed to connect to github.com port 443 after 21068 ms: Couldn’t connect to server</dd></dl><p>先确认网页github能不能正常打开，如果可以正常打开。说明命令行在拉取&#x2F;推送代码时并没有使用梯子进行代理</p><span id="more"></span><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>为git配置代理</p><p><strong>配置socks5代理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy socks5 127.0.0.1:10808<br>git config --global https.proxy socks5 127.0.0.1:10808<br></code></pre></td></tr></table></figure><p><strong>配置http代理</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy 127.0.0.1:10809<br>git config --global https.proxy 127.0.0.1:10809<br></code></pre></td></tr></table></figure><p><strong>后面的ip地址与端口主要看win10的代理地址，与代理软件的端口</strong></p><p>ip地址：</p><p><img src="/github%E6%8F%90%E4%BA%A4403%E9%94%99%E8%AF%AF/image-20240130111646402.png" alt="image-20240130111646402"></p><p><strong>v2rayN</strong>的端口在左下角：</p><p><img src="/github%E6%8F%90%E4%BA%A4403%E9%94%99%E8%AF%AF/image-20240130111821738.png" alt="image-20240130111821738"></p><p>​    </p><p>备用命令</p><p><strong>查看代理命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --get http.proxy<br>git config --global --get https.proxy<br></code></pre></td></tr></table></figure><p><strong>取消代理命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>httpcanary抓包</title>
    <link href="/httpcanary%E6%8A%93%E5%8C%85/"/>
    <url>/httpcanary%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>记录下httpcanary的配置过程。接口调试中求人不如求己，自己抓包一目了然</p><span id="more"></span><p>复现环境安卓12，面具阿尔法26.3，我是进行到5，6，7步才成功</p><p>删除之前配置的任何抓包插件或者模块。TrustMeAlready或，untrustme之类的</p><a class="btn" href="httpcannay与证书移动模块.rar"  title="小黄鸟与模块" target="_blank">小黄鸟与模块</a><ol><li>安装好→打开它→同意协议→配置(点确定)</li><li>接下来到安装证书，这一步很关键！先点安装，然后会弹出来一个窗口(在”设置”中安装CA证书)，🚫不要点关闭！🚫不要点关闭！🚫不要点关闭！我们给它扔到后台，这时打开MT管理器，路径&#x2F;data&#x2F;data&#x2F;com.guoshi.httpcanary&#x2F;cache&#x2F;下已经有了两个重要文件了(如果没有呢，那是不存在的)，一个是.p12，另一个是.pem(用户级证书)，我们把.pem证书复制一份当前目录中通过重命名为HttpCanary.jks</li><li>回到小黄鸟应用里点弹窗的关闭，然后神奇的事就发生了，安装按钮变成了移动按钮。此时点一下移动按钮，就会正常拉起root授权了。(这里如果你是安卓12也许你会收到成功的提示，然后理论就可以正常使用了。如果你是安卓13呢，大部分会失败，也可能是成功。不管是安卓12还是安卓13以实际使用为准）</li><li>然后我们手动生成系统级证书，点跳过或者是确定，打开应用的设置→HttpCanary根证书→导出HttpCanary根证书→System Trusted(.0)</li><li>回到MT管理器，步骤2的路径或者是&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;HttpCanary&#x2F;certs里都会有一份 87bc3517.0 的文件，这就是系统级证书文件。(此文件不可共享，每台机器生成的序列号都不一样都是独一无二的)</li><li>.接下来就是制作证书模块了，上面压缩包里提供一份模块模板。只需替换系统级证书文件刷入即可。打开.zip文件路径system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;里有个87bc3517.0文件，删掉！！！把刚刚步骤5看到的 &#x2F;storage&#x2F;emulated&#x2F;0&#x2F;HttpCanary&#x2F;certs&#x2F;87bc3517.0 文件放进去保存.(这里我用mt管理器解压再打包zip文件面具刷入失败，最后是在电脑上用rar替换87bc3517.0文件成功刷入)</li><li>用面具或者kernelsu把自己改好的模板刷进去重启就可以了</li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.coolapk.com/feed/53046534?shareKey=MDIwOTNhYjZiYzkzNjViNzY3NjU">https://www.coolapk.com/feed/53046534?shareKey=MDIwOTNhYjZiYzkzNjViNzY3NjU</a>~<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA运行flikcdc的相关问题</title>
    <link href="/IDEA%E8%BF%90%E8%A1%8Cflikcdc%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/IDEA%E8%BF%90%E8%A1%8Cflikcdc%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>按照官方文档跑<a href="https://ververica.github.io/flink-cdc-connectors/master/content/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/datastream-api-package-guidance-zh.html">Demo</a>一直报错，记录一些错误</p><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><p><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/flink/api/java/typeutils/ResultTypeQueryable</code></p><p>解决1：去掉pom文件中的   <code>&lt;scope&gt;provided&lt;/scope&gt;</code>  代码</p><p>解决2：配置modify run configuraton-&gt;modify options-&gt;add dependencies with “provided” scope to classpath</p><span id="more"></span><p><img src="/IDEA%E8%BF%90%E8%A1%8Cflikcdc%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/image-20240105150252962.png" alt="image-20240105150252962"></p><h3 id="错误2："><a href="#错误2：" class="headerlink" title="错误2："></a>错误2：</h3><p><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/flink/connector/base/source/reader/RecordEmitter</code></p><p>添加flink-connector-base 依赖，不知道为什么官方没写这个依赖。</p><p><code>flink-connector-kafka</code>、<code>flink-connector-mysql-cdc</code>，通常依赖于 <code>flink-connector-base</code>，并实现这些通用接口来满足特定存储系统的需要。</p><pre><code class="hljs">    &lt;dependency&gt;        &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;        &lt;artifactId&gt;flink-connector-base&lt;/artifactId&gt;        &lt;version&gt;$&#123;flink.version&#125;&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>​    </p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/ververica/flink-cdc-connectors/issues/2802">https://github.com/ververica/flink-cdc-connectors/issues/2802</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>IDEA，Flink</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>window常用命令</title>
    <link href="/window%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/window%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="记录使用电脑过程中经常查的一些记录"><a href="#记录使用电脑过程中经常查的一些记录" class="headerlink" title="记录使用电脑过程中经常查的一些记录"></a>记录使用电脑过程中经常查的一些记录</h2><span id="more"></span><h3 id="配置开机自启软件目录"><a href="#配置开机自启软件目录" class="headerlink" title="配置开机自启软件目录"></a>配置开机自启软件目录</h3><p>按Windows 徽标键 + R，键入“shell:startup”</p><h3 id="windows桌面图标变白修复"><a href="#windows桌面图标变白修复" class="headerlink" title="windows桌面图标变白修复"></a>windows桌面图标变白修复</h3><a class="btn" href="windows图标变白修复.bat"  title="windows图标变白修复" target="_blank">windows图标变白修复</a>    ]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏记录</title>
    <link href="/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/"/>
    <url>/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录好玩的游戏，有时候忘记名称了，又是花费很多时间来重新找</p><span id="more"></span><h2 id="BADLAND（破碎大陆）"><a href="#BADLAND（破碎大陆）" class="headerlink" title="BADLAND（破碎大陆）"></a>BADLAND（破碎大陆）</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/./%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95-1704169662589.png"></div><div class="group-image-wrap"><img src="/./%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95-1704169696238.png"></div></div><div class="group-image-row"></div></div><p>一个本地多人同屏游戏。触控点的很爽。<br>初中时躲寝室和室友挤在一起玩的，4人玩耍太欢乐了，还不能太大声，怕把宿管惊动过来。画面惊艳，各种奇怪的死法。<a href="https://store.steampowered.com/app/269670/BADLAND_Game_of_the_Year_Edition/">steam有</a>，不敢想象只要5块钱</p><h2 id="二重奏（DUET）"><a href="#二重奏（DUET）" class="headerlink" title="二重奏（DUET）"></a>二重奏（DUET）</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/./%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95-1704170055321.png"></div><div class="group-image-wrap"><img src="/./%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95/%E6%B8%B8%E6%88%8F%E8%AE%B0%E5%BD%95-1704167996740.png"></div></div><div class="group-image-row"></div></div><p>最早安卓端玩的，<a href="https://store.steampowered.com/app/292600/Duet/">steam也有了</a>，音乐好听，魔性废手。画面惊艳，操作简单。</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>game</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《瓦尔登湖》-自知之明</title>
    <link href="/%E3%80%8A%E7%93%A6%E5%B0%94%E7%99%BB%E6%B9%96%E3%80%8B-%E8%87%AA%E7%9F%A5%E4%B9%8B%E6%98%8E/"/>
    <url>/%E3%80%8A%E7%93%A6%E5%B0%94%E7%99%BB%E6%B9%96%E3%80%8B-%E8%87%AA%E7%9F%A5%E4%B9%8B%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<blockquote><p>和我们的自知之明相比较，公众舆论这暴戾的君主也显得微弱无力。正是一个人怎么看待自己，决定了此人的命运，也指向了他的归宿</p></blockquote><hr><p>从出生那一刻起，就开始接收信息，学习信息。我们的社群教导我们是非，善恶，遵守社会规则，与人合作….。这些林林总总构成了我么的价值观 ，最后形成我们的人格。常常说一个人具有时代的局限性，是因为他接受的是他旧时的社会理念。今天人们随声附和或默认为真理的，明天就可能被证明是错误的<span id="more"></span>，不过是如同烟云般的想法而已。从今观古，那些人把这烟云奉做能为能为田园带来甘霖的雨云。</p><p>其实不用从古观今也可以看出这些变化，信息时代塑造我们价值观最大比重的就是媒体与网络了。回忆各个平台的历史热搜你又能知道多少后续。快节奏的当下，今天仇这个，明天仇那个。自己的情绪是不是很容易被人挑拨呢？当时一时的热血现在连个痕迹似乎都难以找到。铺天盖地的叙事宣传，人人亦云的从众心理，又有多少东西才是我自己真正所想的？可能自己就是被操纵的木偶，其实脑袋里空无一物。</p><p>把自己作为这个世界的局外人是个好方法，不要热情的投入其中。想象你灵魂出窍，向下观察着你的行为，整理着你的思维。这样可以减少很多不必要的情绪。当然知识面不够的你并没有能力深挖自己到底需要什么东西，你想的是不是你所想的。受于局限你内敛分析自己的思维可能也是错误的(ノへ￣、)。</p><p>你需要旁征博引，从各种书籍中去发现，一个真正独立完整的人应该是什么样的？应该如何做才会更好？这也是我读这本书的目的了。不是厌倦这个纸醉金迷的社会，而读他专门去反驳利己主义啥的，而是去来发现作者写的一个思想健全的人应该有哪些特点。谨记。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>标注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二个老板</title>
    <link href="/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E8%80%81%E6%9D%BF/"/>
    <url>/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E8%80%81%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;翻了一下我过去随手记得日记，很惊讶，点点滴滴的文字中我竟然写下了那么多事情。站在在我现在的角度来看，我这一年的经历似乎很是平淡。但从日记的字里行间我看到很多情绪，不满，紧张，懊悔，愤怒，生气，冷漠都充斥着我大脑，促使我在事后记下这些东西。其中来到苏州的第一个公司还是让我感觉值得回顾回顾</p><span id="more"></span><p>&emsp;&emsp;内视自己，其实自己一直抱着<strong>奇怪的我能行的</strong>期待。一月十号那天我就写下了辞职这个话。哈哈，想到那个时候，我确实很勇，凭着一身热血我就毅然辞职，瞒着老妈，出租屋里呆了2个月找到工作，干脆地离开了。期间在那小屋找工作的两个月我也没有很是气馁，一直耐心的投简历，期待工作机会。经历了几次面试后，我拖着我的行李来到了苏州。</p><p>&emsp;&emsp;其实，人在一个隔离的环境，在他有限的认知里面是很容易被操控的，也许这也是GFW的目的吧。来到苏州的第一天老板就叫我去见他，于是一下高铁就拉着行李哐哧哐哧来到了公司门口，初见老板他是一个头圆滚滚的大叔，一进来为我端茶倒水着实让我受宠若惊（毕竟前国企老板，架子很大，生人勿近的感觉），谈了很多东西，公司业务，公司前景，我的办公桌位置啥的。<br>&emsp;&emsp;第二天早上上班我是早早来到了办公室，唯一有点让我不满的就是老旧的显示器了。搞笑的是老板和我吹嘘他的电脑是16g内存固态啥的，哈哈，可惜我没给老板面子。脱口而出我笔记本也是16g的，办公屏幕亮度太低了，我就用自己的笔记本吧。那时我也是青涩，不谙世事😂。</p><p>&emsp;&emsp;那时候我超级勤奋，因为是新项目当天老板就给我了个bug清单，一个一个改，我主要是学后端的，清单上很多都是前端需求。凭借着曾经学过写vue知识，现学现看竟然也可以磕磕碰碰的完成需求。老板每天晚上8点多打我电话问我“小熊，在学习了没，你要努力呀，你和别人差距很大，快快把bug清单争取清完呀”。那时我是真的努力呀，我每天晚上看那个ERP项目至少11点，有时候还搞到凌晨一点多，一点都不带累的。星期六的时候老板也会随时call我，了解进度。虽然我有点不满，但是研究了下合同，额，原来法定是至少休息一天啊。好吧我释然了。疯狂恶补前端知识，改起bug，钻进文档，搜索教程，让嘴里疼痛的溃疡似乎都遗忘了。只有在我下午有时候从屏幕前探起头，张望窗外缓解我干涩的眼睛时的疼痛告诉我那个溃疡是真的疼。</p><p>&emsp;&emsp;每次上班，下班时候，老板就会把我叫到他办公室和我谈进度。我对老板说这几天我学的vue知识比我之前学了一个月的知识还要多，我昨天看项目到凌晨了。老板对我宽慰几句，叫我早点休息，身体要紧。我很受感动。来到这个公司看到了很好的项目进度管理。仅仅一个云端excel表就可以协同多人管理项目进度。但是这样压力很大，老板每天下班都会喊你到办公室询问项目进度。看着excel表的一行行，项目经理每天加需求，测试每天加bug报，改着不是我写的bug，似乎永远没有尽头。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-0449e393" role="button" aria-expanded="false" aria-controls="collapse-0449e393">        <div class="fold-arrow">▶</div>报表      </div>      <div class="fold-collapse collapse" id="collapse-0449e393">        <div class="fold-content">          <p><img src="/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E8%80%81%E6%9D%BF/image-20231230203516451.png" alt="image-20231230203516451"></p>        </div>      </div>    </div><p>&emsp;&emsp;虽然有些复杂的前端需求，我真的难以解决 ，一直占据着bug清单位，让我很是苦恼，让我觉得自己很菜。但是我对前景一片向往。合计着我比之前涨了2倍多的工资，日子似乎很有奔头。然而事情出现了变化。</p><p>&emsp;&emsp;人在一个隔离的环境，他会倾向于安于现状， 没有醒悟的时候，他认为这个世界本身就是这样的。 尽管头脑里早已经有相关概念，但会倾向于忽视它，认为很多事不切实际的，与我隔得很是遥远。老板要我到隔壁省出差，接手另外一项目，说我可以学到很多大公司的项目管理之道，团队合作之道。<br>第一次坐老板的车感觉是真的宽敞，没见过世面的我才知道汽车还有电动座椅，真是方便。</p><p>&emsp;&emsp;与我对接的是一个比我大不了几岁的小伙子，老板告诉我他家里有事不方便讲，我去接手他的任务，晚上与周日一整天可以多交流，好星期一开始干活。我唯唯称是。新地点，新人物，新任务让我很是兴奋，我与老哥交谈甚欢，老哥是我老乡，我大学就在他隔壁市读的，颇有他乡遇故知的感觉。交谈期间，我们还谈起了老板的车，老哥说：”车宽敞吧，那都是压榨我们得到的。老板总是要我们开车载他去其他地方，这车上次我来时就是我开过来的“。期间还向我我透露他打算回老家了，不干了。我感觉有点不对劲，不是家里暂时有点事吗？怎么辞职了？于是乎老哥开始向我倒苦水了。</p><p><strong>公司接了很多项目，他出差这些天，白天做出差这边的项目，晚上用向日葵远程公司电脑做那边的项目，老板每天发消息叫他晚上干活，几乎都是十点多休息。只有周日清闲一天。他在这个公司总共干了3个多月忍受不了打算跑路了！！</strong></p><p>&emsp;&emsp;恍然大悟，醍醐灌顶！我说为啥刚来公司，老板问我有没有向日葵账号，为啥下班后每天晚上都会接到老板的电话，为啥过来时老板问我会不会开车，为啥久久没复发的溃疡还长了两个。原来老板一口一个小熊小熊的勉励我都是要我在晚上有产出😢，我竟然感觉这称呼还很亲切(っ °Д °;)っ。。。。。接着就是和老哥聊了很久的公司内幕了，某某准备跳槽，公司员工流动性很高啥的。后续就是在出差公司这边蹭吃蹭喝两天就跑路了，老板最后还劝我：“小熊啊，咋干了没到一星期就走了啊，之前不是答应我再苦再累可以坚持吗， 项目结束我我给你发奖金…..”。</p><p>现在回想起来要是不跑路，就和那个老哥一样，还真可能一直哼哧哼哧的干，每天面对老板的pua还不自知，撑不住了3个月后才跑，生产队的驴，也不能这样使唤啊。工作生活完全搅在一起，下班就是下班，还不停的布置任务，要是我会开车，指定还要我当司机了，是真的坑呀。</p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排骨做法</title>
    <link href="/%E6%8E%92%E9%AA%A8%E5%81%9A%E6%B3%95/"/>
    <url>/%E6%8E%92%E9%AA%A8%E5%81%9A%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="蒸排骨"><a href="#蒸排骨" class="headerlink" title="蒸排骨"></a>蒸排骨</h2><div class="note note-success">            <ol><li>浸泡半小时去血水</li><li>腌制排骨（生抽，酱油，糖，盐，姜蒜末，料酒,淀粉）20分钟</li><li>垫菜（土豆，红薯，藕等 滚刀块）</li><li>黄豆酱&#x2F;豆瓣酱裹下排骨，适量油锁住水分</li><li>排骨放在土豆上面<strong>要铺平，不能堆叠起来不然不容易熟</strong></li><li>冷水一起进锅大火蒸15min即成</li></ol>          </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-f2f6542f" role="button" aria-expanded="false" aria-controls="collapse-f2f6542f">        <div class="fold-arrow">▶</div>成品      </div>      <div class="fold-collapse collapse" id="collapse-f2f6542f">        <div class="fold-content">          <p>15min 火候很好，排骨爽滑顺口，很是nice</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/%E6%8E%92%E9%AA%A8%E5%81%9A%E6%B3%95/IMG_20231230_182943.jpg" alt="IMG_20231230_182943"></div><div class="group-image-wrap"><img src="/%E6%8E%92%E9%AA%A8%E5%81%9A%E6%B3%95/IMG_20231230_190336.jpg" alt="IMG_20231230_190336"></div></div><div class="group-image-row"></div></div>        </div>      </div>    </div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1Kp4y1y7f9">https://www.bilibili.com/video/BV1Kp4y1y7f9</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>菜谱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cemu模拟器马里奥3d世界摸屏幕</title>
    <link href="/cemu%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%A9%AC%E9%87%8C%E5%A5%A53d%E4%B8%96%E7%95%8C%E6%91%B8%E5%B1%8F%E5%B9%95/"/>
    <url>/cemu%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%A9%AC%E9%87%8C%E5%A5%A53d%E4%B8%96%E7%95%8C%E6%91%B8%E5%B1%8F%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<p>玩到抽屉山脉 摸一摸，吹一吹时，捣鼓了好久不知道怎么模拟触摸屏幕，搜了一大圈在一个腌臜角落有人提了一嘴原来用鼠标点击就可以。控制器模拟</p><p>Wii U GamePad鼠标直接点击即可，模拟吹气下面有选项。</p><p><img src="/cemu%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%A9%AC%E9%87%8C%E5%A5%A53d%E4%B8%96%E7%95%8C%E6%91%B8%E5%B1%8F%E5%B9%95/image-20231229204636154.png" alt="image-20231229204636154"></p>]]></content>
    
    
    
    <tags>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows查找端口占用</title>
    <link href="/windows%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    <url>/windows%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ol><li>起因当我在一个窗口使用<code>adb devices</code> 时报</li></ol><p><code>adb devicesadb server is out of date.  killing...</code></p><p><code>ADB server didn&#39;t ACK* failed to start daemon *error: unknown host service</code></p><p>百度之后说是启用了多个adb的原因</p><ol start="2"><li>使用<code>adb nodaemon server</code> 命令启动一个ADB服务器查找占用端口信息</li></ol><p><code>: main.cpp:165 could not install *smartsocket* listener: cannot bind to 127.0.0.1:5037: 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。</code></p><p>说明5037 端口被占用</p><ol start="3"><li>使用命令<code>netstat -ano | findstr &quot;5037&quot;</code>查找占用5037端口的进程id</li></ol><p><img src="/windows%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/image-20231206215302834.png" alt="image-20231206215302834"></p><p>   得到进程号为56712    ，这时候要找到这个应用关掉即可</p><ol start="4"><li>使用命令<code>tasklist | findstr &quot;56712&quot;</code>得到</li></ol><p><img src="/windows%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/image-20231206215404798.png" alt="image-20231206215404798"></p><p>没有完整文件路径，查询gpt得到</p><ol start="5"><li>使用该命令<code>wmic process where processid=&quot;56712&quot; get ExecutablePath</code>既可以得到文件路径了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows远程桌面与安卓远程控制</title>
    <link href="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>发现一个内网穿透软件，多个设备组建成局域网。清晰度要比向日葵好很多，还可以用qtScrapy远程操控安卓手机。</p><p>原理大概是:</p><p><a href="https://zhuanlan.zhihu.com/p/40816201">udp打洞</a></p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>去<a href="https://my.zerotier.com/">zerotier</a>注册个账号，进入主页创建一个网络<img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228105333425.png" alt="image-20231228105333425"></p></li><li><p>点进去配置网络进去随便取个名字，这个Network ID 有用<img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228105436634.png" alt="image-20231228105436634"></p></li><li><p>其他不要动，选个这个</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228105528054.png" alt="image-20231228105528054"></p></li><li><p>退回上一步，下载电脑端软件</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228105831302.png" alt="image-20231228105831302"></p></li></ol><p>5.两台电脑安装完成之后 ，打开任务栏，单击选择加入新网络</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228110047828.png" alt="image-20231228110047828"></p><p>6.框里填写第二步的Network ID，两台电脑都是如此，期间windos会弹出是否加入网络，点击允许</p><p>7.在进入第二步那个配置页面 往下面滑，允许加入两个设备，可以备注名字 。cmd命令 ipconfig 可以查看zeroTier One分配的对应ip地址</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228112310492.png" alt="image-20231228112310492"></p><p>8.记住受控端的ip地址，我的是192.168.193.202</p><h2 id="电脑桌面远程连接"><a href="#电脑桌面远程连接" class="headerlink" title="电脑桌面远程连接"></a>电脑桌面远程连接</h2><p>9.把受控端电脑远程桌面打开<br><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228111943028.png" alt="image-20231228111943028"></p><ol start="10"><li><p>控制端 win+r 输入 mstsc 打开远程桌面连接 输入第8步记录的受控端的内网ip地址.  就可以玩耍了</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228112544935.png" alt="image-20231228112544935"></p><h2 id="安卓远程连接"><a href="#安卓远程连接" class="headerlink" title="安卓远程连接"></a>安卓远程连接</h2><ol><li><p>去第四步下载安卓端的软件，或者去网上搜索下载</p></li><li><p>打开软件加入网络，填写第二步的网络id</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228114858167.png" alt="image-20231228114858167"></p></li></ol></li></ol><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228114935065.png" alt="image-20231228114935065"></p><ol start="3"><li><p>再去网络配置页面允许手机端加入</p><p>![image-20231228115046666](windows远程桌面与安卓远程控制&#x2F;image-20231228115046666.png</p></li></ol><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228115105518.png" alt="image-20231228115105518"></p><p>4.打开开关 允许vpn连接啥的</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228115217825.png" alt="image-20231228115217825"></p><ol start="5"><li>去网络配置页面查看为手机分配的局域网ip 为：192.168.193.122 。电脑ping 这个ip通不通，不通肯定是有毛病的。</li></ol><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228115259292.png" alt="image-20231228115259292"></p><ol start="6"><li><p>打开手机的adb调试，开发者调试模式啥的，各手机谷歌即可</p></li><li><p>下载<a href="192.168.193.122">qtScrapy</a>,打开软件，输入IP地址连接启动服务即可</p><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228115738204.png" alt="image-20231228115738204"></p></li></ol><p><img src="/windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%B8%8E%E5%AE%89%E5%8D%93%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20231228115852651.png" alt="image-20231228115852651"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es ik分词器词库热更新</title>
    <link href="/es%E7%9A%84ik%E5%88%86%E8%AF%8D%E5%99%A8%E8%AF%8D%E5%BA%93%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <url>/es%E7%9A%84ik%E5%88%86%E8%AF%8D%E5%99%A8%E8%AF%8D%E5%BA%93%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>近来遇到一个es查询商品使用ik分词器，召回结果不准确的问题，比如搜索 洗衣液，返回出洁厕液。选择的分词方式是 ik_max_word.出现的原因是分词会把“液”这个单字分开进行索引所以查询错误。如果不想要这个“液”单独分出来需要设置停止词库</p><p>常用词库:</p><p><a href="https://github.com/goto456/stopwords">百度停用词表等</a></p><p><a href="https://www.toolnb.com/tools/scelto.html">搜狗词库转换scel转换工具</a></p><span id="more"></span><p><code>GET /_analyze &#123;   &quot;analyzer&quot;: &quot;ik_max_word&quot;,   &quot;text&quot;:&quot;洗衣液&quot; &#125;</code></p><p>查询结果为<br><img src="/es%E7%9A%84ik%E5%88%86%E8%AF%8D%E5%99%A8%E8%AF%8D%E5%BA%93%E7%83%AD%E6%9B%B4%E6%96%B0/image-20231226173810504.png" alt="image-20231226173810504"></p><p>在es插件目录配置<code>es/plugins/ik/config/IKAnalyzer.cfg.xml</code>停止词路径，并重启es生效，词典同理。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;<span class="hljs-keyword">entry</span> key=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;haha.dic&lt;/<span class="hljs-keyword">entry</span>&gt;<br>或者放到其他目录<br>&lt;<span class="hljs-keyword">entry</span> key=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;./mydict/haha.dic&lt;/<span class="hljs-keyword">entry</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="ik词库热更新过程"><a href="#ik词库热更新过程" class="headerlink" title="ik词库热更新过程"></a>ik词库热更新过程</h3><p>配置文件也有远程拓展词典，远程拓展词典可以放在nginx或者自己后台一个传输文件流的地址。</p><p>ik会每60秒通过head请求头文件的ETag与Last-Modified进行对比判断设置的词典是否更新。如果有任一个变动才会get请求，请求词典资源。</p><p> <img src="/es%E7%9A%84ik%E5%88%86%E8%AF%8D%E5%99%A8%E8%AF%8D%E5%BA%93%E7%83%AD%E6%9B%B4%E6%96%B0/image-20231226175610058.png" alt="image-20231226175610058"></p><p> <img src="/es%E7%9A%84ik%E5%88%86%E8%AF%8D%E5%99%A8%E8%AF%8D%E5%BA%93%E7%83%AD%E6%9B%B4%E6%96%B0/image-20231226175148070.png" alt="image-20231226175148070"></p><h3 id="数据库热更新"><a href="#数据库热更新" class="headerlink" title="数据库热更新"></a>数据库热更新</h3><p>对于head请求返回最新ETag即可。怎么知道数据库词典变动一条数据后，通知ik呢？也就是返回的ETag要与ik存的ETag不一致。需要存储一个newTag 标签。每当词典有变动后标签+1。在head请求时，把这个newTag的值塞入ETag就可以了。</p><h4 id="集群情况"><a href="#集群情况" class="headerlink" title="集群情况"></a>集群情况</h4><ol><li><p>对于newTag标签，单机直接放入内存即可，多服务需要把newTag存入数据库，这里存入的是redis。</p></li><li><p>如果是es集群 ，当词典更新后，我们需要更改各个机器newTag以通知ik进行get请求,需要为每一个机器设置一个newTag。通过访问的机器id找到机器对应的newTag返回出去。</p></li></ol><p>服务端：</p><p>有个坑 </p><p> @GetMapping(value &#x3D; “&#x2F;syncStopIkDic&#x2F;{machine}”)  不能写成</p><p> @RequestMapping(value &#x3D; “&#x2F;syncStopIkDic&#x2F;{machine}”, method &#x3D; {RequestMethod.GET})。不知道原因。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;更新停止词&quot;)</span><br><span class="hljs-meta">@GetMapping(value = &quot;/syncStopIkDic/&#123;machine&#125;&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">getHotWordByOracle</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;machine&quot;)</span> String machine)</span>&#123;<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> esStopwordsDicBiz.getStopWordByMysql(machine);<br>            headers.add(HttpHeaders.CONTENT_DISPOSITION, <span class="hljs-string">&quot;attachment; filename=stopWrodfile.txt&quot;</span>);<br>            <span class="hljs-keyword">return</span> ResponseEntity.ok()<br>                    .headers(headers)<br>                    .contentType(MediaType.parseMediaType(<span class="hljs-string">&quot;text/plain;charset=UTF-8&quot;</span>))<br>                    .body(content);<br>&#125;<br><br><br><span class="hljs-meta">@ApiOperation(value = &quot;停止词是否变动&quot;)</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/syncStopIkDic/&#123;machine&#125;&quot;, method = &#123;RequestMethod.HEAD&#125;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">shouldSync</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;machine&quot;)</span> String machine)</span>&#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">newStopTag</span> <span class="hljs-operator">=</span> esDicRedisService.getTagValue(RediskeyEsDicConstants.ESIK_NEW_STOPWORLD_TAG, machine);<br>    <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    headers.add(<span class="hljs-string">&quot;ETag&quot;</span>,newStopTag+<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> ResponseEntity.ok()<br>            .headers(headers).body(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>   查询结果用换行符拼接</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStopWordByMysql</span><span class="hljs-params">(String machine)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">stopDicsRes</span> <span class="hljs-operator">=</span> esStopDicService.list().parallelStream()<br>        .map(EsStopwordsDic::getStopword).collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>    res = stopDicsRes;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 每当一个es机器进行访问的时候把他的机器id用set集合保存起来，方便后续批量更改。</p><p>redis key 这样设计，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * esIK 停止词新版本标签</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ESIK_NEW_STOPWORLD_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;es:ik:&#123;machine&#125;:new:stopword&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * esIK 主词库新版本标签</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ESIK_NEW_MAINWORLD_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;es:ik:&#123;machine&#125;:new:mainword&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * esIk机器号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">String</span> <span class="hljs-variable">ESIK_MACHINE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;es:ik:machine&quot;</span>;<br></code></pre></td></tr></table></figure><p>实际es存储结构</p><p><img src="/es%E7%9A%84ik%E5%88%86%E8%AF%8D%E5%99%A8%E8%AF%8D%E5%BA%93%E7%83%AD%E6%9B%B4%E6%96%B0/image-20231227120037409.png" alt="image-20231227120037409"></p><p>返回newTag值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取tag值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> machine 机器id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getTagValue</span><span class="hljs-params">(String key, String machine)</span> &#123;<br>    key =  key.replace(<span class="hljs-string">&quot;&#123;machine&#125;&quot;</span>,machine);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> jedisService.get(key);<br>     <span class="hljs-keyword">if</span>(o == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//机器id保存起来，方便更新后通知机器</span><br>            jedisService.jsset(RediskeyEsDicConstants.ESIK_MACHINE, machine);<br>            jedisService.getJedis().set(key, <span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>      &#125;<br>    <span class="hljs-keyword">return</span> Long.parseLong(o.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>数据库插入停止词代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-comment">//数据库插入之后触发</span><br>   <span class="hljs-keyword">public</span> EsStopwordsDicDTO <span class="hljs-title function_">afterSave</span><span class="hljs-params">(Boolean saveResult, EsStopwordsDicDTO t)</span>&#123;<br>      <span class="hljs-keyword">if</span>(saveResult)&#123;<br>          esDicRedisService.addOneForTagValue(RediskeyEsDicConstants.ESIK_NEW_STOPWORLD_TAG);<br>      &#125;<br>      <span class="hljs-keyword">return</span> t;<br>   &#125;<br>   <br>   <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 为所有机器的newTag+1</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">addOneForTagValue</span><span class="hljs-params">(String key)</span> &#123;<br>       Set&lt;String&gt; redisRes = jedisService.getJedis().smembers(RediskeyEsDicConstants.ESIK_MACHINE);<br>       <span class="hljs-comment">//批量操作效率更好</span><br>       <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> jedisService.getJedis().pipelined();<br>       redisRes.forEach(machine -&gt; &#123;<br>           <span class="hljs-type">JdCore</span> <span class="hljs-variable">jdCore</span> <span class="hljs-operator">=</span> JSONUtil.toBean(machine, JdCore.class);<br>           <span class="hljs-type">String</span> <span class="hljs-variable">machineId</span> <span class="hljs-operator">=</span> (String)jdCore.getT(String.class);<br>           pipeline.incr(key.replace(<span class="hljs-string">&quot;&#123;machine&#125;&quot;</span>,machineId));<br>       &#125;);<br>       pipeline.sync();<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地文件夹提交到github</title>
    <link href="/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E4%BA%A4%E5%88%B0github/"/>
    <url>/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E4%BA%A4%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<h3 id="一-先在github上建立一个仓库"><a href="#一-先在github上建立一个仓库" class="headerlink" title="一. 先在github上建立一个仓库"></a>一. 先在github上建立一个仓库</h3><p>​               <a href="https://github.com/new">新建仓库</a></p><p><img src="/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E4%BA%A4%E5%88%B0github/image-20230906231253764.png" alt="image-20230906231253764"></p><h3 id="二-把本地文件上传到线上仓库"><a href="#二-把本地文件上传到线上仓库" class="headerlink" title="二. 把本地文件上传到线上仓库"></a>二. 把本地文件上传到线上仓库</h3><p>在需要提交的文件夹下面右键点击open git bash here</p><p><img src="/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E4%BA%A4%E5%88%B0github/image-20230906231535697.png" alt="image-20230906231535697"></p><p>1.<br>   git config –global –unset http.proxy</p><p>输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin https://github.com/lililib/blogSource.git     # 把本地仓库与远程仓库关联起来<br></code></pre></td></tr></table></figure><p><img src="/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8F%90%E4%BA%A4%E5%88%B0github/image-20230906231852267.png" alt="image-20230906231852267"></p><p>提交至本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init          #初始化需要管理的目录，使其能够被Git进行管理，文件夹内会多出一个.git目录<br><br>git add .                        #把工作时的所有变化提交到暂存区，不包括删除的文件<br><br>git commit -m &quot;第一次提交&quot;   #保存变化，并添加注释<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin master                                      #上传到github<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《火星编年史》</title>
    <link href="/%E3%80%8A%E7%81%AB%E6%98%9F%E7%BC%96%E5%B9%B4%E5%8F%B2%E3%80%8B/"/>
    <url>/%E3%80%8A%E7%81%AB%E6%98%9F%E7%BC%96%E5%B9%B4%E5%8F%B2%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>火星是太空的遥远之滨，人们像浪潮一般朝它涌去。每一股浪潮都互不相同，一股强过一股。第一股浪潮载的是一些习惯于太空、寒冷和孤寂的人，具有虎狼精神的人，身体强悍，面容清癯，目光炯炯，手板粗实，什么都敢碰，火星无力抵抗这些生来习惯住在火星开阔的平地和荒原的人。他们来到火星，带来了生气，别的人也会有勇气效法。他们在空窗格上嵌上玻璃，在玻璃背后点上灯火.</p></blockquote><h2 id="2023-6-16-12-33"><a href="#2023-6-16-12-33" class="headerlink" title="2023.6.16 12:33"></a><em>2023.6.16 12:33</em><br><span id="more"></span></h2><blockquote><p>四个人互相看看，大笑起来：“这才是生活，伙计!” 四个人咧嘴大笑，兴奋地拍掌。<br>最后当他们被放下的时候，喧闹声逐渐平息下来。<br>船长感动得快流下眼泪了，他哽咽地说道：“谢谢，这太好了，这真是太棒了。” “告诉我们关于你自己的事吧。”尤先生请求道。<br>船长清了清嗓子。<br>在观众不时发出的“哦”、“啊”的惊叹声中，<br>船长依次介绍了他的队员，并让他们逐个说了几句。整个 过程中掌声不断。<br>尤先生拍了拍船长的肩：“见到你真高兴，<br>我也是地球人。” “什么?” “我们当中很多人来自地球。”</p><p>(凄惨，一个自欺欺人的循环)</p></blockquote><p>*2023.6.14 18:19 *</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>标注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《间客》</title>
    <link href="/%E3%80%8A%E9%97%B4%E5%AE%A2%E3%80%8B/"/>
    <url>/%E3%80%8A%E9%97%B4%E5%AE%A2%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最希望选举程序成本高昂的是权贵，这样穷人就得不到被选举权；最希望司法程序费用高昂的是权贵，这样穷人就打不赢官司；最希望媒体版面费高昂的也是权贵，这样穷人就得不到话语权</p><span id="more"></span><h1 id="《间客》"><a href="#《间客》" class="headerlink" title="《间客》"></a>《间客》</h1><hr><blockquote><p>联邦的天空下，不可能有永远不被揭穿的黑幕，更不可能有完美到找不到任何线索、不留任何痕迹的计划。</p></blockquote><p><em>2023.06.04 21:11:16</em></p><hr><blockquote><p>只要平静下来，便是大海中的那团黑色礁石，只要动起来，便是划过大气层的暴烈流星，随时可以将这湛蓝的青天烧出一片焦糊的伤疤</p></blockquote><p><em>2023.06.06 08:43:14</em></p><hr><blockquote><p>网络是自由的，自由是无序的，无序是不可信任的，</p></blockquote><p><em>2023.06.06 18:39:59</em></p><hr><blockquote><p>“局面有些失控。”邰夫人轻轻地揉了揉眉心，缓声说道：“利家那个花样废物还看不出其中的危险，环山四州已经罢工了，再这样搞下去，社会动荡起来，吃亏的终究是联邦本身。” (吃人怪物)<br><em>2023.06.7 00:11:45</em></p></blockquote><hr><blockquote><p>大选失败又算什么？联邦换了多少任总统，可是七大家永远还是七大家。像我们这种家族，早已经深深地根植于联邦的土壤中。就拿我们利家举例，如果我们利家垮了，联邦的金融也就垮了。”<BR><BR>“但你不要忘记很重要的另外一点。”老人的语气忽然冰冷了起来，“如果联邦垮了，那么我们利家也就要跟着垮。所以无论你怎么做，都要记住，不能危害到联邦的根本利益</p></blockquote><p><em>2023.06.07 00:44:09</em></p><hr><blockquote><p>因为我看着不公平的事情，便会愤怒，便会想做些什么，而这个宇宙里却充斥着不公平，无论我走到哪里都是一样，所以我大概会一直愤怒下去。</p></blockquote><p><em>2023.06.07 01:50:27</em></p><hr><blockquote><p>流风坡会所的盛宴，是一场并不如何狂肆的狂欢。联邦归于稳定之后，食人者再次端起了餐盘，只不过他们依然要讲究风度与餐桌上的礼仪，自然不会唇角流着鲜血，再来赞叹庶民的血肉滋味，他们只会扮一副深沉忧国忧民样，捏捏自己口袋厚薄。所以今夜会所的分赃盛宴并不如何赤裸，唯一在目光焦点处被捧出来的，反而只有许乐一个人。</p></blockquote><p><em>2023.06.07 01:56:49</em></p><hr><blockquote><p>长远利益，大局观，只不过是某些人用来谋取自身利益的遮羞布。他们想让联邦稳定，是因为他们需要从这个稳定的肌体中吸血。然而这不是稳定，是麻木。所谓长远利益，终究也不过是他们的利益，比如利家的利益。</p></blockquote><p><em>2023.06.07 02:02:15</em></p><hr><blockquote><p>我有权利承担的唯一义务，是在任何时候做我认为正确的事情</p></blockquote><p><em>2023.06.07 02:10:33</em></p><hr><blockquote><p>我从来不会居高临下去看待任何一个普通的民众，但我也从来不会高估他们对信仰的忠诚度。</p></blockquote><p><em>2023.06.07 12:50:43</em></p><hr><blockquote><p>若不是许乐看着路上不平坦处，总有去踹两脚的强烈渴望，若不是他看见巷子里黑暗角落，便觉有些郁闷，想点一把火</p></blockquote><p><em>2023.06.07 22:38:45</em></p><hr><blockquote><p>但终究她的眼界比一般联邦女子要开阔许多，就算比不上人类头顶的星河，却也多了几分磊落之气，一旦她头顶的枷锁被人打破之后，便很难再被某些世俗的东西所困住，哪怕那些传统的力量极为强大，比如婚姻，比如爱情，比如这些看似美好的词语。</p></blockquote><p><em>2023.06.08 18:17:26</em></p><hr><blockquote><p>恋爱不见得能上床，但可能要结婚。找女人肯定不会结婚，但一定要上床。</p></blockquote><p><em>2023.06.09 18:32:19</em></p><hr><blockquote><p>“咱家那位天才主管是必然要成为大人物的角色，军神大人、国防部这一年一直在为他铺路，我就是那洒水泥的苦力角色，问题是任何决断总要有个分寸。”  “作为材料垫底的家伙……如果太死心眼卖命，将来只能变成无数被生生压碎的石头，嵌进水泥，铺在他的金光大道上，当他穿着锃亮军靴踏过路面时，一路平直，哪里还会想起脚下的碎石头。”</p></blockquote><p><em>2023.06.09 23:44:05</em></p><hr><blockquote><p>沈秘书目光不易察觉地自那块半焦黄的极品沉香木上掠过，又掠过别墅间充满了历史与权贵复合气意的陈设，不知为何品出了一丝陈腐的气息。他早已确认，只是今日格外清晰地感觉到，莫愁后山、议会山、那些千世家族、政客与巨商在首都星圈构织了一个漂浮于云端的陈腐圈子。就如面前这位身份尊贵却愿意时时做些家务活儿的夫人，她或他们的社会属性永远是站在一般民众之上，他们可以殚精竭虑为联邦永续长存而奋斗，但奋斗的目标则必然是让自己的家族通过联邦的存在而获得更多的利益。这是一种天然的属性，家族的本能，他们维持这个联邦的存在，本来就是为了保障自己家族的利益，而帕布尔总统和国防部将那些公子哥调往西林，则是触犯了这种根本利益，如果连自己子女的生命都无法保障，联邦上层社会的大人物们，又是在为了什么奋斗？</p></blockquote><p><em>2023.06.09 23:57:10</em></p><hr><blockquote><p>联邦政府并不是民众集体意志的体现，也不是某位小机率产生的优秀政治家意志的体现，而是一大群政体既得利益者集体意志的体现，这些控制了媒体，控制了金融，擅长操弄选举，挑拨民意，像死人骨头插在原野中一般插在联邦里的官僚和商人们，才是联邦的主流。</p></blockquote><p><em>2023.06.10 12:01:43</em></p><hr><blockquote><p>“最希望选举程序成本高昂的是权贵，这样穷人就得不到被选举权；最希望司法程序费用高昂的是权贵，这样穷人就打不赢官司；最希望媒体版面费高昂的也是权贵，这样穷人就得不到话语权。”</p></blockquote><p><em>2023.06.10 17:20:44</em></p><hr><blockquote><p>任何反对改变现状，一味沉浸在陈腐的现实，甚至将自身智慧本应产生的远见都抛诸脑后的人，都是一群既得利益者。</p></blockquote><p><em>2023.06.10 17:24:41</em></p><hr><blockquote><p>金钱有魔力，权力有魔力，美女有魔力，笔也有魔力，任何人类欲望的外延都能成为强大的工具，但所有这些工具，都没有枪的魔力更大。</p></blockquote><p><em>2023.06.11 10:25:38</em></p><hr><blockquote><p>战争永远只是政治的附属品，而政治又是经济的衍生品，联邦整体的利益，在某种程度上，确实是要比前线士兵的生命更重要……</p></blockquote><p><em>2023.06.11 10:37:30</em></p><hr><blockquote><p>一个星域辽阔、信息交流和武力传递速度有层级差异的太空政权，想要维系下去，如果没有全方位的电子监控网络，那么……就只有屠杀</p></blockquote><p><em>2023.06.11 11:10:47</em></p><hr><blockquote><p>沉默……本身就是一种态度</p></blockquote><p><em>2023.06.11 11:55:39</em></p><hr><blockquote><p>他说……每个人都有在乎的人或事，所以在某些特定时刻，总是需要做出一定的妥协和让步，而这种妥协与让步往往比大踏步前进更需要智慧和勇气。</p></blockquote><p><em>2023.06.11 13:05:28</em></p><hr><blockquote><p>刚射完精的男人都是阉人却往往自认为是圣人</p></blockquote><p><em>2023.06.12 18:34:40</em></p><hr><blockquote><p>奇迹其实从来都不是造物主的恩赐，而是来自于永不凋零的决心以及事先最充分的准备，暂时的失败并不可怕，真正的关键点在于你有没有做好失败的准备并且试图利用之。</p></blockquote><p><em>2023.06.12 22:47:20</em></p><hr><blockquote><p>世界上或许真有能够隔绝所有狂风的墙，但绝对没有能够永远隐藏起来的秘密</p></blockquote><p><em>2023.06.12 23:24:40</em></p><hr><blockquote><p>拥有无尽财富的商人随意施舍一碗剩饭，就能让快要饿死的乞丐活下去，对于某些人来说，既然这碗剩饭对商人而言无足轻重，那么他的感恩便只有一碗饭的重量，但在李维的理念中，乞丐没有那碗饭就要饿死，那么这碗饭就是一条命，你必须拿命去还。</p></blockquote><p><em>2023.06.13 00:11:45</em></p><hr><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>标注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP转数字</title>
    <link href="/IP%E8%BD%AC%E6%95%B0%E5%AD%97/"/>
    <url>/IP%E8%BD%AC%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>255.255.255.255 直接以字符串存入数据库使用varchar(15),而ipv4本质是32位的二进制码，int也有32位，但是因为有一个符号位存不下所以只能用long型来存储ip了。8个字节还是比15个字节差不多省了一半空间了。</p><p>0xFF，这代表的是十六进制数FF即1111 1111，对应十进制即为255，当一个数n对这个 0xFF 作 &amp; 操作时，相当于求n除以256所得的余数，也就是相当于n%256</p><span id="more"></span><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IPUtil</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ip地址转成long型数字</span><br><span class="hljs-comment">     * 将IP地址转化成整数的方法如下：</span><br><span class="hljs-comment">     * 1、通过String的split方法按.分隔得到4个长度的数组</span><br><span class="hljs-comment">     * 2、通过左移位操作（&lt;&lt;）给每一段的数字加权，第一段的权为2的24次方，第二段的权为2的16次方，第三段的权为2的8次方，最后一段的权为1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strIp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">ipToLong</span><span class="hljs-params">(String strIp)</span> &#123;<br>        String[]ip = strIp.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>        <span class="hljs-keyword">return</span> (Long.parseLong(ip[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">24</span>) + (Long.parseLong(ip[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span>) + (Long.parseLong(ip[<span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) + Long.parseLong(ip[<span class="hljs-number">3</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将十进制整数形式转换成127.0.0.1形式的ip地址</span><br><span class="hljs-comment">     * 将整数形式的IP地址转化成字符串的方法如下：</span><br><span class="hljs-comment">     * 1、将整数值进行右移位操作（&gt;&gt;&gt;），右移24位，右移时高位补0，得到的数字即为第一段IP。</span><br><span class="hljs-comment">     * 2、通过与操作符（&amp;）将整数值的高8位设为0，再右移16位，得到的数字即为第二段IP。</span><br><span class="hljs-comment">     * 3、通过与操作符吧整数值的高16位设为0，再右移8位，得到的数字即为第三段IP。</span><br><span class="hljs-comment">     * 4、通过与操作符吧整数值的高24位设为0，得到的数字即为第四段IP。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> longIp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">longToIP</span><span class="hljs-params">(<span class="hljs-type">long</span> longIp)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        sb.append(String.valueOf((longIp &gt;&gt;&gt; <span class="hljs-number">24</span>)));<br>        sb.append(<span class="hljs-string">&quot;.&quot;</span>);<br>        sb.append(String.valueOf((longIp &gt;&gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span> ));<br>        sb.append(<span class="hljs-string">&quot;.&quot;</span>);<br>        sb.append(String.valueOf((longIp &gt;&gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>));<br>        sb.append(<span class="hljs-string">&quot;.&quot;</span>);<br>        sb.append(String.valueOf((longIp)));<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(ipToLong(<span class="hljs-string">&quot;219.239.110.138&quot;</span>));<br>        System.out.println(longToIP(<span class="hljs-number">18537472</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm ERR! gyp ERR!</title>
    <link href="/npm%20ERR!%20gyp%20ERR!/"/>
    <url>/npm%20ERR!%20gyp%20ERR!/</url>
    
    <content type="html"><![CDATA[<p>键入<code> npm install --loglevel silly</code>查看更加详细的错误日志，大概定位错误原因</p><ol><li><p>通过运行验证是否有 VS 构建工具<code>npm config get msvs_version</code></p></li><li><p>如果未安装，下载Visual Studio2022，勾选c++桌面开发，个人认为最好默认目录</p><p>![VS 工作负载](npm ERR! gyp ERR!&#x2F;S3RgX.png)</p></li><li><p>运行<code>npm config set msvs_version 2022 --global</code></p></li><li><p>在 C:\Users&lt;your_username&gt;\  文件夹里查找任何有关npm的文件夹全部删除（基本带有npm等字样）</p></li><li><p>删除你项目里的 node_modules文件夹</p></li><li><p>设置环境变量：设置变量名<code>VCINSTALLDIR</code>和变量值<code>C:\Program Files\Microsoft Visual Studio\2022\Community\VC</code>（注意路径在你的电脑下可能不同，确保提供了 正确的VC 路径，自己去目录里面翻有的在Program Files(x86)）。</p></li><li><p>在终端命令：</p><ol><li><p><code>npm config set msbuild_path &quot;C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\15.0\Bin\MSBuild.exe&quot;</code> （请注意，您的位置可能有所不同，但请确保您指定的 MSBuild.exe 路径正确，包括 MSBuild.exe）</p><p>2.<code>npm config set msvs_version 2022</code></p></li></ol></li><li><p>做完这些，可以通过 <code>npm get msvs_version</code>   <code>npm get msbuild_path</code> 命令查看是否为你所想要的预期值，版本都要求一样如图。</p><p>![image-20230310112538357](npm ERR! gyp ERR!&#x2F;image-20230310112538357.png)</p></li><li><p>都完成操作后项目就可以<code>npm install --loglevel silly </code>成功了</p></li></ol><p>如果npm install 没报错，且 npm run dev 也一切正常，但是打不开网址，尝试把网址替换为localhost。</p><p>![image-20230310113636046](npm ERR! gyp ERR!&#x2F;image-20230310113636046.png)</p><p>参考文章</p><blockquote><p><a href="https://github.com/nodejs/node-gyp/issues/2203">https://github.com/nodejs/node-gyp/issues/2203</a></p><p><a href="https://stackoverflow.com/questions/57879150/how-can-i-solve-error-gypgyp-errerr-find-vsfind-vs-msvs-version-not-set-from-c">https://stackoverflow.com/questions/57879150/how-can-i-solve-error-gypgyp-errerr-find-vsfind-vs-msvs-version-not-set-from-c</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自旋锁与阻塞锁</title>
    <link href="/%E8%87%AA%E6%97%8B%E9%94%81%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%94%81/"/>
    <url>/%E8%87%AA%E6%97%8B%E9%94%81%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>最近在学锁相关的内容，有些内容比较纠结收集了很多资料才建立起锁相关这个体系的轮廓。</p><p>首先是操作系统线程5状态图，java虚拟机也可大致类比。</p><p>首先一个线程从就绪状态到运行状态，从运行状态到阻塞状态都要经过从用户态与内核态之间的切换，这一部比较耗时因为需要经过线程上下文数据的保存。</p><span id="more"></span><p><img src="/%E8%87%AA%E6%97%8B%E9%94%81%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%94%81/v2-62173c75c9212bfa07dd14188f57d3b6_r.jpg" alt="img"></p><h2 id="自旋锁与阻塞锁耗时大致一样？"><a href="#自旋锁与阻塞锁耗时大致一样？" class="headerlink" title="自旋锁与阻塞锁耗时大致一样？"></a>自旋锁与阻塞锁耗时大致一样？</h2><p>这是我最开始非常纠结的问题。</p><h3 id="阻塞锁"><a href="#阻塞锁" class="headerlink" title="阻塞锁"></a>阻塞锁</h3><p>阻塞锁是指当线程尝试获取锁失败时，线程进入阻塞状态，直到接收信号后被唤醒.很明显这就符合从用户态切换到内核态</p><p>那这个开销成本是什么呢？会有<strong>两次线程上下文切换的成本</strong>：</p><ul><li>当线程加锁失败时，内核会把线程的状态从「运行」状态设置为「睡眠」状态，然后把 CPU 切换给其他线程运行；</li><li>接着，当锁被释放时，之前「睡眠」状态的线程会变为「就绪」状态，然后内核会在合适的时间，把 CPU 切换给该线程运行。</li></ul><p>线程的上下文切换的是什么？当两个线程是属于同一个进程，<strong>因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。</strong></p><p>上下文切换需要几十纳秒到几微秒之间，如果锁住的代码执行时间极短（常见情况），那花在两次上下文切换的时间就会远多于锁住代码的执行时长。而且，线程的私有数据已经在CPU的cache上都预热好了，这一出一进，数据可能就凉透了，之后反复的cache miss那可就真的酸爽。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>java中自旋锁的实现是使用CAS(Compare And Swap),他所使用的汇编命令是 cmpxchg，是用硬件通过锁住cpu到内存总线的一种方式实现的一个指令。</p><p>在CAS中，有这样三个值：<br>●V：变量var，也即AtomicInteger类当中被声明为volatile 的value<br>●E：期望值(expected)<br>●U：新值(update)<br>比较并交换的过程如下：<br>判断V是否等于E，如果等于，将V的值设置为U；如果不等，说明已经有其它线程更新了变量v，则当前线程放弃更新，什么都不做。</p><p>至于自旋呢，看字面意思也很明白，自己旋转，是指尝试获取锁的线程不会立即阻塞而是采用循环的方式去尝试获取锁，当线程发现锁被占用时，会不断循环判断锁的状态，直到获取。<br>●这样的好处是减少线程上下文切换的消耗，<br>●缺点是循环会消耗CPU。</p><p>java中AtomicInteger类中使用自旋锁相关案例的源码如下：</p><p><img src="/%E8%87%AA%E6%97%8B%E9%94%81%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%94%81/image-20230212111931633.png" alt="image-20230212111931633"></p><p><img src="/%E8%87%AA%E6%97%8B%E9%94%81%E4%B8%8E%E9%98%BB%E5%A1%9E%E9%94%81/image-20230212111845603.png" alt="image-20230212111845603"></p><p>最开始我纠结的一点是为什么自旋锁可以减少线程上下文切换的消耗。我走到了一个死胡同是这么想的。阻塞锁中进一步运行的条件是另外一个线程释放该锁，那么自旋锁想接着运行有效代码肯定也要等待其他线程释放该锁呀！这还不是要把自己的线程切换给别的线程去进行释放锁？这不是和阻塞锁一样了都要进行线程的切换。<strong>其实你想想在多核系统下就不用了呀</strong>  两个线程运行在不同核，你可以任凭在其中一个核空转cpu，而另外一个线程在其他核运行。这样并不会进行线程切换呀。所以<strong>自旋锁只在多核cpu上才能发挥作用</strong>呀</p><h2 id="单核下需不需要锁？"><a href="#单核下需不需要锁？" class="headerlink" title="单核下需不需要锁？"></a>单核下需不需要锁？</h2><p>自旋锁我想通后，又走入一个误区。单核下每个线程的切换都是串行的，轮流使用一个核心。切换时资源都会同步到内存中应该就不要锁来锁住共享变量了吧？不对不对。其实<strong>每个线程都有自己的工作内存！！他会把共享变量复制到自己的工作内存来进行计算</strong>！！所以你看线程切换时可能双方工作内存中保存的那个共享变量就可能不一致了，还是要加锁。</p><h3 id="手写自旋锁"><a href="#手写自旋锁" class="headerlink" title="手写自旋锁"></a>手写自旋锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicReference;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 题目：实现一个自旋锁,复习CAS思想</span><br><span class="hljs-comment"> * 自旋锁好处：循环比较获取没有类似wait的阻塞。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 通过CAS操作完成自旋锁，A线程先进来调用myLock方法自己持有锁5秒钟，B随后进来后发现</span><br><span class="hljs-comment"> * 当前有线程持有锁，所以只能通过自旋等待，直到A释放锁后B随后抢到。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpinLockDemo</span><br>&#123;<br>    AtomicReference&lt;Thread&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();   <span class="hljs-comment">//里面可以保证cas操作</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;----come in&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!atomicReference.compareAndSet(<span class="hljs-literal">null</span>, thread)) &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        atomicReference.compareAndSet(thread,<span class="hljs-literal">null</span>);<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;----task over,unLock...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">SpinLockDemo</span> <span class="hljs-variable">spinLockDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpinLockDemo</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            spinLockDemo.lock();<br>            <span class="hljs-comment">//暂停几秒钟线程</span><br>            <span class="hljs-keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br>            spinLockDemo.unLock();<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br><br>        <span class="hljs-comment">//暂停500毫秒,线程A先于B启动</span><br>        <span class="hljs-keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">500</span>); &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            spinLockDemo.lock();<br><br>            spinLockDemo.unLock();<br>        &#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql运行的很慢排查</title>
    <link href="/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%88%E6%85%A2%E6%8E%92%E6%9F%A5/"/>
    <url>/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%88%E6%85%A2%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="第一类：锁的原因"><a href="#第一类：锁的原因" class="headerlink" title="第一类：锁的原因"></a>第一类：锁的原因</h2><p>mysql中有表锁，行锁，一些线程加了锁了之后占有着资源，其他线程再进入进行相关操作就可能一直在等待锁的释放导致感觉sql运行很慢</p><h3 id="等表锁"><a href="#等表锁" class="headerlink" title="等表锁"></a>等表锁</h3><p>如执行 <code>mysql&gt; select * from t where id=1;</code></p><p>分析原因的时候，一般都是首先执行一下show processlist命令，看看当前语句处于什么状态。</p><span id="more"></span><p><img src="/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%88%E6%85%A2%E6%8E%92%E6%9F%A5/5008d7e9e22be88a9c80916df4f4b328.png" alt="img"></p><p><strong>MDL（metadata lock)。</strong>MDL不需要显式使用，在访问一个表的时候会被自动加上。MDL的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此，在MySQL 5.5版本中引入了MDL，当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。</p><ul><li>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</li></ul><p>复现方法：</p><p><img src="/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%88%E6%85%A2%E6%8E%92%E6%9F%A5/742249a31b83f4858c51bfe106a5daca.png" alt="img"></p><h3 id="等行锁"><a href="#等行锁" class="headerlink" title="等行锁"></a>等行锁</h3><p>复现方法</p><p><img src="/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%88%E6%85%A2%E6%8E%92%E6%9F%A5/3e68326b967701c59770612183277475.png" alt="img"></p><p>会话A启动事务来更新id&#x3D;1这一行的数据卡住了没有提交事务，会话B查询id&#x3D;1这一行数据一直锁着的导致查询很慢</p><p>问题是怎么查出是谁占着这个写锁。如果你用的是MySQL 5.7版本，可以通过sys.innodb_lock_waits 表查到。</p><p>查询方法是：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t sys.innodb_lock_waits <span class="hljs-keyword">where</span> locked_table=`<span class="hljs-string">&#x27;test&#x27;</span>.<span class="hljs-string">&#x27;t&#x27;</span>`\G<br></code></pre></td></tr></table></figure><p><img src="/%E4%B8%80%E6%9D%A1sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E5%BE%88%E6%85%A2%E6%8E%92%E6%9F%A5/d8603aeb4eaad3326699c13c46379118.png" alt="img"></p><p>这个信息很全，4号线程是造成堵塞的罪魁祸首。而干掉这个罪魁祸首的方式，就是KILL 4。干掉4线程就可以回滚上一个语句释放锁。</p><h2 id="第二类：查询遍历慢"><a href="#第二类：查询遍历慢" class="headerlink" title="第二类：查询遍历慢"></a>第二类：查询遍历慢</h2><p>慢查询一般有这几种可能，没有建立好索引导致全表检索或没做到很好的索引覆盖导致多次回表，还有就是<code>select *</code> 很多数据造成网络io拥堵。</p><p>以上一般看慢查询日志。注意，为了把所有语句记录到slow log里，连接后先执行了 set long_query_time&#x3D;0，将慢查询日志的时间阈值设置为0。</p><p>在慢查询日志里查看哪条sql慢再进行sql性能分析，使用explain即可。</p><p>还有一致性读的原因也有可能查询慢，若一个事务对某行数据新操作生成了大量的undo log日志，另一事务进行该行读取的时候就要依次遍历改行数据的undo log也会很慢</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《You are Not Late! You are Not Early ！》</title>
    <link href="/%E3%80%8A%20You&#39;re%20Not%20Late!%20You&#39;re%20Not%20Early%20!%E3%80%8B/"/>
    <url>/%E3%80%8A%20You&#39;re%20Not%20Late!%20You&#39;re%20Not%20Early%20!%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>很多时候无意义的焦虑很折磨人，这首诗挺能安慰人的。</p><p>纽约时间比加州时间早三个小时，<br>New York is 3 hours ahead of California,</p><p>但加州时间并没有变慢。<br>but it does not make California slow.</p><p>有人 22 岁就毕业了，<br>Someone graduated at the age of 22,</p><p>但等了五年才找到好的工作！<br>but waited 5 years before securing a good job!</p><span id="more"></span><p>有人 25 岁就当上 CEO ，<br>Someone became a CEO at 25,</p><p>却在 50 岁去世。<br>and died at 50.</p><p>也有人迟到 50 岁才当上 CEO ，<br>While another became a CEO at 50,</p><p>然后活到 90 岁。<br>and lived to 90 years.</p><p>有人依然单身，<br>Someone is still single,</p><p>同时也有人已婚。<br>while someone else got married.</p><p>奥巴马 55 岁就退休，<br>Obama retires at 55,</p><p>川普 70 岁才开始当总统。<br>but Trump starts at 70.</p><p>世上每个人本来就有自己的发展时区。<br>Absolutely everyone in this world works based on their Time Zone.</p><p>身边有些人看似走在你前面，<br>People around you might seem to go ahead of you,</p><p>也有人看似走在你后面。<br>some might seem to be behind you.</p><p>但其实每个人在自己的时区有自己的步程。<br>But everyone is running their own RACE, in their own TIME.</p><p>不用嫉妒或嘲笑他们。<br>Don’t envy them or mock them.</p><p>他们都在自己的时区里，你也是！<br>They are in their TIME ZONE, and you are in yours!</p><p>生命就是等待正确的行动时机。<br>Life is about waiting for the right moment to act.</p><p>所以，放轻松。<br>So, RELAX.</p><p>你没有落后。<br>You’re not LATE.</p><p>你没有领先。<br>You’re not EARLY.</p><p>在命运为你安排的属于自己的时区里，一切都准时。<br>You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《未选择的路》</title>
    <link href="/%E3%80%8A%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF%E3%80%8B/"/>
    <url>/%E3%80%8A%E6%9C%AA%E9%80%89%E6%8B%A9%E7%9A%84%E8%B7%AF%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>记得这首诗应该是小学或初中课本上的一首诗。然后几年后又在《球形闪电》上看的了他的引用，那一刻颇受感动，理解了这首诗要表达的感觉。现在很多时候，在我将要面对一些选择的时候我都会情不自禁想起这首诗。</p><p>The Road Not Taken <strong>未 选 择 的 路</strong></p><p>by Robert Frost （美）弗罗斯特</p><p>Two roads diverged in a yellow wood, 黄色的树林里分出两条路，</p><p>And sorry I could not travel both，可惜我不能同时去涉足，</p><p>And be one traveler, long I stood，我在那路口久久伫立，</p><span id="more"></span><p>And looked down one as far as I could，我向着一条路极目望去，</p><p>To where it bent in the undergrown. 直到它消失在丛林深处。</p><p>Then took the other, as just as fair, 但我却选了另外一条路，</p><p>And having perhaps the better claim, 它荒草萋萋,十分幽寂，</p><p>Because it was grassy and wanted wear, 显得更诱人、更美丽，</p><p>Though as for that the passing there, 虽然在这两条小路上，</p><p>Had worn them really about the same. 都很少留下旅人的足迹。</p><p>And both that morning equally lay, 虽然那天清晨落叶满地，</p><p>In leaves no step had trodden black, 两条路都未经脚印污染，</p><p>Oh, I kept the first for another day! 呵,留下一条路等改日再见！</p><p>Yet knowing how way leads on to way, 但我知道路径延绵无尽头，</p><p>I doubted if I should even come back. 恐怕我难以再回返。</p><p>I shall be telling this with a sigh, 也许多少年后在某个地方，</p><p>Somewhere ages and ages hence. 我将轻声叹息把往事回顾。</p><p>Two roads diverged in a wood, 一片树林里分出两条路,</p><p>and I took the one less traveled by, 而我选了人迹更少的一条,</p><p>And that has made all the difference. 从此决定了我一生的道路.</p><p>顾子欣 译</p>]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis list实体类存入varchar字段</title>
    <link href="/mybatis%20List%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%98%E5%85%A5varchar%E5%AD%97%E6%AE%B5/"/>
    <url>/mybatis%20List%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%98%E5%85%A5varchar%E5%AD%97%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<p>对与采集别人接口数据时，返回格式Json中常常会出现数组类型，如</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span>:&quot;&#123;1,4,6,7&#125;&quot;<br></code></pre></td></tr></table></figure><p>这时候用jackson去解析数据当然要用List<Integer> type 来封装，但是我们又不想为这个type单独建一个数据表来存储他，就想用一个varchar字段就把这段数组字符串化的存于数据库。用mybatis-plus的话，直接用List 去对应varchar会报错，这时候我们要告诉mybatis如何把List存入varchar了。</p><span id="more"></span><p>这时候我们要自定义typeHandler，自定义typeHandler可以通过实现TypeHandler接口来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span><br><span class="hljs-meta">@MappedTypes(List.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListToVarcharTypeHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeHandler</span>&lt;List&lt;String&gt;&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(PreparedStatement preparedStatement, <span class="hljs-type">int</span> i, List&lt;String&gt; strings, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 遍历List类型的入参，拼装为String类型，使用Statement对象插入数据库</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; strings.size(); j++) &#123;<br>            <span class="hljs-keyword">if</span> (j == strings.size() - <span class="hljs-number">1</span>) &#123;<br>                sb.append(strings.get(j));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sb.append(strings.get(j)).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>        &#125;<br>        preparedStatement.setString(i, sb.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet resultSet, String s)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 获取String类型的结果，使用&quot;,&quot;分割为List后返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> resultSet.getString(s);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(resultString)) &#123;<br>            <span class="hljs-keyword">return</span> Arrays.asList(resultString.split(<span class="hljs-string">&quot;,&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet resultSet, <span class="hljs-type">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 获取String类型的结果，使用&quot;,&quot;分割为List后返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> resultSet.getString(i);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(resultString)) &#123;<br>            <span class="hljs-keyword">return</span> Arrays.asList(resultString.split(<span class="hljs-string">&quot;,&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getResult</span><span class="hljs-params">(CallableStatement callableStatement, <span class="hljs-type">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 获取String类型的结果，使用&quot;,&quot;分割为List后返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> callableStatement.getString(i);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(resultString)) &#123;<br>            <span class="hljs-keyword">return</span> Arrays.asList(resultString.split(<span class="hljs-string">&quot;,&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在配置文件中注明自定义typehandler的包路径</p><p>![image-20221230095110667](mybatis List实体类存入varchar字段&#x2F;image-20221230095110667.png)</p><p>在实体类中加入注解来标明这个字段用此typehandler来使用</p><p>![image-20221230094819627](mybatis List实体类存入varchar字段&#x2F;image-20221230094819627.png)</p><p>以下就可以把实体类中List存入数据库中的varchar了</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot单元测试</title>
    <link href="/springBoot%E6%B5%8B%E8%AF%95/"/>
    <url>/springBoot%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<ol><li>一直对springboot测试迷迷糊糊的，又搜索了一通资料总结一下<br>要引入两个依赖包</li></ol><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">    这个包在创建springboot项目时一般自动引入了<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>另外注意测试类包创建路径要与实际类的路径相同，在实际类里右键goto-&gt;test 自动生成即可</li></ol><p>如图所示：</p><p>3. </p><img src="springBoot测试/image-20221118152957307.png" alt="image-20221118152957307" style="zoom:90%;" /><p>最终编写结果如图所示：</p><p><img src="/springBoot%E6%B5%8B%E8%AF%95/image-20221118152558452.png" alt="image-20221118152558452"></p><p>遇到的错误：</p><p>spring boot 运行测试类时：Error creating bean with name ‘serverEndpointExporter’ 问题 错误</p><p>前期测试类是好使的，突然就不好使了，开始找问题，最近我只是引入了webscoket，使用注解</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@ServerEndpoint</span><br></code></pre></td></tr></table></figure><p><img src="/springBoot%E6%B5%8B%E8%AF%95/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MTAxNjUz,size_16,color_FFFFFF,t_70.png" alt="img"></p><p>就是这个注解惹得祸，</p><p>两种解决方式:</p><p>第一种：将@RunWith(SpringRunner.class) 去掉即可,但是这种方式会有局限，比如下方你要@Authwired一个类的时候会报错</p><p><img src="/springBoot%E6%B5%8B%E8%AF%95/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MTAxNjUz,size_16,color_FFFFFF,t_70-166875530132613.png" alt="img"></p><p>第二种方式:</p><p>在SpringBootTest后加上</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">(webEnvironment <span class="hljs-operator">=</span> SpringBootTest.WebEnvironment.RANDOM_PORT) 即可<br></code></pre></td></tr></table></figure><p>原因:websocket是需要依赖tomcat等容器的启动。所以在测试过程中我们要真正的启动一个tomcat作为容器。</p><p><img src="/springBoot%E6%B5%8B%E8%AF%95/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MTAxNjUz,size_16,color_FFFFFF,t_70-166875532009518.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的groupby</title>
    <link href="/mysql%E7%9A%84groupby/"/>
    <url>/mysql%E7%9A%84groupby/</url>
    
    <content type="html"><![CDATA[<p>最近要写一个根据地区聚合公司数量的需求，一时好久没写，有点忘了，看到一个很不错的博文。记录记录 </p><span id="more"></span><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正文开始&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>　　先来看下表1，表名为test：</p><p> <img src="/mysql%E7%9A%84groupby/162344381367279.jpg" alt="img"></p><p><strong>表1</strong></p><p>　　执行如下SQL语句：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">SELECT` `name` `FROM` `test``GROUP` `BY` `name<br></code></pre></td></tr></table></figure><p>　　你应该很容易知道运行的结果，没错，就是下表2：</p><p> <img src="/mysql%E7%9A%84groupby/162345461519459.jpg" alt="img"></p><p><strong>表2</strong></p><p>　　可是为了能够更好的理解<strong>“group by”多个列“</strong>和<strong>”聚合函数“</strong>的应用，我建议在思考的过程中，由表1到表2的过程中，增加一个虚构的中间表：<strong>虚拟表3</strong>。下面说说如何来思考上面SQL语句执行情况：</p><p>1.FROM test：该句执行后，应该结果和表1一样，就是原来的表。</p><p>2.FROM test Group BY name：该句执行后，我们想象生成了<strong>虚拟表3，</strong>如下所图所示，生成过程是这样的：group by name，那么找name那一列，具有相同name值的行，合并成一行，如对于name值为aa的，那么&lt;1 aa 2&gt;与&lt;2 aa 3&gt;两行合并成1行，所有的id值和number值写到一个单元格里面。</p><p> <img src="/mysql%E7%9A%84groupby/162343319172617.jpg" alt="img"></p><p>3.接下来就要针对<strong>虚拟表3</strong>执行Select语句了：</p><p>（1）**如果执行select *的话，那么返回的结果应该是虚拟表3，可是id和number中有的单元格里面的内容是多个值的，而关系数据库就是基于关系的，单元格中是不允许有多个值的，所以你看，执行select * 语句就报错了**。</p><p>（2）我们再看name列，每个单元格只有一个数据，所以我们select name的话，就没有问题了。为什么name列每个单元格只有一个值呢，因为我们就是用name列来group by的。</p><p>（3）那么对于id和number里面的单元格有多个数据的情况怎么办呢？答案就是用<strong>聚合函数，聚合函数就用来输入多个数据，输出一个数据的。</strong>如cout(id)，sum(number)，而每个聚合函数的输入就是每一个多数据的单元格。</p><p>（4）例如我们执行select name,sum(number) from test group by name，那么sum就对虚拟表3的number列的每个单元格进行sum操作，例如对name为aa的那一行的number列执行sum操作，即2+3，返回5，最后执行结果如下：</p><p><img src="/mysql%E7%9A%84groupby/170013481981068.jpg" alt="img"></p><p> （5）group by 多个字段该怎么理解呢：如group by name,number，我们可以把name和number 看成一个<strong>整体字段</strong>，以他们整体来进行分组的。如下图<img src="/mysql%E7%9A%84groupby/170005273394852.jpg" alt="img"></p><p>（6）接下来就可以配合select和聚合函数进行操作了。如执行select name,sum(id) from test group by name,number，结果如下图：</p><p><img src="/mysql%E7%9A%84groupby/170016502617188.jpg" alt="img"></p><p>（7）常用聚合函数</p><ul><li>count（）:计算表中的记录数（行数）</li><li>sum() : 计算表中数值列中数据的合计值</li><li>avg() : 计算表中数值列中数据的平均值</li><li>max() : 求出表中任意列中数据的最大值</li><li>min() : 求出表中任意列中数据的最小值</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java线程池</title>
    <link href="/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要使用线程池？"><a href="#为什么要使用线程池？" class="headerlink" title="为什么要使用线程池？"></a><strong>为什么要使用线程池？</strong></h3><p>线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务来执行。</p><p>线程池主要特点为：线程复用；控制最大并发数；管理线程。</p><span id="more"></span><p>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p><p>第二：提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</p><p>第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</p><h3 id="线程池如何使用"><a href="#线程池如何使用" class="headerlink" title="线程池如何使用"></a><strong>线程池如何使用</strong></h3><h4 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a><strong>架构说明</strong></h4><p>线程的四种创建方法：</p><ul><li>Thread</li><li>Runnable</li><li>Callable</li><li>线程池</li></ul><p>Java中的线程池是通过Executor框架实现</p><p>核心类：ThreadPoolExecutor</p><h4 id="线程池的重要参数"><a href="#线程池的重要参数" class="headerlink" title="线程池的重要参数"></a><strong>线程池的重要参数</strong></h4><p>源码查看：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ThreadPoolExecutor</span>(<br>    int corePoolSize,<br>    int maximumPoolSize,<br>    long keepAliveTime,<br>    <span class="hljs-variable">@NotNull</span> TimeUnit unit,<br>    <span class="hljs-variable">@NotNull</span> BlockingQueue&lt;Runnable&gt; workQueue<br>    <span class="hljs-variable">@NotNull</span> ThreadFactory threadFactory,<br>    <span class="hljs-variable">@NotNull</span> RejectExecutionHandler handler<br>    &#125;<br></code></pre></td></tr></table></figure><p>七大参数</p><ul><li>1.corePoolSize：线程池中的常驻核心线程数</li><li>2.maximumPoolSize：线程池能够容纳同时执行的最大线程数，此值必须大于等于1.</li><li>3.keepAliveTime：多余的空闲线程的存活时间。当前线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime值时，多余空闲线程会被销毁直到只剩下corePoolSize个线程为止。</li><li>4.unit: keepAliveTime的单位</li><li>5.workQueue：任务队列，被提交但尚未被执行的任务。(阻塞队列)</li><li>6.threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程一般用默认的即可。</li><li>7.handler：拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数。</li></ul><h3 id="线程池的底层工作原理"><a href="#线程池的底层工作原理" class="headerlink" title="线程池的底层工作原理"></a><strong>线程池的底层工作原理</strong></h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1</span> 在创建了线程池后，等待提交过来的任务请求。<br><span class="hljs-number">2</span> 当调用<span class="hljs-built_in">execute</span>（）方法添加一个请求任务时，线程池会做如下判断：<br><span class="hljs-number">2.1</span> 如果正在运行的线程数量小于 corePoolSize，那么马上创建马上创建线程运行这个任务。<br><span class="hljs-number">2.2</span> 如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列。<br><span class="hljs-number">2.3</span> 如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运  行这个任务。（队列出列，刚来的去队列中）<br> <span class="hljs-number">2.4</span> 如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池<br>会启动饱和拒绝策略来执行。<br><span class="hljs-number">3.</span>当一个线程完成任务时，它会从队列中取下一个任务来执行。<br><span class="hljs-number">4.</span>当一个线程无事可做超过一定的时间（keepAlilveTime）时，线程池会判断：如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小<br></code></pre></td></tr></table></figure><h4 id="线程池的主要工作流程"><a href="#线程池的主要工作流程" class="headerlink" title="线程池的主要工作流程"></a>线程池的主要工作流程</h4><p><img src="/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/1668128251845.png"><br><img src="/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/1668128261873.png"></p><h4 id="用银行的例子来说明："><a href="#用银行的例子来说明：" class="headerlink" title="用银行的例子来说明："></a><strong>用银行的例子来说明：</strong></h4><p><strong>用银行的例子来说明：</strong></p><ul><li>N个窗口 :corePoolSize</li><li>总共有K个窗口：maximumPoolSize</li><li>候客厅 ：BlockedQueue</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1</span> 银行开门，等待顾客上门办理业务<br><span class="hljs-number">2</span> 今天开<span class="hljs-built_in">N</span>个窗口，有<span class="hljs-built_in">N</span>个柜员提供服务。<br><span class="hljs-number">2.1</span> 如果顾客数小于等于<span class="hljs-built_in">N</span>，可以立即为每一个顾客办理业务，不用等待。<br>    <span class="hljs-number">2.2</span> 如果又来了<span class="hljs-variable">M</span>个顾客，<span class="hljs-variable">M</span>个顾客在候客厅坐得下，那么顾客就在候客厅等候<br>    <span class="hljs-number">2.3</span> 如果候客厅坐满了<span class="hljs-operator">,</span>银行大堂经理发现窗口不够用，叫人过来加班，开启其他没有工作的窗口。<br>    <span class="hljs-number">2.4</span> 如果候客厅满了，开启的工作窗口也是最大数<span class="hljs-built_in">K</span>，就会启动拒绝策略。（今天人太多了，明天来吧；或者您等会 再来看看，等人少的时候来）<br><span class="hljs-number">3</span> 当一个顾客的业务办理完成后，叫一下个顾客来办理业务<br><span class="hljs-number">4</span> 当人数很少的时候，额外加班的窗口会慢慢关闭，留下<span class="hljs-built_in">N</span>个窗口。<br></code></pre></td></tr></table></figure><h3 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a><strong>线程池的拒绝策略</strong></h3><p>等待队列也已经排满了，再也塞不下新任务了同时，线程池中的max线程也达到了，无法继续为新任务服务。</p><p>这时候我们就需要拒绝策略机制合理的处理这个问题。</p><p><strong>四种拒绝策略：</strong></p><ul><li><p>AbortPolicy（默认）：直接抛出RejectedExecutionException异常阻止系统正常运行。</p></li><li><p>CallerRunsPolicy:“调用者运行“一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者( main线程 )，从而降低新调用者的流量（谁让你找我的，你就找谁）</p></li><li><p>DiscardoldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务。</p></li><li><p>DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常。如果允许任务丢失，这是最好的一种方案。</p></li></ul><p>​这四种内置拒绝策略均实现了RejectExecutionHandler接口</p><p><strong>面试题目</strong>：你在工作中单一的&#x2F;固定数的&#x2F;可变的三种创建线程池的方法，你用那个多？</p><p>阿里开发手册</p><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p><p>说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p><p>【强制】线程池不允许使用Executors去创建，而是通过ThreadPooLExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>说明：Executors返回的线程池对象的弊端如下：</p><p>1）FixedThreadPool和SingleThreadPool：允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM(out of memory)。</p><p>2）CachedThreadPool和ScheduledThreadPool：允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p><p><strong>配置线程池</strong></p><p>Runtime.getRuntime().availableProcessors() 查看核心数</p><p>corePoolSize ：1或者0</p><p>如何设置 maximumPoolSize，分情况考虑，要看业务是CPU密集型还是IO密集型</p><p><strong>CPU密集型</strong></p><p>CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。</p><p>CPU密集任务只有在真正的多核CPU上才可能得到加速（通过多线程），而在单核CPU上，无论你开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就那些。</p><p>CPU密集型任务配置尽可能少的线程数量：</p><p>一般公式：CPU核数 + 1个线程的线程池</p><p><strong>IO密集型</strong></p><p>比如：数据库读写</p><p>由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数*2</p><p>I0密集型，即该任务需要大量的IO，即大量的阻塞。</p><p>在单线程上运行I0密集型的任务会导致浪费大量的CPU运算能力浪费在等待。</p><p>所以在IO密集型任务中使用多线程可以大大的加速程序运行，即使在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p><p>IO密集型时，大部分线程都阻塞，故需要多配置线程数：</p><p>参考公式：CPU核数&#x2F;1-阻塞系数阻塞系数在0.8~0.9之间比如8核CPU：8&#x2F;(1-0.9)&#x3D;80个线程数</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs livescript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadPoolDemo</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args)&#123;<br>        <span class="hljs-regexp">//通过 ThreadPooLExecutor 创建线程池</span><br><span class="hljs-regexp">        ExecutorService threadPool = new ThreadPoolExecutor(2,</span><br><span class="hljs-regexp">                5,</span><br><span class="hljs-regexp">                1L,</span><br><span class="hljs-regexp">                TimeUnit.SECONDS,</span><br><span class="hljs-regexp">                new LinkedBlockingQueue&lt;&gt;(3),</span><br><span class="hljs-regexp">                Executors.defaultThreadFactory(),</span><br><span class="hljs-regexp">                new ThreadPoolExecutor.DiscardOldestPolicy());//</span>这里的策略可以改变<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">11</span>;i  )&#123;<br>                threadPool.execute<span class="hljs-function"><span class="hljs-params">(()-&gt;&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                    System.out.println(Thread.currentThread().getName() <span class="hljs-string">&quot;\t 办理业务&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">                &#125;)</span>;</span><br><span class="hljs-function">            &#125;</span><br><span class="hljs-function">        &#125;<span class="hljs-title">catch</span> <span class="hljs-params">(Exception e)</span>&#123;</span><br><span class="hljs-function">            <span class="hljs-title">e</span>.<span class="hljs-title">printStackTrace</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;<span class="hljs-title">finally</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">threadPool</span>.<span class="hljs-title">shutdown</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">private</span> <span class="hljs-title">static</span> <span class="hljs-title">void</span> <span class="hljs-title">threadPoolInit</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">ExecutorService</span> <span class="hljs-title">threadPool</span> = <span class="hljs-title">Executors</span>.<span class="hljs-title">newCachedThreadPool</span><span class="hljs-params">()</span>;//一池<span class="hljs-title">N</span>个线程</span><br><span class="hljs-function"></span><br><span class="hljs-function">        //模拟多个用户来办理业务，每个用户就是一个来自外部的请求线程</span><br><span class="hljs-function">        <span class="hljs-title">try</span>&#123;</span><br><span class="hljs-function">            <span class="hljs-title">for</span><span class="hljs-params">(int i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i  )</span>&#123;</span><br><span class="hljs-function">                <span class="hljs-title">threadPool</span>.<span class="hljs-title">execute</span><span class="hljs-params">(()-&gt;&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                    System.out.println(Thread.currentThread().getName() <span class="hljs-string">&quot;\t 办理业务&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">                &#125;)</span>;</span><br><span class="hljs-function">            &#125;</span><br><span class="hljs-function">        &#125;<span class="hljs-title">catch</span> <span class="hljs-params">(Exception e)</span>&#123;</span><br><span class="hljs-function">            <span class="hljs-title">e</span>.<span class="hljs-title">printStackTrace</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;<span class="hljs-title">finally</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">threadPool</span>.<span class="hljs-title">shutdown</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java导出word文档</title>
    <link href="/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/"/>
    <url>/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="准备模板："><a href="#准备模板：" class="headerlink" title="准备模板："></a>准备模板：</h3><ol><li>先预填写好word文档，比如字体，文字居中，动态扩展表格啥子的。然后选择另存为-&gt;选其他格式-&gt;保存为xml格式。保存后最好再修改后缀为doc，打开看看是否乱码了</li></ol><p><img src="/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/1668158845884.png"></p><span id="more"></span><ol start="2"><li><p>把xml格式文件美化输出后，找出预填充的内容，<strong>预填充内容可能被分隔了，需要合并</strong>，合并后需要替换为freemarker中的表达式<code>$&#123;year&#125;</code></p><p>合并前</p></li></ol><p><img src="/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/1668158857796.png"></p><p>   合并后<br><img src="/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/1668158866488.png"></p><p>   全部用表达式替换后再把xml改为doc打开看看是这种内容<br>   <img src="/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/1668158891276.png"></p><ol start="3"><li>最后把文件改为freemarke支持的ftl格式即可</li></ol><p>有个小坑。若数据库没有查询到对应内容就往模板里面保存会报错不能为空或null，在xml文档中使用一个条件判断就可。或者在service层中提前做判空判断塞入值</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">&lt;<span class="hljs-symbol">#if</span> tenant_name?has_content &gt;<span class="hljs-string">$&#123;</span>tenant_name&#125;&lt;<span class="hljs-symbol">#else</span> &gt;无&lt;/<span class="hljs-symbol">#if</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="controller层代码"><a href="#controller层代码" class="headerlink" title="controller层代码"></a>controller层代码</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">@ApiOperation</span>(value = <span class="hljs-string">&quot;据id导出销号表&quot;</span>)<br>  <span class="hljs-keyword">@GetMapping</span>(<span class="hljs-string">&quot;/exportToWord/&#123;id&#125;&quot;</span>)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> maintainExportToWord(HttpServletResponse response, <span class="hljs-keyword">@PathVariable</span>(name = <span class="hljs-string">&quot;id&quot;</span>, required = <span class="hljs-literal">true</span>) String id) &#123;<br>      QuestionRemove questionRemove = questionRemoveService.getById(id);<br>      <span class="hljs-keyword">if</span> (questionRemove == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;给的id不对啦！&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">//文档生成</span><br>      File file = questionRemoveService.exportToWord(questionRemove);<br>      InputStream fin = <span class="hljs-literal">null</span>;<br>      OutputStream <span class="hljs-keyword">out</span> = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>          fin = <span class="hljs-keyword">new</span> FileInputStream(file);<br>          response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>          response.setContentType(<span class="hljs-string">&quot;application/msword&quot;</span>);<br>          String filename = <span class="hljs-string">&quot;企业问题销号表&quot;</span>+ DateUtils.gettimestamp();<br>          String filenameEncoder = <span class="hljs-string">&quot;&quot;</span>;<br>          filenameEncoder = URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>          response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//前后端分离</span><br>          response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);<span class="hljs-comment">//二进制  流文件</span><br>          response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + filenameEncoder + <span class="hljs-string">&quot;.doc&quot;</span>);<span class="hljs-comment">//下载及其文件名</span><br>          response.setHeader(<span class="hljs-string">&quot;Connection&quot;</span>, <span class="hljs-string">&quot;close&quot;</span>);<span class="hljs-comment">//关闭请求头连接</span><br>          response.setContentType(<span class="hljs-string">&quot;application/x-download&quot;</span>); <span class="hljs-comment">//设置文件在浏览器打开还是下载</span><br>          <span class="hljs-keyword">out</span> = response.getOutputStream();<br>          <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">512</span>];<br>          <span class="hljs-keyword">int</span> bytesToRead = -<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">while</span> ((bytesToRead = fin.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>              <span class="hljs-keyword">out</span>.write(buffer, <span class="hljs-number">0</span>, bytesToRead);<br>          &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;导出异常&quot;</span>);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-keyword">if</span> (fin != <span class="hljs-literal">null</span>) &#123;<br>                  fin.close();<br>              &#125;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-keyword">out</span> != <span class="hljs-literal">null</span>) &#123;<br>                  <span class="hljs-keyword">out</span>.close();<br>              &#125;<br>              <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>                  file.<span class="hljs-keyword">delete</span>();<br>              &#125;<br>          &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>              <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;关闭流异常&quot;</span>);<br>              <span class="hljs-comment">//return ResultVO.error(500,&quot;导出失败！&quot;);</span><br>          &#125;<br>      &#125;<br>     <span class="hljs-comment">// return ResultVO.ok(&quot;生成成功&quot;,file.length());</span><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="service层代码"><a href="#service层代码" class="headerlink" title="service层代码"></a>service层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> File <span class="hljs-title function_">exportToWord</span><span class="hljs-params">(QuestionRemove questionRemove)</span> &#123;<br>    Map&lt;String, String&gt; datas = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">fillInDate</span> <span class="hljs-operator">=</span> questionRemove.getFillInDate();<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sim</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日&quot;</span>);<br>    <span class="hljs-type">Questions</span> <span class="hljs-variable">questions</span> <span class="hljs-operator">=</span> questionsMapper.selectById(questionRemove.getQuestionId());<br>    <span class="hljs-keyword">if</span>(questions==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;销号表中的问题id在问题表中查找不到&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">enpterpriseName</span> <span class="hljs-operator">=</span> questions.getEnterpriseName()==<span class="hljs-literal">null</span>?<span class="hljs-string">&quot;无&quot;</span>: questions.getEnterpriseName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">linkDeptName</span> <span class="hljs-operator">=</span> questions.getLinkDeptName()==<span class="hljs-literal">null</span>?<span class="hljs-string">&quot;无&quot;</span>:questions.getLinkDeptName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fillFormDate</span> <span class="hljs-operator">=</span> DateUtils.date2Str(fillInDate==<span class="hljs-literal">null</span>?<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>():fillInDate, sim);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">principalPhone</span> <span class="hljs-operator">=</span> questionRemove.getPrincipal()+<span class="hljs-string">&quot;: &quot;</span>+questionRemove.getPrincipalPhone();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">linkDeptPeoplePhone</span> <span class="hljs-operator">=</span> questionRemove.getLinkedDeptContacts()+<span class="hljs-string">&quot;: &quot;</span>+questionRemove.getLinkedDeptContactsPhone();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tel</span> <span class="hljs-operator">=</span> questionRemove.getContacts()+<span class="hljs-string">&quot;: &quot;</span>+questionRemove.getContactsPhone();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">solveInfo</span> <span class="hljs-operator">=</span> questionRemove.getHandleInfo()==<span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;无&quot;</span>:questionRemove.getHandleInfo();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">activeDeptName</span> <span class="hljs-operator">=</span>questionRemove.getReferDepts()==<span class="hljs-literal">null</span>?<span class="hljs-string">&quot;无&quot;</span>:questionRemove.getReferDepts(); <span class="hljs-comment">//双签办加不？</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">completeDate</span> <span class="hljs-operator">=</span> questionRemove.getFinishTime()==<span class="hljs-literal">null</span>?fillFormDate:questionRemove.getFinishTime();<br><br>    datas.put(<span class="hljs-string">&quot;year&quot;</span>, DateUtil.year(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())+<span class="hljs-string">&quot;&quot;</span>);<br>    datas.put(<span class="hljs-string">&quot;linkDeptName&quot;</span>,linkDeptName );<br>    datas.put(<span class="hljs-string">&quot;enpterpriseName&quot;</span>, enpterpriseName);<br>    datas.put(<span class="hljs-string">&quot;fillFormDate&quot;</span>, fillFormDate);<br>    datas.put(<span class="hljs-string">&quot;principal_phone&quot;</span>,principalPhone);<br>    datas.put(<span class="hljs-string">&quot;tel&quot;</span>, tel);<br>    datas.put(<span class="hljs-string">&quot;linkDeptPeoplePhone&quot;</span>, linkDeptPeoplePhone);<br>    datas.put(<span class="hljs-string">&quot;solve_info&quot;</span>,solveInfo);<br>    datas.put(<span class="hljs-string">&quot;active_deptName&quot;</span>, activeDeptName);<br>    datas.put(<span class="hljs-string">&quot;completeDate&quot;</span>,completeDate);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">maintainFile</span> <span class="hljs-operator">=</span> WordGeneratorUtil.createDoc(WordGeneratorUtil.FreemarkerTemplate.maintain, <span class="hljs-string">&quot;企业问题销号表&quot;</span>, datas);<br>    <span class="hljs-keyword">return</span> maintainFile;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="word生成工具类"><a href="#word生成工具类" class="headerlink" title="word生成工具类"></a>word生成工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 主要以freemarker 为核心的模板生成word文档的工具类</span><br><span class="hljs-comment"> * 这里默认配置了固定路径</span><br><span class="hljs-comment"> * 需要根据路径取到对应模板</span><br><span class="hljs-comment"> * 请求参数需要设置对应的模板名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span>: WordGeneratorUtils</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 文档生成工具类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> * version: V1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WordGeneratorUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Template&gt; allTemplates = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TEMPLATE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/templates&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模板常量类配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreemarkerTemplate</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">Test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">maintain</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;整改通知单&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REC_RECOMMEND</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;recRecommend&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        configuration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Configuration.VERSION_2_3_28);<br>        configuration.setDefaultEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        configuration.setClassForTemplateLoading(WordGeneratorUtil.class, TEMPLATE_URL);<br>        allTemplates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 注意初始化要载入对应模板</span><br>            <span class="hljs-comment">//allTemplates.put(FreemarkerTemplate.Test, configuration.getTemplate(FreemarkerTemplate.Test + &quot;.ftl&quot;));</span><br>            allTemplates.put(FreemarkerTemplate.maintain, configuration.getTemplate(FreemarkerTemplate.maintain + <span class="hljs-string">&quot;.ftl&quot;</span>));<br>          <span class="hljs-comment">//  allTemplates.put(FreemarkerTemplate.REC_RECOMMEND, configuration.getTemplate(FreemarkerTemplate.REC_RECOMMEND + &quot;.ftl&quot;));</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">WordGeneratorUtil</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建doc 文档</span><br><span class="hljs-comment">     * dataMap 数据，需要对应模板的占位符，否则会出错</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataMap 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wordName  word 报表的名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> freemarkerTemplateName  指定需要使用哪个freemarker模板</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title function_">createDoc</span><span class="hljs-params">(String freemarkerTemplateName, String wordName, Map&lt;String, String&gt; dataMap)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(wordName);<br>            <span class="hljs-type">Template</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> allTemplates.get(freemarkerTemplateName);<br>            <span class="hljs-comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span><br>            <span class="hljs-type">Writer</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(f), StandardCharsets.UTF_8);<br>            t.process(dataMap, w);<br>            w.close();<br>            <span class="hljs-keyword">return</span> f;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            ex.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;生成word文档失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模板位置"><a href="#模板位置" class="headerlink" title="模板位置"></a>模板位置</h4><p><img src="/java%E5%AF%BC%E5%87%BAword%E6%96%87%E6%A1%A3/1668158925563.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写时复制</title>
    <link href="/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6/"/>
    <url>/%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h5 id="1，什么是写时复制-Copy-On-Write-容器？"><a href="#1，什么是写时复制-Copy-On-Write-容器？" class="headerlink" title="1，什么是写时复制(Copy-On-Write)容器？"></a>1，什么是写时复制(Copy-On-Write)容器？</h5><p>写时复制是指：在并发访问的情景下，当需要修改JAVA中Containers的元素时，不直接修改该容器，而是先复制一份副本，在副本上进行修改。修改完成之后，将指向原来容器的引用指向新的容器(副本容器)。</p><span id="more"></span><h5 id="2，写时复制带来的影响"><a href="#2，写时复制带来的影响" class="headerlink" title="2，写时复制带来的影响"></a>2，写时复制带来的影响</h5><p>①由于不会修改原始容器，只修改副本容器。因此，可以对原始容器进行并发地读。其次，实现了读操作与写操作的分离，读操作发生在原始容器上，写操作发生在副本容器上。</p><p>②数据一致性问题：读操作的线程可能不会立即读取到新修改的数据，因为修改操作发生在副本上。但最终修改操作会完成并更新容器，因此这是最终一致性。</p><h5 id="3，java中使用的写时复制"><a href="#3，java中使用的写时复制" class="headerlink" title="3，java中使用的写时复制"></a>3，java中使用的写时复制</h5><p>在JDK中提供了CopyOnWriteArrayList类和CopyOnWriteArraySet类，但是并没有提供CopyOnWriteMap的实现。因此，可以参考CopyOnWriteArrayList自己实现一个CopyOnWriteHashMap</p><p>这里主要是实现 在写操作时，如何保证线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyOnWriteMap</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K, V&gt;, Cloneable&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;K, V&gt; internalMap;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CopyOnWriteMap</span><span class="hljs-params">()</span> &#123;<br>        internalMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;K, V&gt;(<span class="hljs-number">100</span>);<span class="hljs-comment">//初始大小应根据实际应用来指定</span><br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            Map&lt;K, V&gt; newMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;K, V&gt;(internalMap);<span class="hljs-comment">//复制出一个新HashMap</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> newMap.put(key, value);<span class="hljs-comment">//在新HashMap中执行写操作</span><br>            internalMap = newMap;<span class="hljs-comment">//将原来的Map引用指向新Map</span><br>            <span class="hljs-keyword">return</span> val;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            Map&lt;K, V&gt; newMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;K, V&gt;(internalMap);<br>            newMap.putAll(m);<br>            internalMap = newMap;<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">V</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> internalMap.get(key);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    ......<span class="hljs-comment">//other methods inherit from interface Map</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4，应用场景"><a href="#4，应用场景" class="headerlink" title="4，应用场景"></a>4，应用场景</h5><p>CopyOnWrite容器适用于读多写少的场景。因为写操作时，需要复制一个容器，造成内存开销很大，也需要根据实际应用把握初始容器的大小。</p><p>不适合于数据的强一致性场合。若要求数据修改之后立即能被读到，则不能用写时复制技术。因为它是最终一致性。</p><p>总结：写时复制技术是一种很好的提高并发性的手段。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unix IO模型</title>
    <link href="/unix%20Io%E6%A8%A1%E5%9E%8B/"/>
    <url>/unix%20Io%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>首先I&#x2F;O模型分为<strong>操作系统与设备之间的IO，</strong>还有<strong>各进程与操作系统之间的I&#x2F;O模型。</strong></p><h3 id="操作系统与设备之间的IO"><a href="#操作系统与设备之间的IO" class="headerlink" title="操作系统与设备之间的IO"></a><strong>操作系统与设备之间的IO</strong></h3><p>（1）<strong>轮询方式</strong>：</p><p>CPU主动在各种设备中轮询检查状态，有数据就IO。</p><p>（2）<strong>中断方式</strong>：</p><p>设备有数据的时候，发出中断，由CPU决定要不要响应中断，然后中断，去处理设备的IO。CPU不用经常轮询设备状态。被动接收中断就行。</p><span id="more"></span><p>（3）<strong>DMA直接存储器访问方式</strong>：</p><p>如果1个字节的数据中断一次，传1KB的数据得中断1024次，太浪费CPU时间，于是有了DMA方式，CPU只需要把开头和结束的地址告诉DMA，中间由DMA完成数据IO。CPU从字节干预解放到数据块的干预。</p><p>（4）<strong>通道控制方式</strong>：</p><p>DMA方式只能控制一个设备的一块数据，多块数据还是要CPU干预多次。于是有了<strong>通道</strong>来控制IO，它比DMA更强大，能控制多块数据，多个设备的IO，更加解放了CPU参与IO过程。</p><p><strong>上面只是简单谈了操作系统与设备之间的IO方式，详细看b站王道操作系统第五章第三节的内容</strong></p><h3 id="进程与操作系统之间的I-O"><a href="#进程与操作系统之间的I-O" class="headerlink" title="进程与操作系统之间的I&#x2F;O"></a><strong>进程与操作系统之间的I&#x2F;O</strong></h3><p>一个某进程所要求的输入操作通常包括两个阶段: </p><ul><li>等待数据准备好</li><li>从内核向进程复制数据</li></ul><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。 </p><p>Unix 下有五种 I&#x2F;O 模型: </p><ul><li>阻塞式 I&#x2F;O</li><li>非阻塞式 I&#x2F;O</li><li>I&#x2F;O 复用(select 和 poll)</li><li>信号驱动式 I&#x2F;O(SIGIO)</li><li>异步 I&#x2F;O(AIO)</li></ul><h4 id="阻塞式-I-O"><a href="#阻塞式-I-O" class="headerlink" title="阻塞式 I&#x2F;O"></a><strong>阻塞式 I&#x2F;O</strong></h4><p>应用进程被阻塞，直到数据复制到应用进程缓冲区中才返回。 </p><p>应该注意到，在阻塞的过程中，其它程序还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其他程序还可以执行，因此不消耗 CPU 时间，这种模型的执行效率会比较高。只是进程阻塞，等待着数据！</p><p>![image-20221112204105800](unix Io模型&#x2F;image-20221112204105800.png)</p><h4 id="非阻塞式-I-O"><a href="#非阻塞式-I-O" class="headerlink" title="非阻塞式 I&#x2F;O"></a><strong>非阻塞式 I&#x2F;O</strong></h4><p>应用进程执行系统调用之后，内核返回一个错误码。<strong>应用进程可以继续执行</strong>，但是需要不断的执行系统调用来获知 I&#x2F;O 是否完成，这种方式称为轮询(polling)。 </p><p>由于 CPU 要处理更多的系统调用，因此这种模型是比较低效的。</p><p>​    ![image-20221112204309220](unix Io模型&#x2F;image-20221112204309220.png)</p><h4 id="I-O-复用"><a href="#I-O-复用" class="headerlink" title="I&#x2F;O 复用"></a><strong>I&#x2F;O 复用</strong></h4><p>使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读，这一过程会被阻塞，当某一个套接字可读时返回。之后再使用 recvfrom 把数据从内核复制到进程中。 </p><p>它可以让单个进程具有处理多个 I&#x2F;O 事件的能力。又被称为 Event Driven I&#x2F;O，即事件驱动 I&#x2F;O。难道是select管理多个io，那个io有数据了，就通知要这个数据的进程）</p><p>![image-20221112204332249](unix Io模型&#x2F;image-20221112204332249.png)</p><h4 id="信号驱动-I-O"><a href="#信号驱动-I-O" class="headerlink" title="信号驱动 I&#x2F;O"></a><strong>信号驱动 I&#x2F;O</strong></h4><p>应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。 </p><p>相比于非阻塞式 I&#x2F;O 的轮询方式，信号驱动 I&#x2F;O 的 CPU 利用率更高。</p><p>![image-20221112204353277](unix Io模型&#x2F;image-20221112204353277.png)</p><p><strong>异步 I&#x2F;O</strong> </p><p>进行 aio_read 系统调用会立即返回，应用进程继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。 </p><p><strong>异步 I&#x2F;O 与信号驱动 I&#x2F;O 的区别在于，异步 I&#x2F;O 的信号是通知应用进程 I&#x2F;O 完成，而信号驱动 I&#x2F;O 的信号是通知应用进程可以开始 I&#x2F;O。</strong></p><p>![image-20221112204418036](unix Io模型&#x2F;image-20221112204418036.png)</p><h3 id="I-O-模型比较"><a href="#I-O-模型比较" class="headerlink" title="I&#x2F;O 模型比较"></a><strong>I&#x2F;O 模型比较</strong></h3><h4 id="同步-I-O-与异步-I-O"><a href="#同步-I-O-与异步-I-O" class="headerlink" title="同步 I&#x2F;O 与异步 I&#x2F;O"></a><strong>同步 I&#x2F;O 与异步 I&#x2F;O</strong></h4><ul><li>同步 I&#x2F;O: 应用进程在调用 recvfrom 操作时会阻塞。</li><li>异步 I&#x2F;O: 不会阻塞。</li></ul><p>阻塞式 I&#x2F;O、非阻塞式 I&#x2F;O、I&#x2F;O 复用和信号驱动 I&#x2F;O 都是同步 I&#x2F;O，虽然非阻塞式 I&#x2F;O 和信号驱动 I&#x2F;O 在等待数据阶段不会阻塞，但是在之后的将数据从内核复制到应用进程这个操作会阻塞。</p><h4 id="五大-I-O-模型比较"><a href="#五大-I-O-模型比较" class="headerlink" title="五大 I&#x2F;O 模型比较"></a><strong>五大 I&#x2F;O 模型比较</strong></h4><p>前四种 I&#x2F;O 模型的主要区别在于第一个阶段，而第二个阶段是一样的: 将数据从内核复制到应用进程过程中，应用进程会被阻塞。</p><p>![image-20221112204504616](unix Io模型&#x2F;image-20221112204504616.png)</p><h3 id="select，epoll，kqueue-原理"><a href="#select，epoll，kqueue-原理" class="headerlink" title="select，epoll，kqueue 原理"></a><strong>select，epoll，kqueue 原理</strong></h3><p>已知的情况</p><p>内核中有注册 socket 的 IO 中断处理的回掉函数，有 IO 了会回调该函数。</p><p>在Unix&#x2F;Linux系统下，一个socket句柄，可以看做是一个文件，在socket上收发数据，相当于对一个文件进行读写，所以一个socket句柄，通常也用表示文件句柄的fd来表示。</p><h4 id="select："><a href="#select：" class="headerlink" title="select："></a><strong>select</strong>：</h4><p>select 管理多个 socket，select 收到一个来自网卡 IO 中断就返回，不知道这个中断对应是哪个 socket fd 的。需要用户线程遍历判断。</p><h4 id="epoll："><a href="#epoll：" class="headerlink" title="epoll："></a><strong>epoll</strong>：</h4><p>epoll 收到一个 IO 中断，会去查找这个中断对应哪个 socket fd。</p><p>epoll 中建立一个红黑树（平衡二叉树的一种），红黑树查找很高效。</p><p>用户注册感兴趣的 socket 事件，就是把这个 socket fd 插入到红黑树中，用中断号做key，可以理解为（中断号，socket fd）的二元组。</p><p>用户移除事件就是，删除树上的某个节点。</p><p>然后收到一个IO中断，epoll 把网卡数据拷贝到内核cache，根据中断号在红黑树中查找对应的 fd，把 fd 加入到就绪链表中，准备返回给用户线程。用户直接得到就绪的 fd。</p><h4 id="kqueue："><a href="#kqueue：" class="headerlink" title="kqueue："></a><strong>kqueue</strong>：</h4><p>收到 socket IO 中断去哈希表中查找对应的 socket fd，再把它放到一个链表里，返回。</p><p>用户注册一个感兴趣的事件，就是往哈希表中添加一个 fd</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令重排</title>
    <link href="/%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92/"/>
    <url>/%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h2><p><strong>二狗</strong>：二胖你昨天请假了是不是又去面试了啊？</p><p><strong>二胖</strong>：别说了我就出去试试水，看看现在工作好不好找，顺带出去找找打击，然后才能好好静下心来好好学习。</p><p><strong>二狗：</strong> 那被打击的怎么样啊？知道自己是什么样的水平了吧，坏笑。</p><p><strong>二胖</strong>：基础太差，一面就让回去等通知了，我要好好学习了，不跟你瞎扯了。</p><p><strong>二狗:</strong> 都问了你什么问题啊，把你打击成这样？一起复盘下让我也好好准备下啊。</p><p><strong>二胖</strong>：好吧，你既然这么好奇，那我就大概说下吧，你搬上小板凳仔细挺好了哦。我要开始我的表演了。</p><span id="more"></span><p>下面二胖第一面开始了。</p><p><strong>面试官</strong>：二胖是吧，先做个自我介绍吧。</p><p><strong>二胖</strong>：好的，我叫二胖，我来自长沙，今年25岁，从事java开发快3年了，现在在XX公司XX事业部担任高级<strong>java</strong>开发工程师，主要负责XX系统。。。。。</p><p><strong>面试官</strong>：好的，我看你简历上写着熟练掌握并发编程你能跟我说说并发编程里面你都知道哪些关键字。</p><p><strong>二胖：</strong> 这不就是要考我 synchronized 和volatile 这个我擅长啊，我特意背过的，synchronized 是java提供的一个关键字它主要能保证原子性、有序性它的底层主要是通过Monitor来实现的。volatile也是java的一个关键字它的主要作用是可以保证可见性。。。。此处省略1000字。</p><p><strong>面试官</strong>：八股文背的不错，说了这么多，我们来动手试试吧，写一个双重校验锁（<strong>dcl</strong>）的单例我看看。</p><p><strong>二胖：</strong> 从屁股口袋里拿出了笔三下五除二就把它默写出来了。</p><p><strong>面试官</strong>：你有说道volatile关键字和synchronized关键字。synchronized可以保证原子性、有序性和可见性。而volatile却只能保证有序性和可见性。那么，我们再来看一下双重校验锁实现的单例，已经使用了synchronized，为什么还需要volatile？这个volatile是否可以去掉？</p><p><strong>二胖：</strong> 让我想想，貌似好像确实可以去掉。</p><p><strong>面试官：</strong> 我们今天的面试就到这里吧，后续有消息人事会联系你，感谢你今天来面试。</p><p>二胖很郁闷回去谷歌了下这个问题，<strong>stackoverflow</strong>上也有这个问题，看样子不只我一个人不知道这个问题吗？看样子面试挂的不冤。</p><h2 id="synchronized-的有序性？"><a href="#synchronized-的有序性？" class="headerlink" title="synchronized 的有序性？"></a><strong>synchronized 的有序性？</strong></h2><p>我们先来看看没有加volatile 修饰的单例:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>  public class Singleton &#123;  <br><span class="hljs-symbol">2 </span>     private static Singleton singleton;  <br><span class="hljs-symbol">3 </span>      private Singleton ()&#123;&#125;  <br><span class="hljs-symbol">4 </span>      public static Singleton getSingleton() &#123;  <br><span class="hljs-symbol">5 </span>      <span class="hljs-keyword">if</span> (singleton == null) &#123;  <br><span class="hljs-symbol">6 </span>          synchronized (Singleton.class) &#123;  <br><span class="hljs-symbol">7 </span>              <span class="hljs-keyword">if</span> (singleton == null) &#123;  <br><span class="hljs-symbol">8 </span>                  singleton = <span class="hljs-keyword">new</span> Singleton();  <br><span class="hljs-symbol">9 </span>              &#125;  <br><span class="hljs-symbol">10 </span>          &#125;  <br><span class="hljs-symbol">11 </span>      &#125;  <br><span class="hljs-symbol">12 </span>      <span class="hljs-keyword">return</span> singleton;  <br><span class="hljs-symbol">13 </span>      &#125;  <br><span class="hljs-symbol">14 </span>  &#125;  <br></code></pre></td></tr></table></figure><p>上述代码看下来是不是感觉没啥问题。</p><p>首先我们先来看下这一行代码到底干了哪些事情</p><p><code>singleton = new Singleton() </code><br><img src="/%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92/1667998443547.png"></p><p>​    </p><p>上述过程我们可以简化成3个步骤：</p><ul><li><p>①<strong>JVM</strong>为对象分配一块内存M。</p></li><li><p>②在内存M上为对象进行初始化。</p></li><li><p>③将内存M的地址复制给singleton变量。</p></li></ul><p><strong>这个步骤有两种执行顺序可以按照 ①②③或者①③②来执行。当我们按照①③②的顺序来执行的时候我们假设有两个线程(指令重排)</strong></p><p>ThreadA 和ThreadB 同时来请求<code>Singleton.getSingleton</code>方法:</p><p>正常情况按照 <strong>①②③</strong>的顺序来执行:</p><p><strong>第一步：</strong>ThreadA 进入到第8行，执行 <code>singleton = new Singleton()</code> 进行对象的初始化（按照对象初始化的过程 <strong>①②③</strong>）执行完。</p><p><strong>第二步：</strong> ThreadB进入第5行判断singleton不为空（第一步已经初始化好了），直接返回</p><p>singleton<strong>第三步：</strong>拿到这个对象做其他的操作。这样看下来是不是没有啥问题。</p><p>那如果对象初始化的时候按照 <strong>①③②</strong> 的步骤我们再来看看：</p><p><strong>第一步：</strong> ThreadA进入到第8行，执行 <code>singleton = new Singleton()</code>, 执行完①JVM为对象分配一块内存M。③将内存的地址复制给singleton变量。</p><p><strong>第二步：</strong>  此时ThreadB直接进入第5行，发现singleton已经不为空了然后直接就跳转到12行拿到这个singleton返回去执行操作去了。此时ThreadB拿到的singleton对象是个半成品对象，因为还没有为这个对象进行初始化(<strong>②还没执行</strong>)。</p><p><strong>第三步：</strong> 所以ThreadB拿到的对象去执行方法可能会有异常产生。至于为什么会这样列？《Java 并发编程实战》有提到有 synchronized 无 volatile 的 DCL(双重检查锁) 会出现的情况：线程可能看到引用的当前值，但对象的状态值确少失效的，这意味着线程可以看到对象处于无效或错误的状态。说白了也就是ThreadB是可以拿到一个引用已经有了但是内存资源还没有分配的对象。</p><p>如果要解决创建对象按照①②③的顺序，<strong>其实也就是为了解决指令重排只要第2行加个volatile修饰就好。（它有内存屏障的作用，禁止指令重排）</strong></p><p>说好的synchronized 不是可以保证有序性的吗？volatile的有序性？synchronized 不能够保证指令重排吗？</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>怎么来定义顺序呢？《深入理解Java虚拟机第三版》有提到:</p><p>Java程序中天然的有序性可以总结为一句话：<strong>如果在本线程内观察，所有操作都是天然有序的。如果在一个线程中观察另一个线程，所有操作都是无序的</strong>。前半句是指“线程内似表现为串行的语义”，后半句是指“指令重排”现象和“工作内存与主内存同步延迟”现象。</p><ul><li>synchronized 的有序性是持有相同锁的两个同步块只能串行的进入，<strong>即被加锁的内容要按照顺序被多个线程执行，但是其内部的同步代码还是会发生重排序，使块与块之间有序可见。</strong></li><li>volatile的有序性是通过插入内存屏障来保证指令按照顺序执行。不会存在后面的指令跑到前面的指令之前来执行。是保证编译器优化的时候不会让指令乱序。</li><li>synchronized 是不能保证指令重排的。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雪花算法</title>
    <link href="/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    <url>/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>snowflake 算法是 twitter 开源的分布式 id 生成算法，采用 Scala 语言实现，是把一个 64 位的 long 型的 id，1 个 bit 是不用的，用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><span id="more"></span><ul><li>1 bit：不用为啥呢？因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</li><li>41 bit：表示的是时间戳，单位是毫秒。41 bit 可以表示的数字多达 2^41 - 1，也就是可以标识 2^41 - 1 个毫秒值，换算成年就是表示69年的时间。</li><li>10 bit：记录工作机器 id，代表的是这个服务最多可以部署在 2^10台机器上哪，也就是1024台机器。但是 10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2^5个机房（32个机房），每个机房里可以代表 2^5 个机器（32台机器）。</li><li>12 bit：这个是用来记录同一个毫秒内产生的不同 id，12 bit 可以代表的最大正整数是 2^12 - 1 &#x3D; 4096，也就是说可以用这个 12 bit 代表的数字来区分同一个毫秒内的 4096 个不同的 id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> | <span class="hljs-number">0001100</span> <span class="hljs-number">10100010</span> <span class="hljs-number">10111110</span> <span class="hljs-number">10001001</span> <span class="hljs-number">01011100</span> <span class="hljs-number">00</span> | <span class="hljs-number">10001</span> | <span class="hljs-number">1</span> <span class="hljs-number">1001</span> | <span class="hljs-number">0000</span> <span class="hljs-number">00000000</span><br></code></pre></td></tr></table></figure><h3 id="雪花算法实现"><a href="#雪花算法实现" class="headerlink" title="雪花算法实现:"></a>雪花算法实现:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SnowflakeIdWorker</span> &#123;<br><br>    <span class="hljs-comment">// ==============================Fields===========================================</span><br>    <span class="hljs-comment">/** 开始时间戳 (2015-01-01) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">twepoch</span> <span class="hljs-operator">=</span> <span class="hljs-number">1420041600000L</span>;<br><br>    <span class="hljs-comment">/** 机器id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 数据标识id所占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br><br>    <span class="hljs-comment">/** 序列在id中占的位数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">12L</span>;<br><br>    <span class="hljs-comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><br>    <span class="hljs-comment">/** 支持的最大数据标识id，结果是31 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br><br>    <span class="hljs-comment">/** 机器ID向左移12位 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> sequenceBits;<br><br>    <span class="hljs-comment">/** 数据标识id向左移17位(12+5) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits;<br><br>    <span class="hljs-comment">/** 时间戳向左移22位(5+5+12) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampLeftShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;<br><br>    <span class="hljs-comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-comment">/** 工作机器ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br><br>    <span class="hljs-comment">/** 数据中心ID(0~31) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br><br>    <span class="hljs-comment">/** 毫秒内序列(0~4095) */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>    <span class="hljs-comment">/** 上次生成ID的时间戳 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">//==============================Constructors=====================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> workerId 工作ID (0~31)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> datacenterId 数据中心ID (0~31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SnowflakeIdWorker</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.workerId = workerId;<br>        <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-comment">// ==============================Methods==========================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SnowflakeId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br><br>        <span class="hljs-comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                    String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>        &#125;<br><br>        <span class="hljs-comment">//如果是同一时间生成的，则进行毫秒内序列</span><br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;     <span class="hljs-comment">//&amp; 两个位都为1时，结果才为1</span><br><br>            <span class="hljs-comment">//毫秒内序列溢出</span><br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123; <br>                <span class="hljs-comment">//阻塞到下一个毫秒,获得新的时间戳</span><br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//时间戳改变，毫秒内序列重置</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//上次生成ID的时间戳</span><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-comment">//移位并通过或运算拼到一起组成64位的ID</span><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="hljs-comment">//</span><br>                | (datacenterId &lt;&lt; datacenterIdShift) <span class="hljs-comment">//</span><br>                | (workerId &lt;&lt; workerIdShift) <span class="hljs-comment">//</span><br>                | sequence;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lastTimestamp 上次生成ID的时间戳</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回以毫秒为单位的当前时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 当前时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-comment">//==============================Test=============================================</span><br>    <span class="hljs-comment">/** 测试 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SnowflakeIdWorker</span> <span class="hljs-variable">idWorker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SnowflakeIdWorker</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idWorker.nextId();<br>            System.out.println(Long.toBinaryString(id));<br>            System.out.println(id);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aop 数据库事务控制注解版</title>
    <link href="/Aop%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E6%B3%A8%E8%A7%A3%E7%89%88/"/>
    <url>/Aop%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E6%B3%A8%E8%A7%A3%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p>直接注解通知顺序不一样，？好像是前置，最终，返回，不是很明白。使用环绕通知自己定义通知顺序，不想探究了。</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">utils</span>;<br><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">aspectj</span>.<span class="hljs-property">lang</span>.<span class="hljs-property">ProceedingJoinPoint</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">aspectj</span>.<span class="hljs-property">lang</span>.<span class="hljs-property">annotation</span>.*;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Autowired</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 和事务管理相关的工具类，它包含了，开启事务，提交事务，回滚事务和释放连接</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span>(<span class="hljs-string">&quot;txManger&quot;</span>)<br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionManager</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ConnectionUtils</span> connectionUtils;<br>    <span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">&quot;execution(* com.itheima.service.impl.*.*(..) )&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">pt1</span>(<span class="hljs-params"></span>)&#123;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启事务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around</span>(<span class="hljs-string">&quot;pt1()&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">aroundAdvice</span>(<span class="hljs-params">ProceedingJoinPoint pjp</span>)&#123;<br>        <span class="hljs-title class_">Object</span> trValue=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">Object</span>[] args = pjp.<span class="hljs-title function_">getArgs</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">beginTransaction</span>();<br><br>           trValue= pjp.<span class="hljs-title function_">proceed</span>(args);<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">commit</span>();<br>           <span class="hljs-keyword">return</span> trValue;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Throwable</span> e)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">rollback</span>();<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">release</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">beginTransaction</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connectionUtils.<span class="hljs-title function_">getThreadConnection</span>().<span class="hljs-title function_">setAutoCommit</span>(<span class="hljs-literal">false</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提交事务</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">commit</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connectionUtils.<span class="hljs-title function_">getThreadConnection</span>().<span class="hljs-title function_">commit</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 回滚事务</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">rollback</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connectionUtils.<span class="hljs-title function_">getThreadConnection</span>().<span class="hljs-title function_">rollback</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放连接</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">release</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connectionUtils.<span class="hljs-title function_">getThreadConnection</span>().<span class="hljs-title function_">close</span>();<span class="hljs-comment">//还回连接池中</span><br>            connectionUtils.<span class="hljs-title function_">removeConnection</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java动态代理</title>
    <link href="/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>  小A：“代理模式都有些什么角色？”</p><p>大B：“1、抽象角色（秘书-局长）：声明真实对象和代理对象的共同接口（秘书-局。2、代理角色（秘书）：代理对象角色（秘书）内部含有对真实对象（局长）的引用，从而可以操作真实对象（局长），同时代理对象（秘书）提供与真实对象（局长）相同的接口（秘书-局长）以便在任何时刻都能代替真实对象（局长）。同时，代理对象（秘书）可以在执行真实对象（局长）操作时，附加其他的操作，相当于对真实对象（局长）进行封装。3、真实角色（局长）：代理角色（秘书）所代表的真实对象（局长），是我们最终要引用的对象（局长）。”</p><p>  按功能将代理的组成类分为：标的类、标的接口、拦截类、耦合类</p><span id="more"></span><h3 id="基于接口的创建代理"><a href="#基于接口的创建代理" class="headerlink" title="基于接口的创建代理"></a>基于接口的创建代理</h3><p><strong>要求被代理对象必须实现一个接口</strong></p><ol><li>抽象角色：IProducer</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对生产厂家要求的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IProducer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销售</span><br><span class="hljs-comment">     * @param money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saleProduct</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> money</span>)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 售后</span><br><span class="hljs-comment">     * @param money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterService</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> money</span>)</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ol start="2"><li>局长 Producer</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一个生产者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Producer implements IProducer&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销售</span><br><span class="hljs-comment">     * @param money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> saleProduct(<span class="hljs-type">float</span> <span class="hljs-type">money</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;销售产品，并拿到钱：&quot;+<span class="hljs-type">money</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 售后</span><br><span class="hljs-comment">     * @param money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterService(<span class="hljs-type">float</span> <span class="hljs-type">money</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;提供售后服务，并拿到钱：&quot;+<span class="hljs-type">money</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>客户调用秘书</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟一个消费者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 动态代理：</span><br><span class="hljs-comment">         *  特点：字节码随用随创建，随用随加载</span><br><span class="hljs-comment">         *  作用：不修改源码的基础上对方法增强</span><br><span class="hljs-comment">         *  分类：</span><br><span class="hljs-comment">         *      基于接口的动态代理</span><br><span class="hljs-comment">         *      基于子类的动态代理</span><br><span class="hljs-comment">         *  基于接口的动态代理：</span><br><span class="hljs-comment">         *      涉及的类：Proxy</span><br><span class="hljs-comment">         *      提供者：JDK官方</span><br><span class="hljs-comment">         *  如何创建代理对象：</span><br><span class="hljs-comment">         *      使用Proxy类中的newProxyInstance方法</span><br><span class="hljs-comment">         *  创建代理对象的要求：</span><br><span class="hljs-comment">         *      被代理类最少实现一个接口，如果没有则不能使用</span><br><span class="hljs-comment">         *  newProxyInstance方法的参数：</span><br><span class="hljs-comment">         *      ClassLoader：类加载器</span><br><span class="hljs-comment">         *          它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</span><br><span class="hljs-comment">         *      Class[]：字节码数组</span><br><span class="hljs-comment">         *          它是用于让代理对象和被代理对象有相同方法。固定写法。</span><br><span class="hljs-comment">         *      InvocationHandler：用于提供增强的代码</span><br><span class="hljs-comment">         *          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</span><br><span class="hljs-comment">         *          此接口的实现类都是谁用谁写。</span><br><span class="hljs-comment">         */</span><br>       <span class="hljs-type">IProducer</span> <span class="hljs-variable">proxyProducer</span> <span class="hljs-operator">=</span> (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),<br>                producer.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span><br><span class="hljs-comment">                     * 方法参数的含义</span><br><span class="hljs-comment">                     * <span class="hljs-doctag">@param</span> proxy   代理对象的引用</span><br><span class="hljs-comment">                     * <span class="hljs-doctag">@param</span> method  当前执行的方法</span><br><span class="hljs-comment">                     * <span class="hljs-doctag">@param</span> args    当前执行方法所需的参数</span><br><span class="hljs-comment">                     * <span class="hljs-doctag">@return</span>        和被代理对象方法有相同的返回值</span><br><span class="hljs-comment">                     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">                     */</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">//提供增强的代码</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                        <span class="hljs-comment">//1.获取方法执行的参数</span><br>                        <span class="hljs-type">Float</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> (Float)args[<span class="hljs-number">0</span>];<br>                        <span class="hljs-comment">//2.判断当前方法是不是销售</span><br>                        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;saleProduct&quot;</span>.equals(method.getName())) &#123;<br>                            returnValue = method.invoke(producer, money*<span class="hljs-number">0.8f</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> returnValue;<br>                    &#125;<br>                &#125;);<br>        proxyProducer.saleProduct(<span class="hljs-number">10000f</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="基于类的动态代理"><a href="#基于类的动态代理" class="headerlink" title="基于类的动态代理"></a>基于类的动态代理</h3><p>** 需要添加依赖cglib，被代理类要求未被fianl修饰**</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>局长</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一个生产者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Producer &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销售</span><br><span class="hljs-comment">     * @param money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> saleProduct(<span class="hljs-type">float</span> <span class="hljs-type">money</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;销售产品，并拿到钱：&quot;+<span class="hljs-type">money</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 售后</span><br><span class="hljs-comment">     * @param money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterService(<span class="hljs-type">float</span> <span class="hljs-type">money</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;提供售后服务，并拿到钱：&quot;+<span class="hljs-type">money</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>客户调用秘书</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟一个消费者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 动态代理：</span><br><span class="hljs-comment">         *  特点：字节码随用随创建，随用随加载</span><br><span class="hljs-comment">         *  作用：不修改源码的基础上对方法增强</span><br><span class="hljs-comment">         *  分类：</span><br><span class="hljs-comment">         *      基于接口的动态代理</span><br><span class="hljs-comment">         *      基于子类的动态代理</span><br><span class="hljs-comment">         *  基于子类的动态代理：</span><br><span class="hljs-comment">         *      涉及的类：Enhancer</span><br><span class="hljs-comment">         *      提供者：第三方cglib库</span><br><span class="hljs-comment">         *  如何创建代理对象：</span><br><span class="hljs-comment">         *      使用Enhancer类中的create方法</span><br><span class="hljs-comment">         *  创建代理对象的要求：</span><br><span class="hljs-comment">         *      被代理类不能是最终类</span><br><span class="hljs-comment">         *  create方法的参数：</span><br><span class="hljs-comment">         *      Class：字节码</span><br><span class="hljs-comment">         *          它是用于指定被代理对象的字节码。</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *      Callback：用于提供增强的代码</span><br><span class="hljs-comment">         *          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</span><br><span class="hljs-comment">         *          此接口的实现类都是谁用谁写。</span><br><span class="hljs-comment">         *          我们一般写的都是该接口的子接口实现类：MethodInterceptor</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">cglibProducer</span> <span class="hljs-operator">=</span> (Producer)Enhancer.create(producer.getClass(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInterceptor</span>() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 执行北地阿里对象的任何方法都会经过该方法</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> proxy</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> methodProxy ：当前执行方法的代理对象</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">//提供增强的代码</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                <span class="hljs-comment">//1.获取方法执行的参数</span><br>                <span class="hljs-type">Float</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> (Float)args[<span class="hljs-number">0</span>];<br>                <span class="hljs-comment">//2.判断当前方法是不是销售</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;saleProduct&quot;</span>.equals(method.getName())) &#123;<br>                    returnValue = method.invoke(producer, money*<span class="hljs-number">0.8f</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> returnValue;<br>            &#125;<br>        &#125;);<br>        cglibProducer.saleProduct(<span class="hljs-number">12000f</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长笛女孩节选</title>
    <link href="/%E9%95%BF%E7%AC%9B%E5%A5%B3%E5%AD%A9%E8%8A%82%E9%80%89/"/>
    <url>/%E9%95%BF%E7%AC%9B%E5%A5%B3%E5%AD%A9%E8%8A%82%E9%80%89/</url>
    
    <content type="html"><![CDATA[<p>长笛女孩在舞台中心就位时，没有人注意她们。在众人看来，她们不过是一对奇异的小人儿，一对互相缠绕的苍白天使。利迪娅把嘴贴在姐姐的喉咙上，感受着在她白得透明的皮肤下快速跳动的动脉。当她用舌头找到姐姐脖子上的小钻孔时，动脉在舌尖抽动了一下。她也感觉到了尼娅的舌头在她喉间湿润的触感，那舌头像小老鼠寻求慰藉一样紧贴着她的皮肤。</p><span id="more"></span><p>利迪娅镇静下来，等待着人们的注意，她丝毫不着急，全神贯注在演出上。她感觉到尼娅深深地吸了一口气，感觉到她的肺叶在她胸腔脆弱的骨架里膨胀着。利迪娅自己也吸了一口气。她们开始演奏，首先是她自己的音符，从皮肉里敞开的按键中倾泻而出，然后尼娅的音符也响了起来。那空旷的声音在呼吸间萦绕回响，穿透了她们的身体。</p><p>随着忧伤的曲调逐渐淡去，利迪娅把头转到另一个方向，她吸入空气，一边和尼娅的动作保持镜像般的一致，一边又把嘴唇贴在了姐姐的皮肤上。这一次，利迪娅亲吻了姐姐的手，尼娅的嘴则在利迪娅锁骨精致的凹陷里探索着。尼娅吐息，气体从她的肺里钻入了利迪娅的骨头里，发出饱含深情的泠响，仿佛姐姐温热的气息在妹妹体内活了过来。</p><p>舞台周围的宾客霎时间静了下来，寂静像投入水池的石子所激起的涟漪一般传播着，从中心飞快地扩散开来，拍打着房间最边缘的角落。所有的眼神都聚焦在了舞台中央苍白的女孩们身上。利迪娅能感觉到他们的眼神：饥饿，渴望，施加在她身上的目光近乎肉欲。她把手伸进姐姐的裙子里，紧紧扣住她的腰肢。她姐姐的手触摸着她的臀部，按住了她身上的音孔。随着她们的相拥，人群里发出一阵向往的叹息，那是他们自己的欲望低声奏出的乐音。</p><p>利迪娅用双手摸索着姐姐身上的按键，她再次用舌尖触碰着尼娅的喉部，她的指尖在尼娅脊柱的椎骨之间游走，找到了藏在她身体里的单簧管，随后利迪娅轻推按键，将暖暖的空气吹进了姐姐的喉咙里，同时她也感到尼娅在吹气。尼娅的声音阴郁而惆怅，她自己的音色则更加明快，高亢，她们奏出复调，款款地演绎着禁忌的碰触。</p><p>她们站立着互相环抱，曲调浑然天成，随着她们在对方身体上的轻抚，音符也魅惑地交织缠绕着。突然间，尼娅猛地扯下了利迪娅的裙子，利迪娅也用手把尼娅的裙子给撕掉了。这对苍白的音乐精灵就这样赤身裸体地站在那里。现在她们的音乐不用再被衣物阻隔了，当更清亮的音符再次涌出的时候，舞台周围的宾客几乎喘不过气来。女孩们身上植入的乐器被看得清清楚楚：脊柱上钴蓝色的钻孔，遍布全身骨架的黄铜音孔和象牙按键闪烁着光芒——她们身体里的这些音键装置可以组合成上百种乐器。</p><p>尼娅的双唇攀上了利迪娅的手臂。利迪娅的音符就像散落的水珠一般明快，从尼娅的音孔中溢出的则是对欲望与罪恶的哀叹。她们的拥抱变得更加狂热，演变成了一支欲念之舞。看客们被年轻的肉体与音乐纠缠的场景撩拨着，凑得越来越近了。</p><p>利迪娅隐约看见人们在她周围瞪大眼睛，脸颊发红。味蕾刺激素和她们的表演都在客人们身上起了作用。她能感觉到室内的温度正在上升。她和尼娅缓缓地躺倒在地，她们的拥抱变得更色情也更繁复了，在她们肢体缠绕的同时，音乐冲突中的性张力也加剧了。精心的编排和多年的训练造就了这一刻极度协调的肉体交叠。</p><p>我们做的是色情表演，利迪娅心想。为了贝拉芮的利益而做的色情表演。她瞥见了她的资助人，后者脸上泛着愉悦的光亮，身旁站着目瞪口呆的弗农·韦尔。是啊，她想，看看我们，韦尔老爷，看看我们的表演有多色情。然后轮到她来演奏她姐姐，她用舌头和双手抚弄着尼娅身上的按键。</p><p>这支是诱惑与默许之舞。她们也有其他的舞蹈，独奏和二重奏，有一些高雅的，其他的都很下流，但作为她们的首秀，贝拉芮选了这一支。音乐中的力量逐渐增强，变得激烈而高潮迭起，直到最后她和尼娅躺在地板上，体力耗尽，浑身汗水，赤裸的双生女在以音乐营造的淫乱之中纠缠往复。她们用身体演奏的音乐至此戛然而止。</p><p>周围没有人有任何动静。她们保持着刚才的姿势，利迪娅尝到了姐姐皮肤上的咸味。灯光暗了下来，示意着演出的结束。</p><p>利迪娅不断地微笑和鞠躬，贝拉芮则不断地挡开人们伸过来表示祝贺的手，保护着她娇弱的投资对象。利迪娅按照她受过的训练应酬着，但她手里躺着一只沾满汗水的小瓶子，一颗力量与命运的珍宝。司提芬是对的。小人物能控制的只是他们自己生命的终结，有时候甚至连这也做不到。利迪娅看着客人们一片片地吃着司提芬，品评着他的甜味。有时候，连死后的事情也控制不了。</p><p>她转身离开了那群仰慕者，从点心桌上成堆的水果中间拿了一颗草莓。她用它蘸了一下奶油，又在糖里滚了一圈，品尝着融为一体的滋味。她又选了一颗草莓，鲜红而柔软，拿在她纤细而精致的指间，她将通过这枚甜蜜介质，为自己赢得苦涩的自由。</p><p>她用拇指砰地顶开了小瓶子的软木塞，将琥珀色的珍宝洒在了多汁的草莓上。她在想会不会痛，会不会来得很快。这些都不重要了，很快她就会获得自由。她会尖叫一声然后倒在地板上，客人们会后退一步，为贝拉芮顷刻间的损失大感震惊。贝拉芮会受到羞辱，更重要的是，她会失去长笛双生女这一附加价值。弗农·韦尔又会对她上下其手了。</p><p>利迪娅望着那颗染了毒的草莓。是甜的，她想。死亡应该是甜蜜的。她看见贝拉芮正注视着她，朝她怜爱地微笑着，毫无疑问她非常乐意看到又有一个人和她一样嗜甜如命。利迪娅暗自好笑，她很高兴贝拉芮能看到她反叛的一刻。她将草莓举到唇边。</p><p>忽然间，一个新的灵感在她耳畔低语。</p><p>在离死亡还有一英尺远的时候，利迪娅停住了，她转身将草莓伸向了她的资助人。</p><p>她献上草莓表示敬意，带着一个完全服从的尤物所应有的谦卑。她俯首奉上她托在苍白掌心里的草莓，使出浑身解数，扮演着迫切希望取悦主子的忠仆。她屏住呼吸，周围的一切在她看来已是无物。宾客和他们的交谈都已消失无踪。一切归于寂静。</p>]]></content>
    
    
    
    <tags>
      
      <tag>小记</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql高效批量插入数据</title>
    <link href="/mysql%E9%AB%98%E6%95%88%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    <url>/mysql%E9%AB%98%E6%95%88%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> goods(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><span id="more"></span><h4 id="实现层次一：使用Statement"><a href="#实现层次一：使用Statement" class="headerlink" title="实现层次一：使用Statement"></a>实现层次一：使用Statement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="hljs-string">&quot;)&quot;</span>;<br>st.executeUpdate(sql);<br>&#125;<br></code></pre></td></tr></table></figure><!-- more --><h4 id="实现层次二：使用PreparedStatement"><a href="#实现层次二：使用PreparedStatement" class="headerlink" title="实现层次二：使用PreparedStatement"></a>实现层次二：使用PreparedStatement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;<br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<br>ps.executeUpdate();<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//82340</span><br><br><br>JDBCUtils.closeResource(conn, ps);<br></code></pre></td></tr></table></figure><h4 id="实现层次三"><a href="#实现层次三" class="headerlink" title="实现层次三"></a>实现层次三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span><br><span class="hljs-comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span><br><span class="hljs-comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span><br><span class="hljs-comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">1000000</span>;i++)&#123;<br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<br><br><span class="hljs-comment">//1.“攒”sql</span><br>ps.addBatch();<br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//2.执行</span><br>ps.executeBatch();<br><span class="hljs-comment">//3.清空</span><br>ps.clearBatch();<br>&#125;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//20000条：625                                                                         //1000000条:14733  </span><br><br>JDBCUtils.closeResource(conn, ps);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现层次四"><a href="#实现层次四" class="headerlink" title="实现层次四"></a>实现层次四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 层次四：在层次三的基础上操作</span><br><span class="hljs-comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-comment">//1.设置为不自动提交数据</span><br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">1000000</span>;i++)&#123;<br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<br><br><span class="hljs-comment">//1.“攒”sql</span><br>ps.addBatch();<br><br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//2.执行</span><br>ps.executeBatch();<br><span class="hljs-comment">//3.清空</span><br>ps.clearBatch();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//2.提交数据</span><br>conn.commit();<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//1000000条:4978 </span><br><br>JDBCUtils.closeResource(conn, ps);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java File类</title>
    <link href="/java%20File%E7%B1%BB/"/>
    <url>/java%20File%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="file-类"><a href="#file-类" class="headerlink" title="file 类"></a>file 类</h3><p>![](java File类&#x2F;1648477074671.png)</p><ul><li>静态方法</li></ul><p>![](java File类&#x2F;1648477093771.png)</p><span id="more"></span><ul><li>构造方法</li></ul><p>![](java File类&#x2F;1648477110795.png)</p><ul><li>方法</li></ul><p>![](java File类&#x2F;1648477118325.png)</p><h4 id="文件和文件夹的创建删除等"><a href="#文件和文件夹的创建删除等" class="headerlink" title="文件和文件夹的创建删除等"></a>文件和文件夹的创建删除等</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileMethodDemo2 &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// 对文件或者文件加进行操作。</span><br><span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;e:\\file.txt&quot;</span>);<br><span class="hljs-comment">// 创建文件，如果文件不存在，创建 true 如果文件存在，则不创建 false。 如果路径错误，IOException。</span><br><span class="hljs-keyword">boolean</span> b1 = <span class="hljs-keyword">file</span>.createNewFile();<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;b1=&quot;</span> + b1);<br><span class="hljs-comment">//-----------删除文件操作-------注意：不去回收站。慎用------</span><br> <span class="hljs-keyword">boolean</span> b2 = <span class="hljs-keyword">file</span>.<span class="hljs-keyword">delete</span>();<br> System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;b2=&quot;</span>+b2);<br><br><span class="hljs-comment">//-----------需要判断文件是否存在------------</span><br> <span class="hljs-keyword">boolean</span> b3 = <span class="hljs-keyword">file</span>.exists();<br> System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;b3=&quot;</span>+b3);<br><br><span class="hljs-comment">//-----------对目录操作 创建，删除，判断------------</span><br><span class="hljs-keyword">File</span> dir = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;e:\\abc&quot;</span>);<br><span class="hljs-comment">//mkdir()创建单个目录。//dir.mkdirs();创建多级目录</span><br><span class="hljs-keyword">boolean</span> b4 = dir.mkdir();<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;b4=&quot;</span>+b4);<br><span class="hljs-comment">//删除目录时，如果目录中有内容，无法直接删除。</span><br><span class="hljs-keyword">boolean</span> b5 = dir.<span class="hljs-keyword">delete</span>();<br><span class="hljs-comment">//只有将目录中的内容都删除后，保证该目录为空。这时这个目录才可以删除。</span><br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;b5=&quot;</span> + b5);<br><br><span class="hljs-comment">//-----------判断文件，目录------------</span><br><span class="hljs-keyword">File</span> f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;e:\\javahaha&quot;</span>);<span class="hljs-comment">// 要判断是否是文件还是目录，必须先判断存在。</span><br><span class="hljs-comment">// f.mkdir();//f.createNewFile();</span><br>System.out.<span class="hljs-keyword">println</span>(f.isFile());<br>System.out.<span class="hljs-keyword">println</span>(f.isDirectory());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h4><ul><li>测试类</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileDemo2 &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br><span class="hljs-comment">//获取扩展名为.java所有文件</span><br><span class="hljs-comment">//创建File对象</span><br><span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;E:\\code\\day11_code&quot;</span>);<br><span class="hljs-comment">//获取指定扩展名的文件,由于要对所有文件进行扩展名筛选，因此调用方法需要传递过滤器</span><br><span class="hljs-keyword">File</span>[] files = <span class="hljs-keyword">file</span>.listFiles(<span class="hljs-keyword">new</span> MyFileFilter());<br><span class="hljs-comment">//遍历获取到的所有符合条件的文件</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">File</span> f : files) &#123;<br>System.out.<span class="hljs-keyword">println</span>(f);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>自定类继承FilenameFilter过滤器接口</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//定义类实现文件名称FilenameFilter过滤器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFileFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FilenameFilter</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">File dir, <span class="hljs-built_in">String</span> name</span>) &#123;<br><span class="hljs-keyword">return</span> name.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;.java&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux概要命令</title>
    <link href="/linux%E6%A6%82%E8%A6%81%E5%91%BD%E4%BB%A4/"/>
    <url>/linux%E6%A6%82%E8%A6%81%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>shutdown –h now 立该进行关机</li><li>shudown -h 1 “hello, 1 分钟后会关机了”</li><li>shutdown –r now 现在重新启动计算机</li><li>halt 关机，作用和上面一样.</li><li>reboot 现在重新启动计算机</li><li>sync 把内存的数据同步到磁盘.</li></ol><span id="more"></span><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ol><li>不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中</li><li>目前的 shutdown&#x2F;reboot&#x2F;halt 等命令均已经在关机前进行了 sync</li></ol><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><ol><li>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.</li><li>在提示符下输入 logout 即可注销用户<br>使用细节</li><li>logout 注销指令在图形运行级别无效，在运行级别 3 下有效.</li></ol><h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3><table><thead><tr><th>指令</th><th>概要</th></tr></thead><tbody><tr><td>useradd 用户名</td><td>添加用户 ，当创建用户成功后，会自动的创建和用户同名的家目录，也可以通过 useradd -d 指定目录 新的用户名，给新创建的用户指定家目录</td></tr><tr><td>passwd 用户名</td><td>给 milan 指定密码passwd milan补充，显示当前用户所在的目录 pwd</td></tr><tr><td>userdel 用户名</td><td>删除用户 ：删除用户 milan，但是要保留家目录, userdel milan 删除用户以及用户主目录, 比如 tom, userdel -r tom</td></tr><tr><td>id 用户名</td><td>查询 root 信息 id root</td></tr><tr><td>whoami&#x2F; who am I</td><td>查看当前用户&#x2F;登录用户</td></tr><tr><td>groupadd 组名</td><td>新增组</td></tr><tr><td>groupdel 组名</td><td>删除组</td></tr><tr><td>useradd –g 用户组 用户名</td><td>增加用户时直接加上组</td></tr><tr><td>usermod –g 组 用户组 用户名</td><td>修改用户的组</td></tr><tr><td>man [命令或配置文件]</td><td>查看 ls 命令的帮助信息 man ls</td></tr><tr><td>help 命令</td><td>获得 shell 内置命令的帮助信息</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vi 和 vim 快捷键</title>
    <link href="/vi%20%E5%92%8C%20vim%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/vi%20%E5%92%8C%20vim%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>Linux 系统会内置 vi 文本编辑器<br>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。<br>  代码补完、编译及错误跳转等方便编程的功能特别丰富</p><span id="more"></span><ol><li>正常模式<br> 以 vim 打开一个档案就直接进入一般模式了(这是 默认的模式)。在这个模式中， 你可以使用『上下左右』按键来 移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数<br>  据。</li><li>插入模式<br>按下 i, I, o, O, a,A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可.</li><li>命令行模式<br>输入 esc 再输入：在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显示行号等的动作则是在此模式中达成的！</li></ol><p>###各种模式的相互切换<br>![](vi 和 vim 快捷键&#x2F;1648354451894.png)</p><h3 id="vi-和-vim-快捷键"><a href="#vi-和-vim-快捷键" class="headerlink" title="vi 和 vim 快捷键"></a>vi 和 vim 快捷键</h3><ol><li>拷贝当前行 yy , 拷贝当前行向下的 5 行 5yy，并粘贴（输入 p）。</li><li>删除当前行 dd , 删除当前行向下的 5 行 5dd</li><li>在文件中查找某个单词 [命令行下 &#x2F;关键字 ， 回车 查找 , 输入 n 就是查找下一个 ]</li><li>设置文件的行号，取消文件的行号.[命令行下 : set nu 和 :set nonu]</li><li>编辑 &#x2F;etc&#x2F;profile 文件，在一般模式下, 使用快捷键到该文档的最末行[G]和最首行[gg]</li><li>在一个文件中输入 “hello” ,在一般模式下, 然后又撤销这个动作 u</li><li>编辑 &#x2F;etc&#x2F;profile 文件，在一般模式下, 并将光标移动到 , 输入 20,再输入 shift+g</li><li>快捷键的键盘对应图![](vi 和 vim 快捷键&#x2F;1648354618907.png)</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux目录结构</title>
    <link href="/linux-mu-lu-jie-gou/"/>
    <url>/linux-mu-lu-jie-gou/</url>
    
    <content type="html"><![CDATA[<h4 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h4><ol><li>&#x2F;bin [常用] (&#x2F;usr&#x2F;bin 、 &#x2F;usr&#x2F;local&#x2F;bin)<br>是 Binary 的缩写, 这个目录存放着最经常使用的命令</li><li>&#x2F;sbin (&#x2F;usr&#x2F;sbin 、 &#x2F;usr&#x2F;local&#x2F;sbin)<br>s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;home [常用]<br>存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</li></ol><span id="more"></span><ol start="4"><li>&#x2F;root [常用]该目录为系统管理员，也称作超级权限者的用户主目录</li><li>&#x2F;lib 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</li><li>&#x2F;lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li><li>&#x2F;etc [常用]<br>所有的系统管理所需要的配置文件和子目录, 比如安装 mysql 数据库 my.conf</li><li>&#x2F;usr [常用]<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录。</li><li>&#x2F;boot [常用] 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</li><li>&#x2F;proc [不能动] 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</li><li>&#x2F;srv [不能动] service 缩写，该目录存放一些服务启动之后需要提取的数据</li><li>&#x2F;sys [不能动]这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs &#x3D;》【别动】</li><li>&#x2F;tmp 这个目录是用来存放一些临时文件的</li><li>&#x2F;dev<br>类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</li><li>&#x2F;media [常用] linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</li><li>&#x2F;mnt [常用]<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里的内容了</li><li>&#x2F;opt 这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</li><li>&#x2F;usr&#x2F;local [常用]<br>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</li><li>&#x2F;var [常用]<br>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</li><li>&#x2F;selinux [security-enhanced linux]<br>SELinux 是一种安全子系统,它能控制程序只能访问特定文件, 有三种工作模式，可以自行设置.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的Bundle_RPM包安装</title>
    <link href="/MySQL%E7%9A%84Bundle_RPM%E5%8C%85%E5%AE%89%E8%A3%85/"/>
    <url>/MySQL%E7%9A%84Bundle_RPM%E5%8C%85%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Linux-系统安装MySQL"><a href="#1-Linux-系统安装MySQL" class="headerlink" title="1. Linux 系统安装MySQL"></a>1. Linux 系统安装MySQL</h3><h4 id="1-1-下载Linux-安装包"><a href="#1-1-下载Linux-安装包" class="headerlink" title="1.1 下载Linux 安装包"></a>1.1 下载Linux 安装包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/downloads/my</span>sql/<span class="hljs-number">5.7</span>.html<span class="hljs-comment">#downloads</span><br></code></pre></td></tr></table></figure><h4 id="1-2-安装MySQL"><a href="#1-2-安装MySQL" class="headerlink" title="1.2 安装MySQL"></a>1.2 安装MySQL</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>). 卸载 centos 中预安装的 mysql<br><br><span class="hljs-attribute">rpm</span> -qa | grep -i mysql<br><br><span class="hljs-attribute">rpm</span> -e mysql-libs-<span class="hljs-number">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">71</span>-<span class="hljs-number">1</span>.el6.x86_64 --nodeps或<br>   <span class="hljs-attribute">rpm</span> -e mysql-community-&#123;server,client,common,libs&#125; --nodeps  卸载多个相关软件<br>   <br><span class="hljs-section">&lt;!-- more --&gt;</span><br><br><br><span class="hljs-attribute">2</span>). 上传 mysql 的安装包<br><br><span class="hljs-attribute">alt</span> + p -------&gt; put  E:/test/MySQL-<span class="hljs-number">5</span>.<span class="hljs-number">6</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.el6.i686.rpm-bundle.tar<br><br><span class="hljs-attribute">3</span>). 解压 mysql安装包到/root/mysql目录<br><br><span class="hljs-attribute">mkdir</span> mysql<br><br><span class="hljs-attribute">tar</span> -xvf MySQL-<span class="hljs-number">5</span>.<span class="hljs-number">6</span>.<span class="hljs-number">22</span>-<span class="hljs-number">1</span>.el6.i686.rpm-bundle.tar -C /root/mysql<br><br><span class="hljs-attribute">4</span>). 安装相关tar文件<br><br><span class="hljs-attribute">rpm</span> -ivh mysql-community-&#123;server,client,common,libs&#125;-*<br><br></code></pre></td></tr></table></figure><h4 id="1-3-启动-MySQL-服务"><a href="#1-3-启动-MySQL-服务" class="headerlink" title="1.3 启动 MySQL 服务"></a>1.3 启动 MySQL 服务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">service mysqld <span class="hljs-keyword">start</span><br><br>service mysqld stop<br><br>service mysqld status<br><br>service mysqld restart<br></code></pre></td></tr></table></figure><h4 id="1-4-登录MySQL"><a href="#1-4-登录MySQL" class="headerlink" title="1.4 登录MySQL"></a>1.4 登录MySQL</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret<br><br>mysql -u root -p <br><br>登录之后, 修改密码 :<br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> = <span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;itcast&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-MySQL软件结构"><a href="#2-MySQL软件结构" class="headerlink" title="2. MySQL软件结构"></a>2. MySQL软件结构</h3><table><thead><tr><th>文件或目录</th><th>概要</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;bin</td><td>客户端程序和脚本</td></tr><tr><td>&#x2F;usr&#x2F;sbin mysqld</td><td>程序（服务）</td></tr><tr><td>&#x2F;etc&#x2F;my.cnf</td><td>配置文件，又称选项文件</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;mysql</td><td>数据目录，用于存放数据库的相关文件，如表空间文件等</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;mysqld.log</td><td>错误日志，记录 MySQL 的启停信息及数据库错误和告警信息</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;mysql-files secure_file_priv</td><td>指定位置，MySQL 的转储与加载路径</td></tr><tr><td>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service</td><td>mysql 服务启动脚本，Systemd 服务</td></tr><tr><td>&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</td><td>Pid 文件，用于记录 MySQL 的主进程 id 号</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</td><td>套接字文件，可用于以本地认证的方式登录</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;mysql-keyring</td><td>Key 文件的存放目录，MySQL 服务读取本地 key 解密表数据</td></tr><tr><td>&#x2F;usr&#x2F;share&#x2F;man</td><td>Unix 手册页文件</td></tr><tr><td>&#x2F;usr&#x2F;include&#x2F;mysql</td><td>开发（头）文件</td></tr><tr><td>&#x2F;usr&#x2F;lib64&#x2F;mysql</td><td>库链接文件</td></tr><tr><td>&#x2F;usr&#x2F;share&#x2F;mysql</td><td>其他支持文件，如错误消息和字符集文件等</td></tr></tbody></table><p>###3. RPM包概要</p><table><thead><tr><th>RPM包名称</th><th>概要</th></tr></thead><tbody><tr><td>mysql-community-server</td><td>数据库服务器和相关工具</td></tr><tr><td>mysql-community-client</td><td>MySQL 客户端应用程序和工具</td></tr><tr><td>mysql-community-common</td><td>服务器和客户端通用的库文件</td></tr><tr><td>mysql-community-devel</td><td>MySQL 数据库客户端应用程序开发的头文件和库文件</td></tr><tr><td>mysql-community-libs</td><td>用于 MySQL 数据库客户端应用程序的共享库</td></tr><tr><td>mysql-community-libs-compat</td><td>对于之前 MySQL 安装的共享兼容性库</td></tr><tr><td>mysql-community-embedded</td><td>MySQL 嵌入式库</td></tr><tr><td>mysql-community-embedded-devel</td><td>嵌入式的 MySQL 开发头文件和库文件</td></tr><tr><td>mysql-community-test</td><td>MySQL 服务器的测试套件</td></tr></tbody></table><h3 id="4-一些错误信息"><a href="#4-一些错误信息" class="headerlink" title="4.一些错误信息"></a>4.一些错误信息</h3><p><code>service mysqld start</code> 启动无反应，<code>vim /var/log/mysqld.log</code> 查看mysql日志有错误显示<code>Can&#39;t open the mysql.plugin table. Please run mysql_upgrade to create it</code></p><p><strong>Mysql初始化</strong>出了问题。执行以下命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rm -rf <span class="hljs-string">/var/lib/mysql/</span>*<br>mysqld <span class="hljs-params">--initialize</span> <span class="hljs-params">--user=mysql</span> <span class="hljs-params">--datadir=/var/lib/mysql</span><br> <br>systemctl restart mysqld<br>systemctl status mysqld<br></code></pre></td></tr></table></figure><p>MySQL第一次启动后会创建超级管理员账号root@localhost，<strong>初始密码</strong>存储在日志文件中,<code>ls -al</code>查看文件并没有生成<code>.mysql_secret</code>文件，运行<code>service mysqld status</code>显示mysql确实已经启动。<code>mysql -u root -p</code>发现不知到密码，只有按忘记密码思路解决。</p><ol><li><p>vim &#x2F;etc&#x2F;my.cnf</p><p> 在[mysqld]下加入   <code>skip-grant-tables </code>  (这个意思是跳过权限验证，可免密码登录 ）然后保存退出，重启mysql </p></li><li><p>service mysqld restart  登录</p></li><li><p>mysql -u root -p</p><pre><code class="hljs"> 5.7版本前的mysql运行： update user set password=password(&quot;你的密码&quot;) where user=&quot;用户&quot;;  5.7版本后的mysql运行：update mysql.user set authentication_string=password(&#39;你的密码&#39;) where user=&#39;用户&#39;;  </code></pre></li><li><p>exit; #退出 </p></li><li><p>编辑my.cnf文件删掉或者注释skip-grant-tables 这一行，然后重启MySQL</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>民族自豪感</title>
    <link href="/%E6%B0%91%E6%97%8F%E8%87%AA%E8%B1%AA%E6%84%9F/"/>
    <url>/%E6%B0%91%E6%97%8F%E8%87%AA%E8%B1%AA%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>最廉价的骄傲就是民族的自豪感。沾染上民族自豪感的人暴露出这一事实：这个人缺乏个人的、他能够引以为豪的素质。如果情况不是这样，他也就不至于抓住那些他和无数百万人所共有的东西为荣了。拥有突出个人素质的人会更加清晰地看到自己民族的缺点，因为这些缺点时刻就在自己的眼前，</p><span id="more"></span><p>但每一个可怜巴巴的笨蛋，在这世上没有一样自己能为之感到骄傲的东西，那他就只能出此最后一招：为自己所属的民族而骄傲了。由此他获得了补偿。所以，他充满着感激之情，准备不惜以“牙齿和指甲”去捍卫自己民族所特有的一切缺点和愚蠢<br>———《人生的智慧》</p>]]></content>
    
    
    
    <tags>
      
      <tag>小记</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QPST刷基带</title>
    <link href="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/"/>
    <url>/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/</url>
    
    <content type="html"><![CDATA[<p>昨天刷机后发现，双卡没有信号，查看系统基带版本显示未知，小米服务一直弹啥没有id什么的。</p><p>尝试了很多方法，先记录一下过程</p><ol><li>线刷官方最新稳定版   失败（解锁好像需要读卡绑定账号，我尝试直接解锁成功了，很是迷惑）</li><li>用搞机助手直接刷基带文件qcn，失败（还让WiFi也打不开了，收不到任何信号）<br><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647259402288.png"></li><li>下载当前系统ROM包，然后解包得到 NON-HLOS.bin 文件然后rec选择刷入Image镜像，刷进f开头的分区  失败（又把我坏掉的WiFi就活了，但是双卡还是没有信号）</li><li>打开usb调试，手机开机进adb 依次输入： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!-- more --&gt;</span><br><br>adb shell   <br>setprop sys.usb.config diag,adb<br></code></pre></td></tr></table></figure> 下载<a href="https://onfix.cn/course/220">QPST 版本汇总</a> ,<a href="https://wwa.lanzouw.com/iL6ny01gpz6j">QPST蓝奏 </a>，安装<a href="https://wwa.lanzouw.com/igxQ201gpyeb">QPST驱动</a>。下载<a href="https://wwa.lanzouw.com/iTJiw01gqokd">群主的9se基带备份sqn</a>，<a href="https://xiaomitools.com/%E6%89%80%E6%9C%89%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BAqcn%E5%A4%87%E4%BB%BD/#">小米手机qnc备份</a></li></ol><p><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647261560087-166824250195018.png"><br><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647261567949.png"><br><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647261798615.png"><br><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647261812983.png"><br><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647261826780.png"><br><img src="/QPST%E5%88%B7%E5%9F%BA%E5%B8%A6/1647261941817.png"></p><p>舒服，折腾了我一天，我还是情愿多花一点钱来剩下我这时间</p>]]></content>
    
    
    
    <tags>
      
      <tag>搞机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneShort</title>
    <link href="/OneShort/"/>
    <url>/OneShort/</url>
    
    <content type="html"><![CDATA[<p>你的任务是指导一个小孩穿过神秘的世界，去完成复活死去已久的太阳的使命。<br>……当然，事情永远不会那么简单。</p><p>这个世界知道你的存在。</p><p>后果是真实存在的。</p><p>拯救世界或许不可行。</p><p>你只有一次机会<br><img src="/OneShort/1646660812547.png"></p><span id="more"></span><p>&emsp;&emsp;游戏第一次电脑弹出对话框显示的我的真名确实搞得我悚然一惊，直叹真是不可思议。不过理智一想，大概是游戏读取了我的win10用户登录名的缘故吧。<br>游戏后期确实我一直想的就是拯救这个世界，对于个我与大我的区分这回确实照出了我的本性，因为这真的只有一次机会！很多时候我对于网上出现的电车难题都是选的人少那一边牺牲，不知道我这是不是一种冷血。道德告诉我生命是不能简单比较的，但是很多时候我都喜欢利益最大化，在种族存亡上我会毫不犹豫的偏向牺牲个人。</p><p><img src="/OneShort/1646661236992.png"><br>&emsp;&emsp;电脑一步一步敲击我的心房劝我放弃，上一副图我想了很久，NIKO确实陪伴我走了很多地方，我还叫他骑上很蠢的的扫地机器人，哈哈甚至还想让他骑着出门到处跑O(∩_∩)O，还好设计师拒绝了。我还一次一次的让他摸那个发光的电源，最后电的他说再也不信我了。不谈这些。那个衰败的世界给我印象最深的就是，在一个被水分割成一个一个小岛的地图里，那个疯狂转圈捕蝴蝶给妈妈的女孩了。她好爱她的妈妈呀，这一丝情感共鸣让我不由自主的想多了解这个世界。还有我得到先祖羽毛那一家姐妹也挺令我印象深刻。可能是我把妹妹从陷阱带出来她寸步不离的跟我到地面上的原因？？还是她们热情好客带我去她家参观，不放心我独自去小院给我护驾？？还有那些一杯一杯咖啡提神研究摆脱困局的科学家们，这些都给我感受到还有很多人在这个不幸的世界挣扎救助，反抗。唉，你说我怎么狠得下心去把这个世界毁掉？<br><img src="/OneShort/1646662307492.png"><br><img src="/OneShort/1646662327610.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v2rayNG wifi正常翻墙用流量报context deadline exceeded错误</title>
    <link href="/v2rayNG%20wifi%E6%AD%A3%E5%B8%B8%E7%BF%BB%E5%A2%99%E7%94%A8%E6%B5%81%E9%87%8F%E6%8A%A5context%20deadline%20exceeded%E9%94%99%E8%AF%AF/"/>
    <url>/v2rayNG%20wifi%E6%AD%A3%E5%B8%B8%E7%BF%BB%E5%A2%99%E7%94%A8%E6%B5%81%E9%87%8F%E6%8A%A5context%20deadline%20exceeded%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;刷了原生系统第一天，这个问题困扰了很久，测试了很多节点都如此。摸摸索索原来是手机APN设置有问题，随便试了一个APN就成功了.</p><p>&emsp;&emsp;</p><span id="more"></span><p>![](v2rayNG wifi正常翻墙用流量报context deadline exceeded错误&#x2F;1644819735573.jpg)</p><p>![](v2rayNG wifi正常翻墙用流量报context deadline exceeded错误&#x2F;1644819749233.jpg)</p>]]></content>
    
    
    
    <tags>
      
      <tag>搞机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>request的post</title>
    <link href="/request%E7%9A%84post/"/>
    <url>/request%E7%9A%84post/</url>
    
    <content type="html"><![CDATA[<p>requests.post()  方法的使用：</p><p>post方法简单使用</p><p>　　1、带数据的post</p><p>　　2、带header的post</p><p>　　3、带json的post</p><p>　　4、带参数的post</p><p>　　5、普通文件上传</p><p>　　6、定制化文件上传</p><span id="more"></span><p>1、常用返回信息：</p><p><img src="/request%E7%9A%84post/1639545029065.png"></p><p>二、post方法简单使用：</p><p> 1、带数据的post：<br> <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><br><span class="hljs-meta"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br> <br><span class="hljs-title">host</span> = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br><span class="hljs-title">endpoint</span> = <span class="hljs-string">&quot;post&quot;</span><br><span class="hljs-title">url</span> = &#x27;&#x27;.join([host,endpoint])<br><span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&#x27;<span class="hljs-title">key1&#x27;</span>:&#x27;<span class="hljs-title">value1&#x27;</span>,&#x27;<span class="hljs-title">key2&#x27;</span>:&#x27;<span class="hljs-title">value2&#x27;</span>&#125;</span><br> <br><span class="hljs-title">r</span> = requests.post(url,<span class="hljs-class"><span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>)</span><br><span class="hljs-meta">#response = r.json()</span><br><span class="hljs-title">print</span> (r.text)<br></code></pre></td></tr></table></figure><br> 输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;key2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Accept&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Accept-Encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gzip, deflate&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Connection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;close&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Content-Length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;23&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Content-Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;httpbin.org&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;User-Agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python-requests/2.18.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;183.14.133.88&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://httpbin.org/post&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2、带header的post：<br> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>import requests<br>import json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = &#x27;&#x27;.join([host,endpoint])<br>headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;test request headers&quot;</span>&#125;<br> <br><span class="hljs-comment"># r = requests.post(url)</span><br>r = requests.post(url,headers=headers)<br><span class="hljs-comment">#response = r.json()</span><br> <br></code></pre></td></tr></table></figure><br>输出：<br> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Accept&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Accept-Encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gzip, deflate&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Connection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;close&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Content-Length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;httpbin.org&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;User-Agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test request headers&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;183.14.133.88&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://httpbin.org/post&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>3、带json的post：<br> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>import requests<br>import json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = &#x27;&#x27;.join([host,endpoint])<br>data = &#123;<br>    <span class="hljs-string">&quot;sites&quot;</span>: [<br>                &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;test&quot;</span> , <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.test.com&quot;</span> &#125;,<br>                &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;google&quot;</span> , <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span> &#125;,<br>                &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;weibo&quot;</span> , <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.weibo.com&quot;</span> &#125;<br>    ]<br>&#125;<br> <br>r = requests.post(url,json=data)<br><span class="hljs-comment"># r = requests.post(url,data=json.dumps(data))</span><br>response = r.json()<br></code></pre></td></tr></table></figure></p><p>输出：<br> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs swift">&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>sites<span class="hljs-subst">\&quot;</span>: [&#123;<span class="hljs-subst">\&quot;</span>url<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>www.test.com<span class="hljs-subst">\&quot;</span>, <span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>test<span class="hljs-subst">\&quot;</span>&#125;, &#123;<span class="hljs-subst">\&quot;</span>url<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>www.google.com<span class="hljs-subst">\&quot;</span>, <span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>google<span class="hljs-subst">\&quot;</span>&#125;, &#123;<span class="hljs-subst">\&quot;</span>url<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>www.weibo.com<span class="hljs-subst">\&quot;</span>, <span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>weibo<span class="hljs-subst">\&quot;</span>&#125;]&#125;&quot;</span>, <br>  <span class="hljs-string">&quot;files&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;form&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>, <br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>, <br>    <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;140&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>, <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.org&quot;</span>, <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;python-requests/2.18.1&quot;</span><br>  &#125;, <br>  <span class="hljs-string">&quot;json&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;sites&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.test.com&quot;</span><br>      &#125;, <br>      &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;google&quot;</span>, <br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.google.com&quot;</span><br>      &#125;, <br>      &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;weibo&quot;</span>, <br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.weibo.com&quot;</span><br>      &#125;<br>    ]<br>  &#125;, <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;183.14.133.88&quot;</span>, <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://httpbin.org/post&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p> 4、带参数的post：<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><br><span class="hljs-meta"># -*- coding:utf-8 -*-</span><br>import requests<br>import json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>([host,endpoint])<br><span class="hljs-keyword">params</span> = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-string">&#x27;params1&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>:<span class="hljs-string">&#x27;params2&#x27;</span>&#125;<br> <br><span class="hljs-meta"># r = requests.post(url)</span><br>r = requests.post(url,<span class="hljs-keyword">params</span>=<span class="hljs-keyword">params</span>)<br><span class="hljs-meta">#response = r.json()</span><br>print (r.text)<br></code></pre></td></tr></table></figure><br>  输出：<br> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;params1&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;key2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;params2&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;form&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Accept&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*/*&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Accept-Encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gzip, deflate&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Connection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;close&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Content-Length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;httpbin.org&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;User-Agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python-requests/2.18.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;183.14.133.88&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://httpbin.org/post?key2=params2&amp;key1=params1&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><p>5、普通文件上传：<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vim"># -*- codin<span class="hljs-variable">g:utf</span>-<span class="hljs-number">8</span> -*-<br>import requests<br>import json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>([host,endpoint])<br>#普通上传<br><span class="hljs-keyword">files</span> = &#123;<br>            <span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>        &#125;<br> <br>r = requests.post(url,<span class="hljs-keyword">files</span>=<span class="hljs-keyword">files</span>)<br><span class="hljs-keyword">print</span> (r.text)<br></code></pre></td></tr></table></figure><br>  输出：<br> <figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <br>  <span class="hljs-string">&quot;files&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;hello world!<span class="hljs-char escape_">\n</span>&quot;</span><br>  &#125;, <br>  <span class="hljs-string">&quot;form&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>, <br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>, <br>    <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;157&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data; boundary=392865f79bf6431f8a53c9d56c62571e&quot;</span>, <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.org&quot;</span>, <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;python-requests/2.18.1&quot;</span><br>  &#125;, <br>  <span class="hljs-string">&quot;json&quot;</span>: <span class="hljs-literal">null</span>, <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;183.14.133.88&quot;</span>, <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://httpbin.org/post&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>6、定制化文件上传：<br> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim"># -*- codin<span class="hljs-variable">g:utf</span>-<span class="hljs-number">8</span> -*-<br>import requests<br>import json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>([host,endpoint])<br>#自定义文件名，文件类型、请求头<br><span class="hljs-keyword">files</span> = &#123;<br>        <span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;test.png&#x27;</span>,<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;test.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>),<span class="hljs-string">&#x27;image/png&#x27;</span>)<br>&#125;<br> <br>r = requests.post(url,<span class="hljs-keyword">files</span>=<span class="hljs-keyword">files</span>)<br><span class="hljs-keyword">print</span> (r.text)heman793<br> <br></code></pre></td></tr></table></figure><br>输出比较多，就不帖了。</p><p>7、多文件上传：<br> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br>import requests<br>import json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = <span class="hljs-string">&#x27;&#x27;</span>.join([host,endpoint])<br><span class="hljs-comment">#多文件上传</span><br><span class="hljs-built_in">files</span> = [<br>    (<span class="hljs-string">&#x27;file1&#x27;</span>,(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>))),<br>    (<span class="hljs-string">&#x27;file2&#x27;</span>, (<span class="hljs-string">&#x27;test.png&#x27;</span>, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)))<br>    ]<br> <br>r = requests.<span class="hljs-built_in">post</span>(url,<span class="hljs-built_in">files</span>=<span class="hljs-built_in">files</span>)<br>print (r.<span class="hljs-keyword">text</span>)<br></code></pre></td></tr></table></figure></p><p>输出上，太多内容，不帖了。</p><p>8、流式上传：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br> <br>host = <span class="hljs-string">&quot;http://httpbin.org/&quot;</span><br>endpoint = <span class="hljs-string">&quot;post&quot;</span><br> <br>url = <span class="hljs-string">&#x27;&#x27;</span>.join([host,endpoint])<br> <br><span class="hljs-comment">#流式上传</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>( <span class="hljs-string">&#x27;test.txt&#x27;</span> ) <span class="hljs-keyword">as</span> f:<br>    r = requests.post(url,data = f)<br> <br><span class="hljs-built_in">print</span> (r.text)<br></code></pre></td></tr></table></figure><br>  输出：</p><pre><code class="hljs">&#39;&#39;&#39;&#123; &quot;args&quot;: &#123;&#125;,  &quot;data&quot;: &quot;hello world!\n&quot;,  &quot;files&quot;: &#123;&#125;,  &quot;form&quot;: &#123;&#125;,  &quot;headers&quot;: &#123;   &quot;Accept&quot;: &quot;*/*&quot;,    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,    &quot;Connection&quot;: &quot;close&quot;,    &quot;Content-Length&quot;: &quot;13&quot;,    &quot;Host&quot;: &quot;httpbin.org&quot;,    &quot;User-Agent&quot;: &quot;python-requests/2.18.1&quot; &#125;,  &quot;json&quot;: null,  &quot;origin&quot;: &quot;183.14.133.88&quot;,  &quot;url&quot;: &quot;http://httpbin.org/post&quot;&#125;&#39;&#39;&#39;归根揭底需要分析 Content-Type这个字段</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些想法</title>
    <link href="/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <url>/%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>看到《毛泽东选集》里面一个案列，农民运动时除了斗地主之外还有一个很大的运动——破四旧。其中有一项勤俭节约，禁开酒席，禁买南货斋果送情。原因是工业产品价高，农产品极为价廉的原因，农民受商人剥削厉害，借以自卫的一个手段。由此想到，贫困，经济条件不好的地区常常有暴动，骚乱的一些原因。</p><span id="more"></span><p>一个大的国家，如果地区贫富差距太大，必定对赤贫地区极为的不公平。生产力低下，要获得同样的工业品，边远地区往往要用极多的农产品来相抵，其劳动量肯定天壤之别。在这个大的国家环境里，你不买这些工业品肯定不现实。即使说给你自治权吧，但是相对整个大体量来说，外来省份的货物还是会销售进来，当地产品价值还是太廉价。两相一对比，划不来，不公平，那就另立门户吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>小记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米刷机大概步骤</title>
    <link href="/%E5%B0%8F%E7%B1%B3%E5%88%B7%E6%9C%BA%E5%A4%A7%E6%A6%82%E6%AD%A5%E9%AA%A4/"/>
    <url>/%E5%B0%8F%E7%B1%B3%E5%88%B7%E6%9C%BA%E5%A4%A7%E6%A6%82%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<ol><li><p>先打开fastboot 也就是解锁（直接谷歌）</p></li><li><p>安装第三方rec，如果线刷不进去就先安装官方的开发版，获取root，安装twrp APP，在里面选择合适的rec进行直接安装（若是安装了不正确的版本rec会无限卡兔子且进入不了rec，此时只有线刷官方包再重复以上）</p><span id="more"></span></li><li><p>清除数据，选择别人的rom升级就可以了，具体细节：<a href="https://www.bilibili.com/video/BV1cK411W7jS?p=7&t=44">如何刷原生</a></p></li><li><p>一些坑：连接fastboot时若是屏幕上显示 </p><blockquote><p>press any key to continue<br>一般是不支持win10 3.0的驱动啥的（谷歌一下即可）<br>若是设备管理器那儿找不到安卓设备，可以安装驱动精灵后，抽插手机会显示安装安卓驱动</p></blockquote></li><li><p>8se 安卓10刷机的<a href="https://wws.lanzous.com/iv22hma8sad">twrp镜像</a>，<a href="https://wws.lanzous.com/iN6D5ma8sjc">搞机助手</a>，<a href="https://wws.lanzous.com/id8WZma95yf">usb驱动修复</a></p></li><li><p>最后刷成砖机，rec，fastboot进不去，无限黑屏，电脑设备管理器端口上可以看到9008端口，那就找淘宝远程40大洋解决</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>搞机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯，动态规划-求n个数中和为k的最少解</title>
    <link href="/%E5%9B%9E%E6%BA%AF%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%B1%82n%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%92%8C%E4%B8%BAk%E7%9A%84%E6%9C%80%E5%B0%91%E8%A7%A3/"/>
    <url>/%E5%9B%9E%E6%BA%AF%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%B1%82n%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%92%8C%E4%B8%BAk%E7%9A%84%E6%9C%80%E5%B0%91%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>如题：给定若干正整数，从中选出若干数，使他们的和恰好为k，要求找选择元素最少的解</p><p>##动态规划<br>可以看成0-1背包问题，物品价值与重量为数本身，背包容量为k，网格中的值更新时需要记录是由哪些值所引起的改变。</p><span id="more"></span><p>0-1背包问题中，有三种可能情况，1：当前值等于正上面那个值 （背包容量小于该行重量）。2：当前值等于该行价值加上上面所需要的最优值，3：当前值等于正上面那个值（由max函数比较两个值相等，但是取的是正上面的值，记录路径需要当成第2种情况）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 给定若干正整数，从中选出若干数，使他们的和恰好为k，要求找选择元素最少的解（抽取不放回的选择）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> 给定若干正数和为k最少相加的 &#123;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>// 输入n代表有n个正整数，接着输入n个正整数，接着输入k代表求和<br>Scanner <span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">in</span>.nextInt();<br><span class="hljs-type">int</span> a[] = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>a[i] = <span class="hljs-keyword">in</span>.nextInt();<br><span class="hljs-type">int</span> key = <span class="hljs-keyword">in</span>.nextInt();<br>map[][] jj = <span class="hljs-built_in">new</span> map[n + <span class="hljs-number">1</span>][key + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">in</span>.<span class="hljs-keyword">close</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n + <span class="hljs-number">1</span>; i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; key + <span class="hljs-number">1</span>; j++) &#123;<br>map haha = <span class="hljs-built_in">new</span> map();//这一步一定需要，切记<br>jj[i][j] = haha;<br>jj[i][j].i = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= key; j++) &#123;<br><span class="hljs-keyword">if</span> (j &gt;= a[i]) &#123;<br><span class="hljs-type">int</span> <span class="hljs-keyword">temp</span> = jj[i - <span class="hljs-number">1</span>][j - a[i]].i + a[i];<br>jj[i][j].i = Math.max(jj[i - <span class="hljs-number">1</span>][j].i, <span class="hljs-keyword">temp</span>);<br>// 当前值等于等于上面那个值（由max函数比较两个值相等，但是取的是正上面的值，记录路径需要当成第<span class="hljs-number">2</span>种情况）（第二个或的作用）<br><span class="hljs-keyword">if</span> (jj[i][j].i == <span class="hljs-keyword">temp</span> || jj[i - <span class="hljs-number">1</span>][j].i == <span class="hljs-keyword">temp</span>) &#123;<br>ArrayList&lt;<span class="hljs-type">Integer</span>&gt; tt = <span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();<br>tt = <span class="hljs-keyword">copy</span>(jj[i - <span class="hljs-number">1</span>][j - a[i]].nums);<br>// tt=jj[i<span class="hljs-number">-1</span>][j-a[i]].nums; //这里传的是地址给tt<br>tt.<span class="hljs-keyword">add</span>(a[i]);<br>jj[i][j].nums = tt;<br>&#125; <span class="hljs-keyword">else</span> &#123; // 直接上面的值<br>jj[i][j].nums = <span class="hljs-keyword">copy</span>(jj[i - <span class="hljs-number">1</span>][j].nums);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>jj[i][j].i = jj[i - <span class="hljs-number">1</span>][j].i;<br>jj[i][j].nums = <span class="hljs-keyword">copy</span>(jj[i - <span class="hljs-number">1</span>][j].nums);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= key; j++) &#123;<br><span class="hljs-keyword">if</span> (jj[i][j].i == key &amp;&amp; jj[i][j].nums.size() &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : jj[i][j].nums)<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(t + &quot; &quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br><br>&#125;<br>&#125;<br><br>&#125;<br><br>private static ArrayList&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-keyword">copy</span>(ArrayList&lt;<span class="hljs-type">Integer</span>&gt; nums) &#123;<br>ArrayList&lt;<span class="hljs-type">Integer</span>&gt; aa = <span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums)<br>aa.<span class="hljs-keyword">add</span>(i);<br><span class="hljs-keyword">return</span> aa;<br>&#125;<br><br>static <span class="hljs-keyword">class</span> map &#123;<br><span class="hljs-type">int</span> i;<br>ArrayList&lt;<span class="hljs-type">Integer</span>&gt; nums = <span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;(); //记录路径<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>截图：<br><img src="/%E5%9B%9E%E6%BA%AF%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%B1%82n%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%92%8C%E4%B8%BAk%E7%9A%84%E6%9C%80%E5%B0%91%E8%A7%A3/1609249684623.png"></p><p>##回溯<br>解空间为子集树，每个数字只有取与不取的区别。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 给定若干正数和为<span class="hljs-title">k</span>最少相加的<span class="hljs-title">a</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] a;     <span class="hljs-comment">//n个数</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] x;        <span class="hljs-comment">//解向量</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">target</span>;      <span class="hljs-comment">//k</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cSum;        <br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (i &gt; n - <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">target</span> == cSum) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; x.length; j++) &#123;<br><span class="hljs-keyword">if</span> (x[j] == <span class="hljs-number">1</span>)<br>System.out.print(a[j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//没有进行剪枝</span><br><span class="hljs-keyword">if</span> (cSum + a[i] &lt;= <span class="hljs-keyword">target</span>) &#123; <span class="hljs-comment">// 第i个数取   </span><br>x[i] = <span class="hljs-number">1</span>;<br>cSum += a[i];<br>backtrack(i + <span class="hljs-number">1</span>);<br>cSum -= a[i];       <span class="hljs-comment">//他还要进行不取，所以还要把他减回去</span><br>&#125;<br><br>x[i] = <span class="hljs-number">0</span>;<br>backtrack(i + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> _a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-keyword">int</span> _tar = <span class="hljs-number">5</span>;<br><br>a = _a;<br>n = _a.length;<br>x = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><span class="hljs-keyword">target</span> = _tar;<br>cSum = <span class="hljs-number">0</span>;<br>backtrack(<span class="hljs-number">0</span>);   <br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>截图：<br><img src="/%E5%9B%9E%E6%BA%AF%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%B1%82n%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%92%8C%E4%B8%BAk%E7%9A%84%E6%9C%80%E5%B0%91%E8%A7%A3/1609250224116.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科幻的常见类型</title>
    <link href="/%E7%A7%91%E5%B9%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B/"/>
    <url>/%E7%A7%91%E5%B9%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撕中缀表达式转后缀表达式（逆波兰式）</title>
    <link href="/%E6%89%8B%E6%92%95%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%EF%BC%89/"/>
    <url>/%E6%89%8B%E6%92%95%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>中缀表达式转后缀表达式转化后只是<strong>操作符的次序变了，操作数的次序并没有变</strong></p><p>唯一知道一点<strong>a+b转后缀表达式为ab+,乘法除法都雷同</strong>就可了其他运算次序为从左到右依次运算，先运算的还是先运算（操作符优先程度高的，如乘法优先加法之类的）</p><span id="more"></span><p>中缀表达式：a + b*c + (d * e + f) * g转换成后缀表达式则为a b c * + d e * f  + g * +</p><ol><li>a + b*c + ( d * e + f ) * g          </li><li>a+( bc* )+( d * e + f ) * g          </li><li>( abc*+ )+( d * e + f ) * g    ———-x+y-&gt;xy+     这里把上面的x&#x3D;a  ,y&#x3D;bc*   所以转换后为abc*+ </li><li>( abc*+ )+( ( de* )+f ) *g</li><li>( abc*+ )+( de*f+ )*g</li><li>( abc*+ )+( de<em>f+g</em> )</li><li>abc*+de<em>f+g</em>+</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n后问题</title>
    <link href="/N%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <url>/N%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在n乘以n格的棋盘上放置彼此不受攻击的n个皇后，按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n*n格的棋盘上放置n个皇后，任何2个皇后不放在同一行或同一列或同一斜线上。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>与图着色问题思考方式大致相同，需要一个一维数组记录皇后放置棋盘上的位置，以数组下标为棋盘上的行，数组的值为棋盘的列，进行<strong>每列</strong>试值，检查其放置是否合法，不合法回溯，合法进行下一行。递归过程为放置下一行。对于棋盘的不在同一斜线的判定，想象等腰直角三角形的判定，两直角边相等。</p><span id="more"></span><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">queenProblem</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> n=<span class="hljs-number">8</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> []dir=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>];<span class="hljs-comment">//下标代表棋盘行，值代表棋盘列</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br><span class="hljs-type">int</span> map[][]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br><span class="hljs-built_in">queue</span>(<span class="hljs-number">1</span>,map);<br>System.out.<span class="hljs-built_in">println</span>(sum);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">queue</span><span class="hljs-params">(<span class="hljs-type">int</span> j, <span class="hljs-type">int</span>[][] map)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span>(j&gt;n) &#123;<br>sum++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>System.out.<span class="hljs-built_in">print</span>(dir[i]+<span class="hljs-string">&quot; &quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>dir[j]=i;       <span class="hljs-comment">//尝试放各个列</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isok</span>(j)) <span class="hljs-built_in">queue</span>(j+<span class="hljs-number">1</span>,map);<br>dir[j]=<span class="hljs-number">0</span>;   <span class="hljs-comment">//回溯</span><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title">isok</span><span class="hljs-params">(<span class="hljs-type">int</span> j)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;j;i++) &#123;<br>            <span class="hljs-comment">//不在同一列，不在同一斜线</span><br><span class="hljs-keyword">if</span>(dir[i]==dir[j] || Math.<span class="hljs-built_in">abs</span>(dir[i]-dir[j])==Math.<span class="hljs-built_in">abs</span>(i-j)) &#123;   <br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单源最短路径（Dijkstra算法）</title>
    <link href="/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <url>/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>迪杰斯特拉算法(Dijkstra)是由荷兰计算机科学家狄克斯特拉于1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的最短路径算法（单源最短路径），解决的是有权图中最短路径问题，采用贪心的策略。<br>如下图：求顶点1到顶点5的最短路径长度是多少.<br><img src="/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89/1608718378166.png"></p><span id="more"></span><p>核心思路：<strong>从源点到终点的最短路径所经过的节点也一定是从源点到此节点的最短路径！</strong><br>需要一个dist数组记录从源点到各个节点的最短路径长度<br>需要一个map二维数组记录了图的权值信息<br>需要一个visit数组记录节点当前到源的距离是否是最短的了，若最短了，则不再变动，对应着dist相应节点也不再变动</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单源最短路径问题（贪心）</span><br><span class="hljs-comment"> * @author 煨酒小童</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dijkstra</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>=<span class="hljs-number">9999</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br><span class="hljs-type">int</span> n=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[][]=<span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)<br><span class="hljs-built_in">map</span>[i][j]=<span class="hljs-built_in">max</span>;<br><span class="hljs-built_in">map</span>[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">10</span>;<span class="hljs-built_in">map</span>[<span class="hljs-number">1</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">100</span>;<span class="hljs-built_in">map</span>[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>]=<span class="hljs-number">30</span>;<br><span class="hljs-built_in">map</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">50</span>;<span class="hljs-built_in">map</span>[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">10</span>;<span class="hljs-built_in">map</span>[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">20</span>;<span class="hljs-built_in">map</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>]=<span class="hljs-number">60</span>;<br><span class="hljs-type">int</span> v=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-built_in">dist</span>[]=<span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[n+<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> prev[]=<span class="hljs-keyword">new </span><span class="hljs-class title_">int</span>[n+<span class="hljs-number">1</span>]; <span class="hljs-comment">//记录的是源到顶点i上最短路径上的前一个顶点</span><br><span class="hljs-title function_">Dijkstra1</span>(v,<span class="hljs-built_in">map</span>,<span class="hljs-built_in">dist</span>,prev);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">dist</span>[i]+<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//dist[5]就是问题的解</span><br><br>&#125;<br>    <span class="hljs-comment">//源点，邻接矩阵，存储答案的数组，路径存储</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Dijkstra1</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span>[][] <span class="hljs-built_in">map</span>, <span class="hljs-type">int</span>[] <span class="hljs-built_in">dist</span>, <span class="hljs-type">int</span>[] prev) &#123;<br><span class="hljs-type">int</span> n=<span class="hljs-built_in">dist</span>.<span class="hljs-property">length</span><span class="hljs-number">-1</span>;<br><span class="hljs-type">boolean</span> visit[]=<span class="hljs-keyword">new </span><span class="hljs-class title_">boolean</span>[n+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br><span class="hljs-built_in">dist</span>[i]=<span class="hljs-built_in">map</span>[v][i];<span class="hljs-comment">//源点到各个节点的距离</span><br>visit[i]=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[v][i]&lt;<span class="hljs-built_in">max</span>) prev[i]=<span class="hljs-number">0</span>;  <span class="hljs-comment">//不存在(都没有路径嘛)</span><br><span class="hljs-keyword">else</span> prev[i]=v;<br><br>&#125;<br>visit[v]=<span class="hljs-literal">true</span>;<span class="hljs-built_in">dist</span>[v]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//每一次循环都可以创造一个最短路径</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br><span class="hljs-type">int</span> temp=<span class="hljs-built_in">max</span>;<span class="hljs-comment">//从源到index中的最小和的值</span><br><span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<span class="hljs-comment">//dist中最小的那个节点</span><br><span class="hljs-comment">//这里找出dist中的最小值,并记录是哪个节点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++) &#123;<br><span class="hljs-keyword">if</span>(!visit[j] &amp;&amp; temp&gt;<span class="hljs-built_in">dist</span>[j]) &#123;<br>temp=<span class="hljs-built_in">dist</span>[j];<br>index=j;<br>&#125;<br>&#125;<br>visit[index]=<span class="hljs-literal">true</span>;<br> <span class="hljs-comment">//从最短路径那里再往外衍生更新dist中的最短路径</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++) &#123;<br><span class="hljs-keyword">if</span>(!visit[j] &amp;&amp; <span class="hljs-built_in">map</span>[index][j]&lt;<span class="hljs-built_in">max</span>) &#123;<br><span class="hljs-type">int</span> newdist=temp+<span class="hljs-built_in">map</span>[index][j];<br><span class="hljs-keyword">if</span>(newdist&lt;<span class="hljs-built_in">dist</span>[j]) &#123;<br><span class="hljs-built_in">dist</span>[j]=newdist;<br>prev[j]=index;  <span class="hljs-comment">//与dist数组一样，这个是动态修改的，只会在最后一步确定结果</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="算法迭代过程"><a href="#算法迭代过程" class="headerlink" title="算法迭代过程"></a>算法迭代过程</h2><p><img src="/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89/1608719468162.png"></p><p><a href="https://www.bilibili.com/video/BV1q4411M7r9?from=search&seid=3777136229730714108">参考视频</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈夫曼编码</title>
    <link href="/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <url>/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>构造哈夫曼树时使用双亲孩子的存储结构，需要数据有： 权重，他们母亲是谁，是否加入了哈夫曼树，他们左孩子与右孩子又是谁？</p><p>步骤：</p><ol><li>单节点的初始化入哈夫曼树中，初始化2*n-1个节点</li><li>寻找两个权重最小且还没有加入树中的节点进行构造哈夫曼树，不断重复此过程（构造过程中存储结构中变动的信息都需要更新）其实这寻找两个权值最小的节点挺难的，困了好长时间&#x2F;(ㄒoㄒ)&#x2F;~~</li><li>根据构造的树，解析析出哈夫曼编码</li></ol><h2 id="双亲孩子节点"><a href="#双亲孩子节点" class="headerlink" title="双亲孩子节点"></a>双亲孩子节点</h2><p><img src="/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1608476724594.png"></p><span id="more"></span><p><img src="/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/1608476736519.png"><br>上图把head换成leftchild 和 rightchild就可以代表<strong>仿真指针实现的双亲孩子的储存结构</strong></p><p>&emsp;&emsp;get了一个<strong>新技巧</strong>，对于一个数组中胡乱的加入各个大小的数据，怎么<strong>循环一次</strong>就可以把其中最小的和次小的下标找到,分两个情况考虑：</p><ol><li>最小值在次小值右边，想象着最小值在最右边，一直遍历下去定会也遇到次小值</li><li>最小值在次小值左边，</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xl">    int big1=<span class="hljs-number">9999</span>,<br>big2=<span class="hljs-number">9999</span>,<br>index1 = <span class="hljs-number">0</span>,<br>index2 = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//找出权值最小和次小的树</span><br><span class="hljs-keyword">for</span>(int j=<span class="hljs-number">0</span>;j&lt;n+i;j++) &#123;<br><span class="hljs-keyword">if</span>(big1&gt;<span class="hljs-keyword">tree</span>[j].weight &amp;&amp; <span class="hljs-keyword">tree</span>[j].flag==<span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//这个是最小值在次小值右边</span><br>big2=big1;<br>index2=index1;<br>big1=<span class="hljs-keyword">tree</span>[j].weight;<br>index1=j;<span class="hljs-comment">//smallest</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(big2&gt;<span class="hljs-keyword">tree</span>[j].weight &amp;&amp; <span class="hljs-keyword">tree</span>[j].flag==<span class="hljs-number">0</span> ) &#123;<span class="hljs-comment">//最小值在次小值左边</span><br>big2=<span class="hljs-keyword">tree</span>[j].weight;<br>index2=j;<span class="hljs-comment">//second smallest</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanCoding</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> weight[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>hufftree tree[]=<span class="hljs-keyword">new</span> hufftree[weight.length*<span class="hljs-number">2</span><span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;tree.length;i++)<br>tree[i]=<span class="hljs-keyword">new</span> hufftree();<br>haffman(weight,tree);<br>huffcode code[]=<span class="hljs-keyword">new</span> huffcode[weight.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;weight.length;i++)<br>code[i]=<span class="hljs-keyword">new</span> huffcode();<br>generateHuffCode(tree,code);<br><span class="hljs-comment">//输出哈夫曼码</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;code.length;i++) &#123;<br>ArrayList&lt;Integer&gt; a=code[i].code;<br>String s=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=a.size()<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--) &#123;<br>s+=a.get(j);<br>&#125;<br>System.out.println(code[i].weight+<span class="hljs-string">&quot;  :&quot;</span>+s);<br>&#125;<br>System.out.println(<span class="hljs-number">123</span>);<br>&#125;<br><br><span class="hljs-comment">//哈夫曼码的生成</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">generateHuffCode</span><span class="hljs-params">(hufftree[] tree, huffcode[] code)</span> </span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;code.length;i++) &#123;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">parents</span>=tree[i].<span class="hljs-keyword">parents</span>;<br><span class="hljs-keyword">int</span> child=i;<br><span class="hljs-keyword">int</span> weight=tree[i].weight;<br>code[i].weight=weight;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">parents</span>!=<span class="hljs-number">-1</span>) &#123;<span class="hljs-comment">//这里是把结果倒过来保存</span><br><span class="hljs-keyword">if</span>(tree[<span class="hljs-keyword">parents</span>].leftchild==child)<br>code[i].code.add(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span><br>code[i].code.add(<span class="hljs-number">1</span>);<br>child=<span class="hljs-keyword">parents</span>;<span class="hljs-comment">//妙哉</span><br><span class="hljs-keyword">parents</span>=tree[child].<span class="hljs-keyword">parents</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//哈夫曼树的构建</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">haffman</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weight[],hufftree tree[])</span> </span>&#123;<br><span class="hljs-keyword">int</span> n=weight.length;<br><span class="hljs-comment">//哈夫曼树的初始化，共有2*n-1个节点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;tree.length;i++) &#123;<br><span class="hljs-keyword">if</span>(i&lt;n) tree[i].weight=weight[i];<br><span class="hljs-keyword">else</span> tree[i].weight=<span class="hljs-number">0</span>;<br>tree[i].flag=<span class="hljs-number">0</span>;<br>tree[i].<span class="hljs-keyword">parents</span>=<span class="hljs-number">-1</span>;<br>tree[i].leftchild=<span class="hljs-number">-1</span>;<br>tree[i].rightchild=<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//构造非叶子节点，2*n-1-n个</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++) &#123;<br><span class="hljs-keyword">int</span> big1=<span class="hljs-number">9999</span>,<br>big2=<span class="hljs-number">9999</span>,<br>index1 = <span class="hljs-number">0</span>,<br>index2 = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//找出权值最小和次小的树</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n+i;j++) &#123;<br><span class="hljs-keyword">if</span>(big1&gt;tree[j].weight &amp;&amp; tree[j].flag==<span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//这个是最小值在次小值右边</span><br>big2=big1;<br>index2=index1;<br>big1=tree[j].weight;<br>index1=j;<span class="hljs-comment">//smallest</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(big2&gt;tree[j].weight &amp;&amp; tree[j].flag==<span class="hljs-number">0</span> )</span> </span>&#123;<span class="hljs-comment">//最小值在次小值左边</span><br>big2=tree[j].weight;<br>index2=j;<span class="hljs-comment">//second smallest</span><br><br>&#125;<br>&#125;<br>tree[index1].<span class="hljs-keyword">parents</span>=n+i;<span class="hljs-comment">//这里是从i=0开始的</span><br>tree[index2].<span class="hljs-keyword">parents</span>=n+i;<br>tree[index1].flag=<span class="hljs-number">1</span>;<br>tree[index2].flag=<span class="hljs-number">1</span>;<br>tree[n+i].weight=tree[index1].weight+tree[index2].weight;<br>tree[n+i].leftchild=index1;<br>tree[n+i].rightchild=index2;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">huffcode</span></span>&#123;<br>ArrayList&lt;Integer&gt; code=<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><span class="hljs-keyword">int</span> weight;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hufftree</span></span>&#123;<br><span class="hljs-keyword">int</span> weight,<br>flag,<span class="hljs-comment">//是否已经加入到哈夫曼树中，1为已加入</span><br><span class="hljs-keyword">parents</span>,<br>leftchild,<br>rightchild;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-1背包问题</title>
    <link href="/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="/./0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98-1703917426600.png"></p><p>0-1背包问题：假设你是个小偷，背着一个可装4磅东西的背包。你可盗窃的商品有如下3件<br><img src="/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1608372494998.png"></p><p>为了让盗窃的商品价值最高，你该选择哪些商品？</p><p>每个动态规划算法都从一个网格开始，背包问题的网格如下：</p><span id="more"></span><p><img src="/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1608372559460.png"></p><p>网格的各行为商品，各列为不同容量（1～4磅）的背包。所有这些列你都需要，因为它们将<br>帮助你计算子背包的价值。<br>网格最初是空的。你将填充其中的每个单元格，网格填满后，就找到了问题的答案<br><strong>一行一行的填值，想象一个货架一个货架的取，还没有走到的货架不能取（可以回头），从左往右的每一列背包空间变大</strong></p><p><img src="/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1608372686983.png"></p><p>计算每个单元格使用了如下公式：</p><p><img src="/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1608372744721.png"></p><p><strong>优化：</strong> 因为看表或通过公式可以发现，下一行的数据只与上一行的数据有关，所以可以弄一个一维数组，<strong>通过刷新模拟换行填数据</strong>，需要注意的是，从后往前填，因为正过来填的话,后面要填的值可能是与被修改的值有关</p><p>练习<br><img src="/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/1608374442627.png"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Knapsack0_1_Problem</span> &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br><span class="hljs-type">int</span> weight = <span class="hljs-number">6</span>;<br><span class="hljs-type">int</span> wei[] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[] &#123; <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-type">int</span> value[] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[] &#123; <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-type">int</span> map[][] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[wei.length + <span class="hljs-number">1</span>][weight + <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> map1[] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[weight + <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//一维数组的做法，注意倒过来填值，因为如果正过来填的话,后面要填的值可能是与被修改的过的值有关，倒过来填值不会出现该情况</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= value.length - <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-comment">// 竖坐标（商品的价值）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = map1.length - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">1</span>; j--) &#123;        <span class="hljs-comment">//从后往前填</span><br><span class="hljs-keyword">if</span> (j &gt;= wei[i]) &#123;<br>map1[j] = Math.<span class="hljs-built_in">max</span>(map1[j], value[i] + map1[j - wei[i]]);<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : map1) &#123;<br>System.out.<span class="hljs-built_in">println</span>(i);<br>&#125;<br>        <span class="hljs-comment">//二维数组的做法</span><br><span class="hljs-comment">//for(int i=1;i&lt;=value.length-1;i++) &#123;//竖坐标（商品的价值）</span><br><span class="hljs-comment">//for(int j=1;j&lt;=weight;j++) &#123;</span><br><span class="hljs-comment">//if(j&gt;=wei[i]) &#123;//可以装的进</span><br><span class="hljs-comment">//map[i][j]=Math.max(map[i-1][j],value[i]+ map[i-1][j-wei[i]]);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//System.out.print(map[i][j]+&quot; &quot;);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//System.out.println();</span><br><span class="hljs-comment">//&#125;</span><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://book.douban.com/subject/26979890/">参考书籍</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡，二分，合并，快速排序</title>
    <link href="/%E5%86%92%E6%B3%A1%EF%BC%8C%E4%BA%8C%E5%88%86%EF%BC%8C%E5%90%88%E5%B9%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/%E5%86%92%E6%B3%A1%EF%BC%8C%E4%BA%8C%E5%88%86%EF%BC%8C%E5%90%88%E5%B9%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="二分排序法"><a href="#二分排序法" class="headerlink" title="二分排序法"></a>二分排序法</h2><p>二分查找法主要是解决在“一堆数中找出指定的数”这类问题。</p><p>而想要应用二分查找法，这“一堆数”必须有以下特征：</p><ol><li>存储在数组中</li><li>有序排列</li></ol><p>二分查找思路，<strong>在一个有序的数组中（从小到大排列），与中间的那个数作比较，若相等，则找到，若小于中间的数则继续在左边那一块重复操作，反之重复右边的那块操作。</strong></p><span id="more"></span><p>有递归方法与普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输入一个int n表示有几个数 接着输入n个有序的数字即可</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 煨酒小童</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearch0</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">haha</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>; <span class="hljs-comment">// 查找7这个数的下标</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br><span class="hljs-type">int</span> num[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>num[i] = in.nextInt();<br>Arrays.sort(num); <span class="hljs-comment">// 排为有序</span><br>in.close();<br>System.out.println(find(num, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-comment">// i为左边界，j为右边界</span><br><span class="hljs-comment">// 非递归方式</span><br><span class="hljs-comment">//private static int  find(int[] num, int i, int j) &#123;</span><br><span class="hljs-comment">//while(i&lt;=j) &#123;</span><br><span class="hljs-comment">//int mid=(i+j)/2;</span><br><span class="hljs-comment">//if(num[mid]==haha)</span><br><span class="hljs-comment">//return mid;</span><br><span class="hljs-comment">//else if(num[mid]&gt;haha)</span><br><span class="hljs-comment">//j=mid-1;</span><br><span class="hljs-comment">//else</span><br><span class="hljs-comment">//i=mid+1;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return -1;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// 递归方式</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] num, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (i + j) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (i &gt; j)<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num[mid] == haha)<br><span class="hljs-keyword">return</span> mid;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num[mid] &gt; haha)<br><span class="hljs-keyword">return</span> find(num, i, mid - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> find(num, mid + <span class="hljs-number">1</span>, j);<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h2><p>采用分治的思想层层剖析再合并<br><img src="/%E5%86%92%E6%B3%A1%EF%BC%8C%E4%BA%8C%E5%88%86%EF%BC%8C%E5%90%88%E5%B9%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1608356651391.gif"><br>思路：<strong>把一个数组分成两半，分别排好序，然后再合并一个完整的有序的数组</strong>（他的优点在于对于已排好序的两部分进行合并非常精妙且快速），在分成两半后，它还可以进行再分两半，直到分的不能再分为止。一直分分分，就是分治法的精髓。<br>merge方法也就是合并是难点所在：<br><img src="/%E5%86%92%E6%B3%A1%EF%BC%8C%E4%BA%8C%E5%88%86%EF%BC%8C%E5%90%88%E5%B9%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1608347271363.png"></p><p><strong>本质是 L 与 K 的比较，谁大（或小）就把所指的数放入 temp 数组中，并把指针移动到下一位，一直重复下去，当有一方越过其自己的边界，意味着另一方还有剩余，则把剩余的全部放在 temp 数组中</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MergeSort &#123;<br>static <span class="hljs-type">int</span> num[];<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">20</span>;<br>num = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-type">double</span> d = Math.random();<br>num[i] = (<span class="hljs-type">int</span>) (d * <span class="hljs-number">100</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(num[i] + &quot; &quot;);<br>&#125;<br>// 上面生成<span class="hljs-number">20</span>个<span class="hljs-number">0</span><span class="hljs-number">-100</span>的随机数<br>mergesort(num, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>); // 合并排序<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : num)<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(i + &quot; &quot;);<br>&#125;<br><br>private static <span class="hljs-type">void</span> mergesort(<span class="hljs-type">int</span>[] num2, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right) &#123;<br><span class="hljs-keyword">if</span> (left &lt; right) &#123;<br><span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>mergesort(num2, left, mid);<br>mergesort(num2, mid + <span class="hljs-number">1</span>, right); // 这里利用了递归与分治<br>merge(num2, left, right);<br>&#125;<br><br>&#125;<br><br>private static <span class="hljs-type">void</span> merge(<span class="hljs-type">int</span>[] num2, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right) &#123;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, mid = (left + right) / <span class="hljs-number">2</span>, left0 = left, // 这个暂时不思考，看到后面就理解了<br>j = mid + <span class="hljs-number">1</span>, // 另一半的左边的下标<br><span class="hljs-keyword">temp</span>[] = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[(right - left) + <span class="hljs-number">1</span>]; // 装排好序的数<br><span class="hljs-keyword">while</span> (left &lt;= mid &amp;&amp; j &lt;= right) &#123;<br><span class="hljs-keyword">if</span> (num2[left] &lt; num2[j])<br><span class="hljs-keyword">temp</span>[k++] = num2[left++];<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">temp</span>[k++] = num2[j++];<br>&#125;<br><span class="hljs-keyword">if</span> (left &gt; mid) // 第二个序列有剩余，则把剩余的数依次写在<span class="hljs-keyword">temp</span>后面<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = j; i &lt;= right; i++)<br><span class="hljs-keyword">temp</span>[k++] = num2[i];<br><span class="hljs-keyword">if</span> (j &gt; right)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= mid; i++)<br><span class="hljs-keyword">temp</span>[k++] = num2[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">temp</span>.length; i++)<br>// 这里一定要是left0，深处想想复制进入原数组，其他位置不能改动，假如left=<span class="hljs-number">3</span>，right=<span class="hljs-number">8</span>，则复制进去的时候还是从<span class="hljs-number">3</span>到<span class="hljs-number">8</span><br>num2[left0++] = <span class="hljs-keyword">temp</span>[i];<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1GT4y1G75V?from=search&seid=15415047608501305073">参考视频</a></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="/%E5%86%92%E6%B3%A1%EF%BC%8C%E4%BA%8C%E5%88%86%EF%BC%8C%E5%90%88%E5%B9%B6%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/1608356673379.gif"><br>快速排序是冒泡排序的改进版，思路是，<strong>在其中找一个基准值，然后比较这个基准值，把整个数组分成都比基准值大的一部分，和都比他小的一部分，然后对剩下的两大部分，又可以进行类似操作</strong>。（对于基准值分成两大部分的函数最为妙，边界条件很不好理解，我要背下来！！太妙了)因为排序是就地进行的，不像合并排序一般还要再誊一遍值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickSort</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> num[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Math.random();<br>num[i] = (<span class="hljs-type">int</span>) (d * <span class="hljs-number">100</span>);<br>System.out.print(num[i] + <span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-comment">// num[i]=in.nextInt();</span><br>&#125;<br><span class="hljs-comment">// 以上为随机生成8个数</span><br>qSort(num, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>System.out.println();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : num)<br>System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">qSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] num, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><span class="hljs-keyword">if</span> (i &lt; j) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> partion(num, i, j);<br><span class="hljs-comment">// 下面不要包含q了，q算一个中间值独立存在,只用再考虑两边就行了</span><br>qSort(num, i, q - <span class="hljs-number">1</span>); <span class="hljs-comment">// 有分治的思想</span><br>qSort(num, q + <span class="hljs-number">1</span>, j);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partion</span><span class="hljs-params">(<span class="hljs-type">int</span>[] num, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">bid</span> <span class="hljs-operator">=</span> num[i];<br><span class="hljs-type">int</span> <span class="hljs-variable">haha</span> <span class="hljs-operator">=</span> i, k = j + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">while</span> (num[++i] &lt; bid &amp;&amp; i &lt; j)<br>; <span class="hljs-comment">// 寻找比bid大的那个数，找到并暂停</span><br><span class="hljs-keyword">while</span> (num[--k] &gt; bid &amp;&amp; k &gt;= i)<br>; <span class="hljs-comment">// 寻找比bid小的那个数,找到并暂停，这里为什么可以不用写k&gt;=i?? 惊呆我了</span><br><span class="hljs-keyword">if</span> (i &gt;= k)<span class="hljs-comment">//如果没有遍历完，则进行上面两个值的交换</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 交换</span><br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> num[i];<br>num[i] = num[k];<br>num[k] = temp;<br>&#125;<br>num[haha] = num[k];<br>num[k] = bid;<br><span class="hljs-keyword">return</span> k;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1Tt411r75A?from=search&seid=1917553773153484540">参考视频</a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>最好情况时间复杂度为O(n),最差为O(n^2)</p><p>如 7， 3， 9 ，2， 5</p><ol><li>3 7 2 5 9</li><li>3 2 5 7 9</li><li>2 3 5 7 9</li><li>2 3 5 7 9</li><li>2 3 5 7 9</li></ol><p>其实冒泡的本质是：<strong>有几个数就重复几趟，每一趟中都依次两两递进扫描，若不符合位置的则交换，每一趟下来都会找到一个最大值放在后面，所以后面扫描的时候可以跳过这个最大值少少扫描一点。</strong></p><p>数组 a 中装着乱序的数</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++) &#123;          <span class="hljs-comment">//进行n趟</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>-i;j++) &#123;       <span class="hljs-comment">//两两递进扫描</span><br><span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-type">int</span> temp=a[j];<br>a[j]=a[j+<span class="hljs-number">1</span>];<br>a[j+<span class="hljs-number">1</span>]=temp;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的着色问题（地图着色问题）</title>
    <link href="/%E5%9B%BE%E7%9A%84%E7%9D%80%E8%89%B2%E9%97%AE%E9%A2%98/"/>
    <url>/%E5%9B%BE%E7%9A%84%E7%9D%80%E8%89%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>&emsp;&emsp; 给定无向连通图G&#x3D;(V, E)和m种不同的颜色，用这些颜色为图G的各顶点着色，每个顶点着一种颜色。是否有一种着色法使G中相邻的两个顶点有不同的颜色?<br>&emsp;&emsp; 这个问题是图的m可着色判定问题。若一个图最少需要m种颜色才能使图中每条边连接的两个顶点着不同颜色，则称这个数m为该图的色数。求一个图的色数m的问题称为图的m可着色优化问题。<br>&emsp;&emsp; 编程计算：给定图G&#x3D;(V, E)和m种不同的颜色，找出所有不同的着色法和着色总数。<br>简而言之：给一个图，<strong>要求相连接的顶点颜色不能相同</strong>，有m种颜色可以进行着色，可以有多少方案。</p><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="/%E5%9B%BE%E7%9A%84%E7%9D%80%E8%89%B2%E9%97%AE%E9%A2%98/1608291557905.webp"></p><p>&emsp;&emsp;可以想第一个顶点第一种颜色，第二个点再尝试每个颜色是否可以着色，以此类推，有递归的感觉。<br>&emsp;&emsp;如同八皇后问题，<strong>放置顶点，循环尝试其中一个颜色（ 颜色方案存入其中名为 x 的数组中），然后检查颜色是否合法（不与任何相连的顶点颜色相同为合法），如果不合法，回溯重试颜色，如果合法，就放置下一个顶点，直到所有顶点放置完毕，则为一成功方案</strong>。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mapColoring</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>; <span class="hljs-comment">// 有n个结点</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span>[] x = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n + <span class="hljs-number">1</span>]; <span class="hljs-comment">// answer pace 按顶点1，2，3，4，5，6对应的颜色</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m = <span class="hljs-number">4</span>; <span class="hljs-comment">// 可用颜色数</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br><span class="hljs-built_in">initial</span>(map);<br><span class="hljs-built_in">backtrack</span>(<span class="hljs-number">1</span>);<br>System.out.<span class="hljs-built_in">println</span>(sum);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (t &gt; n) &#123;<br>sum++;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>System.out.<span class="hljs-built_in">print</span>(x[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>();<br><span class="hljs-keyword">return</span>;<span class="hljs-comment">// ?????</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>x[t] = i; <span class="hljs-comment">// 顶点t被予以第i中颜色</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(t))<span class="hljs-comment">// 这里包含了剪枝</span><br><span class="hljs-built_in">backtrack</span>(t + <span class="hljs-number">1</span>);<br>x[t] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 如果颜色不行，回溯回去</span><br><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> t)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br><span class="hljs-keyword">if</span> (map[t][j] == <span class="hljs-number">1</span> &amp;&amp; x[t] == x[j])<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为1是相连，否之为0</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @param map</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">initial</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>map[i][j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i == j)<br>map[i][j] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>map[<span class="hljs-number">1</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>map[<span class="hljs-number">5</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>map[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>map[<span class="hljs-number">5</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="/%E5%9B%BE%E7%9A%84%E7%9D%80%E8%89%B2%E9%97%AE%E9%A2%98/1608292665159.png"></p><!-- more -->]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小记</title>
    <link href="/%E5%B0%8F%E8%AE%B0/"/>
    <url>/%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><code>2020-12-18 18:31:17 </code><br>现在很是茫然，不想面对，还有4天就期末考了，眼球失焦的看着滑动的各种段子，新闻，麻木的混过这几个小时，赶快开始新的一天，翘盼着新的一天自己有所改变。。。啊，写出来感觉畅快多了，我就是一个废物，承认自己是废物心里舒坦多了</p><p><code>20:23 2020/12/20</code><br>其实当你毛躁不专注时，可以转移注意力去做一下你别处的事情，等你准备好了（当然尽快哈），就可以效率很快的一举攻克它</p><p><code>22:21 2020/12/28</code><br>考了几场试后就感觉无所谓了，明明还有好几天的时间，而自己懒散的态度仿佛现在准备放假似的。现在陆陆续续也在准备寒假考研的复习了，买了红宝书，汤家凤的高速讲义，不要虚度后面的光阴了，不能再虚度了！！！  你还有好多任务没有完成。比如那天你考试还没有做出来的题</p><p><code>20:32 2020/12/31</code><br>今年新闻主色调是外国人民生活在水深火热之中，国内民众都幸福安康，习近平的政策都很英明伟大。</p>]]></content>
    
    
    
    <tags>
      
      <tag>小记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长公共子序列</title>
    <link href="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <url>/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。求解使用费曼算法（Feynman algorithm）</p><span id="more"></span><h2 id="费曼算法"><a href="#费曼算法" class="headerlink" title="费曼算法"></a>费曼算法</h2><p>步骤：</p><ol><li>将问题写下来</li><li>好好思考</li><li>将答案写下来<br>佩服呀，真是万能算法 。。。org</li></ol><h2 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h2><p>先了解一下最长公共子串，例子str1&#x3D;“abcdefg”  ，str2&#x3D;“bcdgh” 最长公共子串为bcd。</p><h3 id="填充网格"><a href="#填充网格" class="headerlink" title="填充网格"></a>填充网格</h3><p>求fish 与 hish 的最长子串长度为3</p><p>用网格描述如下：</p><p><img src="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/1608129258011.png"></p><h3 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h3><p><img src="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/1608129297040.png"></p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p><img src="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/1608129419821.png"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>最长公共子串长度为二维数组中最大的那个值</p><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p>fort 与 fosh最长公共子序列长度为2，fish 与 fosh 最长公共子序列长度为 3 </p><p>网格描述如下：</p><p><img src="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/1608129681573.png"></p><h3 id="算法解释-1"><a href="#算法解释-1" class="headerlink" title="算法解释"></a>算法解释</h3><p><img src="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/1608129705624.png"></p><h3 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h3><p><img src="/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/1608129737970.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LCS2</span> &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br><span class="hljs-type">String</span> a=<span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-type">String</span> b=<span class="hljs-string">&quot;2468&quot;</span>;<br><span class="hljs-type">char</span> c[]=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[a.<span class="hljs-built_in">length</span>()+<span class="hljs-number">1</span>];<br><span class="hljs-type">char</span> d[]=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[b.<span class="hljs-built_in">length</span>()+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a.<span class="hljs-built_in">length</span>();i++)<br>c[i]=a.<span class="hljs-built_in">charAt</span>(i<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=b.<span class="hljs-built_in">length</span>();i++)<br>d[i]=b.<span class="hljs-built_in">charAt</span>(i<span class="hljs-number">-1</span>);<br><span class="hljs-type">int</span> map[][]=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[a.<span class="hljs-built_in">length</span>()+<span class="hljs-number">1</span>][b.<span class="hljs-built_in">length</span>()+<span class="hljs-number">1</span>];<span class="hljs-comment">//横竖都空一行</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a.<span class="hljs-built_in">length</span>();i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b.<span class="hljs-built_in">length</span>();j++) &#123;<br><span class="hljs-keyword">if</span>(c[i]==d[j]) &#123;<br>map[i][j]=map[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>map[i][j]=Math.<span class="hljs-built_in">max</span>(map[i<span class="hljs-number">-1</span>][j], map[i][j<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(map[a.<span class="hljs-built_in">length</span>()][b.<span class="hljs-built_in">length</span>()]);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h2><p><a href="https://book.douban.com/subject/26979890/">《算法图解》</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Karatsuba大数乘法</title>
    <link href="/Karatsuba%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    <url>/Karatsuba%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Karatsuba算法是一种快速相乘算法，它由俄罗斯数学家Anatolii Alexeevitch Karatsuba于1960年提出并于1962年发表。普通乘法的复杂度是n2，而Karatsuba算法的复杂度仅为3n^log3≈3n^1.585.</p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>现有两个大数，x，y。<br>首先将x，y分别拆开成为两部分，可得x1，x0，y1，y0。他们的关系如下：<br>x &#x3D; x1 *  10^m+ x0；<br>y &#x3D; y1 * 10^m + y0。其中m为正整数，m &lt; n，且x0，y0 小于 10^m。<br>那么 xy &#x3D; (x1 * 10^m + x0)(y1 * 10^m + y0)<br>&#x3D; <strong>z2 * 10^2m + z1 * 10^m + z0</strong> ，其中：<br>z2 &#x3D; x1 * y1；<br>z1 &#x3D; x1 * y0 + x0 * y1；<br>z0 &#x3D; x0 * y0。<br>此步骤共需4次乘法，但是由Karatsuba改进以后仅需要3次乘法。因为：<br>z1 &#x3D; x1 * y0+ x0 * y1<br>z1 &#x3D; (x1 + x0) * (y1 + y0) - x1 * y1 - x0 * y0，<br>     &#x3D;(x1 + x0) * (y1 + y0)-z2-z0<br>故z1 便可以由一次乘法及加减法得到。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>设x &#x3D; 12345，y&#x3D;6789，令m&#x3D;3。那么有：<br>12345 &#x3D; 12 * 1000 + 345；<br>6789 &#x3D; 6 * 1000 + 789。<br>下面计算：<br>z2 &#x3D; 12 * 6 &#x3D; 72；<br>z0 &#x3D; 345 * 789 &#x3D; 272205；<br>z1 &#x3D; (12 + 345) * (6 + 789) - z2 - z0 &#x3D; 11538。<br>然后我们按照移位公式（xy &#x3D; z2 * 10^(2m) + z1 * 10^(m) + z0）可得：<br>xy &#x3D; 72 * 10002 + 11538 * 1000 + 272205 &#x3D; 83810205。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>这里加减法需要用到BigInteger,因为数字位数足够长的话，用long型最终还是会越界，（不过过瘾的是在jdk8中BigInteger类里面就包含了Karatsuba算法。。。。算了算了，重在了解算法━━(￣ー￣*|||━━）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Karatsuba</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> in.next();<br><span class="hljs-type">String</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> in.next();<br>in.close();<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(x);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(y);<br><span class="hljs-type">String</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> Karatsuba(num1, num2).toString();<br>System.out.println(answer);<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回a*b的结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BigInteger <span class="hljs-title function_">Karatsuba</span><span class="hljs-params">(BigInteger x, BigInteger y)</span> &#123;<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> x;<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> y;<br><span class="hljs-keyword">if</span> (x.toString().length() &lt; <span class="hljs-number">9</span> || y.toString().length() &lt; <span class="hljs-number">9</span>) &#123;<br><br><span class="hljs-keyword">return</span> num1.multiply(num2);<br>&#125;<br><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">halfN</span> <span class="hljs-operator">=</span> Math.max(x.toString().length(), x.toString().length()) / <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 这里不能用字符串的分割，如123456789789456123*12, 12被分割肯定报错</span><br>BigInteger[] a_b = num1.divideAndRemainder(BigInteger.valueOf(<span class="hljs-number">10</span>).pow(halfN));<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> a_b[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 商</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a_b[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 余数</span><br>BigInteger[] c_d = num2.divideAndRemainder(BigInteger.valueOf(<span class="hljs-number">10</span>).pow(halfN));<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> c_d[<span class="hljs-number">0</span>];<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c_d[<span class="hljs-number">1</span>];<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">z2</span> <span class="hljs-operator">=</span> Karatsuba(a, c);<span class="hljs-comment">// a*c              ，运用了分治</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">z1</span> <span class="hljs-operator">=</span> Karatsuba(b, d);<span class="hljs-comment">// b*d</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">step1</span> <span class="hljs-operator">=</span> Karatsuba(a.add(b), c.add(d));<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">z3</span> <span class="hljs-operator">=</span> step1.subtract(z1.add(z2)); <span class="hljs-comment">// (a + b) * (c + d) - z2 - z1</span><br><span class="hljs-keyword">return</span> z2.multiply(BigInteger.valueOf(<span class="hljs-number">10</span>).pow(<span class="hljs-number">2</span> * halfN)).add(z1)<br>.add(z3.multiply(BigInteger.valueOf(<span class="hljs-number">10</span>).pow(halfN)));<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/u010983881/article/details/77503519">大数乘法问题及其高效算法</a></p><p><a href="http://litexy.com/2018/08/23/%E5%A4%A7%E6%95%B4%E6%95%B0%E7%9B%B8%E4%B9%98%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E4%BB%A5%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/">大整数相乘问题总结以及Java实现</a></p><p><a href="https://baike.baidu.com/item/karatsuba%E4%B9%98%E6%B3%95">百科：karatsuba乘法</a></p><p><a href="https://oi-wiki.org/math/bignum/#_11">OI Wiki:高精度计算</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数加减法</title>
    <link href="/%E5%A4%A7%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/"/>
    <url>/%E5%A4%A7%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>大数加减法<strong>模拟竖式计算</strong>的累加累减技巧，在数组中进行进位借位操作。时间复杂度都为O(1)</p><span id="more"></span><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p><img src="/%E5%A4%A7%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/1608087219758.png"></p><p><img src="/%E5%A4%A7%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/1608087226606.png"></p><h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><p><img src="/%E5%A4%A7%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/1608087242949.png"></p><p><img src="/%E5%A4%A7%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/1608087247484.png"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package 高精度;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> test &#123;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>Scanner <span class="hljs-keyword">in</span>=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>String a=<span class="hljs-keyword">in</span>.next();String b=<span class="hljs-keyword">in</span>.next();<br><span class="hljs-keyword">in</span>.<span class="hljs-keyword">close</span>();<br><span class="hljs-type">int</span> longest=Math.max(a.length(), b.length());//最长位数的数字<br><span class="hljs-type">int</span> total[]=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[longest+<span class="hljs-number">2</span>];//结果，考虑进位答案的长度最长为最长的数的长度+<span class="hljs-number">1</span><br><span class="hljs-type">int</span> c[]=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span> [longest+<span class="hljs-number">5</span>];//这里为什么默认加<span class="hljs-number">5</span>，因为可以多余的设置为零，利于核心式的累加累减不会越c，d的界<br><span class="hljs-type">int</span> d[]=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[longest+<span class="hljs-number">5</span>];<br>//a,b反转并存入数组，如<span class="hljs-number">123</span>在数组中为<span class="hljs-number">0321</span>，未填满的数字会默认为零，不会影响下面累加（如<span class="hljs-number">1234</span>+<span class="hljs-number">34</span>，数组中分别为<span class="hljs-number">04321</span> 和<span class="hljs-number">04300</span>）<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a.length();i++) &#123;<br>c[i]=a.charAt(a.length()-i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=b.length();i++) &#123;<br>d[i]=b.charAt(b.length()-i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>//累加核心式<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;total.length<span class="hljs-number">-1</span>;i++) &#123;<br>total[i]+=c[i]+d[i];<br>total[i+<span class="hljs-number">1</span>]+=total[i]/<span class="hljs-number">10</span>;<br>total[i]%=<span class="hljs-number">10</span>;<br>&#125;<br><br>//减法核心式<br>        //这里减法需要a&gt;b，不然需要判断调换位置并在结果加以负号<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for(int i=1;i&lt;total.length-1;i++) &#123;</span><br><span class="hljs-comment">if(c[i]&lt;d[i]) &#123;</span><br><span class="hljs-comment">c[i+1]--;</span><br><span class="hljs-comment">c[i]+=10;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">total[i]=c[i]-d[i];</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>        //去掉前面多余的零<br><span class="hljs-type">int</span> <span class="hljs-keyword">index</span>=total.length<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(total[<span class="hljs-keyword">index</span>]==<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">index</span>&gt;<span class="hljs-number">1</span>) <br><span class="hljs-keyword">index</span><span class="hljs-comment">--;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-keyword">index</span>;i&gt;=<span class="hljs-number">1</span>;i<span class="hljs-comment">--) &#123;</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(total[i]);<br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>&emsp;&emsp; 这里打了两个空格。意味着中文段落空两格</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>&#96;<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="下面都是分割线"><a href="#下面都是分割线" class="headerlink" title="下面都是分割线"></a>下面都是分割线</h2><hr><hr><hr><p>![图片alt](图片地址 ‘’图片title’’)</p><p><a href="http://jianshu.com/">简书</a></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>注意：- + * 跟内容之间都要有一个空格</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p>注意：序号跟内容之间要有空格</p><p>上一级和下一级之间敲三个空格即可</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang">代码...<br>代码...<br>代码...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大数乘法</title>
    <link href="/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    <url>/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>所谓大数相乘（Multiplication algorithm），就是指数字比较大，相乘的结果超出了基本类型的表示范围，所以这样的数不能够直接做乘法运算。这时候可以用小学学的<strong>乘法竖式累加模拟乘法</strong>，结果储存在数组中。时间复杂度为O(2)</p><span id="more"></span><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p><img src="/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/1608038121960-166824117078416.png"></p><p><img src="/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/1608038128316-166824128569317.png"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package 高精度;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * https://www.bilibili.com/video/BV1LA411v7mt?p=3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> multiply &#123;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>Scanner <span class="hljs-keyword">in</span> = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>String a = <span class="hljs-keyword">in</span>.next();<br>String b = <span class="hljs-keyword">in</span>.next();<br><span class="hljs-keyword">in</span>.<span class="hljs-keyword">close</span>();<br><span class="hljs-type">int</span> total[] = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[a.length() + b.length() + <span class="hljs-number">1</span>]; // 结果<br>// 把最后一个数字存储到下标为一里<br><span class="hljs-type">int</span>[] c = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[a.length() + <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span>[] d = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[b.length() + <span class="hljs-number">1</span>];<br>// 字符串的反转<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length(); i++) &#123;<br>c[a.length() - i] = a.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>; // <span class="hljs-number">321</span>会变成数组中的<span class="hljs-number">0123</span>形式<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; b.length(); j++) &#123;<br>d[b.length() - j] = b.charAt(j) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>// 核心代码<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= a.length(); i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= b.length(); j++) &#123;<br>total[i + j - <span class="hljs-number">1</span>] += c[i] * d[j];<br>total[i + j] += total[i + j - <span class="hljs-number">1</span>] / <span class="hljs-number">10</span>; // 所进的位数（不可用c[i]*d[j]/<span class="hljs-number">10</span>）<br>total[i + j - <span class="hljs-number">1</span>] %= <span class="hljs-number">10</span>; // 进位后还剩的<br><br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-keyword">index</span> = total.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (total[<span class="hljs-keyword">index</span>] == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">index</span> &gt; <span class="hljs-number">1</span>) // 这范围多调试，默认答案结尾为total[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">index</span><span class="hljs-comment">--; // 把前面多于的零去掉</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-keyword">index</span>; i &gt;= <span class="hljs-number">1</span>; i<span class="hljs-comment">--) &#123;</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(total[i]);<br>&#125;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome中请求头转为字典类型</title>
    <link href="/Chrome%E4%B8%AD%E8%AF%B7%E6%B1%82%E5%A4%B4%E8%BD%AC%E4%B8%BA%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/"/>
    <url>/Chrome%E4%B8%AD%E8%AF%B7%E6%B1%82%E5%A4%B4%E8%BD%AC%E4%B8%BA%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>请求头一个一个加引号太麻烦了，python处理为字典型数据</p><span id="more"></span><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># 使用三引号将浏览器复制出来的requests headers参数赋值给一个变量</span><br>headers = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8</span><br><span class="hljs-string">accept-encoding: gzip, deflate, br</span><br><span class="hljs-string">accept-language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="hljs-string">dnt: 1</span><br><span class="hljs-string">referer: https://www.manhuagui.com/</span><br><span class="hljs-string">sec-fetch-dest: image</span><br><span class="hljs-string">sec-fetch-mode: no-cors</span><br><span class="hljs-string">sec-fetch-site: cross-site</span><br><span class="hljs-string">user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br> <br><span class="hljs-comment"># 去除参数头尾的空格并按换行符分割</span><br>headers = headers.strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br> <br><span class="hljs-comment"># 使用字典生成式将参数切片重组，并去掉空格，处理带协议头中的://</span><br>headers = &#123;x.split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>].strip(): (<span class="hljs-string">&quot;&quot;</span>.join(x.split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>:])).strip().replace(<span class="hljs-string">&#x27;//&#x27;</span>, <span class="hljs-string">&quot;://&quot;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> headers&#125;<br> <br><span class="hljs-comment"># 使用json模块将字典转化成json格式打印出来</span><br><span class="hljs-built_in">print</span>(json.dumps(headers,indent=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="处理结果"><a href="#处理结果" class="headerlink" title="处理结果"></a>处理结果</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;accept&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image/avif,image/webp,image/apng,image/*,*/*;q=0.8&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;accept-encoding&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gzip, deflate, br&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;accept-language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;dnt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;referer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.manhuagui.com/&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;sec-fetch-dest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;sec-fetch-mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;no-cors&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;sec-fetch-site&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-site&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;user-agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫画柜《鬼灭之刃》爬取</title>
    <link href="/%E6%BC%AB%E7%94%BB%E6%9F%9C%E3%80%8A%E9%AC%BC%E7%81%AD%E4%B9%8B%E5%88%83%E3%80%8B%E7%88%AC%E5%8F%96/"/>
    <url>/%E6%BC%AB%E7%94%BB%E6%9F%9C%E3%80%8A%E9%AC%BC%E7%81%AD%E4%B9%8B%E5%88%83%E3%80%8B%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<p>漫画柜没有下载功能，想下载里面的漫画只有一张张自己下载了</p><ul><li>设置chrome浏览器无界面模式，更节省内存资源</li><li>os库判断路径是否存在，不存在则创建</li><li>多线程下载<span id="more"></span></li></ul><h2 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h2><ol><li><p>判断是否全为静态内容<br> a. 根据network中那个最大的html文件是否包含所需网页内容（直接美丽汤解析）</p></li><li><p>那就是动态内容（优先selenium爬取）<br> a. 所需内容文字，图片，视频地址是否在XHR 中（可能需要解密）<br> b. 以上都不是一定在触发某个js在加载内容在html中，（需要解密）</p></li></ol><h2 id="网站结构"><a href="#网站结构" class="headerlink" title="网站结构"></a>网站结构</h2><p>每篇漫画详情页可以得到所有章节地址，根据章节地址进入浏览漫画界面，分析html中不能得到图片src，xhr也没有，所以为js加载，获取图片这一部分通过浏览器爬取真实地址（是否也可以直接得到二进制内容灌进文件？）</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup           <span class="hljs-comment">#美丽汤</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re <span class="hljs-keyword">as</span> reg                <span class="hljs-comment">#正则</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver          <span class="hljs-comment">#无头浏览器</span><br><span class="hljs-keyword">import</span> os                               <span class="hljs-comment">#文件路径的操作</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool            <span class="hljs-comment">#多线程</span><br><br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options     <span class="hljs-comment">#隐藏浏览器界面</span><br><br><span class="hljs-comment">#获取回的所有地址与题目</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_chapter</span>():<br>    <span class="hljs-keyword">try</span>:<br>        src=<span class="hljs-string">&#x27;https://www.manhuagui.com/comic/19430/&#x27;</span><br>        header=&#123;<span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span>&#125;<br>        re=requests.get(url=src,headers=header)<br>        html=re.text<br>        <span class="hljs-comment">#判断是否联通</span><br>        <span class="hljs-built_in">print</span>(re.status_code)                   <br>        soup=BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        haha=soup.find_all(class_=<span class="hljs-string">&quot;chapter-list cf mt10&quot;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> haha.find_all(name=<span class="hljs-string">&#x27;li&#x27;</span>):<br>            chapter=i.a[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            chapterTitle=i.a[<span class="hljs-string">&#x27;title&#x27;</span>]<br>            <span class="hljs-comment">#只能用在for中调用是作为迭代器</span><br>            <span class="hljs-keyword">yield</span>&#123;                          <br>                <span class="hljs-string">&#x27;chapter&#x27;</span>:chapter,<br>                <span class="hljs-string">&#x27;title&#x27;</span>:chapterTitle<br>            &#125;<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取章节地址出错&#x27;</span>)<br><br><span class="hljs-comment">#获取某回中共有多少张图片，并得到每张的图片页面（不是真实地址）地址去获取他</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_detail</span>(<span class="hljs-params">url,title</span>):<br>    src=<span class="hljs-string">&#x27;https://www.manhuagui.com/&#x27;</span>+url<br>    header=&#123;<span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        re=requests.get(url=src,headers=header)<br>        html=re.text<br>        soup=BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        headerTitle=soup.find_all(class_=<span class="hljs-string">&quot;w980 title&quot;</span>)[<span class="hljs-number">0</span>]<br>        page=headerTitle.find_all(name=<span class="hljs-string">&#x27;span&#x27;</span>)[<span class="hljs-number">1</span>]<br>        <span class="hljs-comment">#正则的查找</span><br>        dd=reg.findall(<span class="hljs-string">r&quot;\d+&quot;</span>,page.text)[<span class="hljs-number">0</span>]                     <br>        num=<span class="hljs-built_in">int</span>(dd)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,num+<span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>()<br>            url=src+<span class="hljs-string">&#x27;#p=&#x27;</span>+<span class="hljs-built_in">str</span>(i)    <span class="hljs-comment">#图片页面地址</span><br>            get_img(url,title)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取图片失败&quot;</span>)<br>    <br><span class="hljs-comment">#通过无头浏览器加载动态元素取得真实地址</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img</span>(<span class="hljs-params">url,title</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(url)<br>        <span class="hljs-comment">#设置chrome浏览器无界面模式</span><br>        chrome_options=Options()<br>        chrome_options.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<br>        bro = webdriver.Chrome(chrome_options=chrome_options)<br>        bro.get(url)<br>        html=bro.page_source    <span class="hljs-comment">#页面所有元素加载完成后获取源码，这里写的美中不足，改进当图片地址得到后就自动获取源码，不用等全部加载完</span><br>        bro.close()<br>        soup=BeautifulSoup(html,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        <span class="hljs-comment">#获得属性</span><br>        src=soup.find(<span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;mangaFile&quot;</span>)[<span class="hljs-string">&#x27;src&#x27;</span>]        <span class="hljs-comment">#获取到真实图片地址</span><br>        save_img(src,title)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取真实地址失败&quot;</span>)<br><br>bigbig=<span class="hljs-number">0</span><br><span class="hljs-comment"># 保存到文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_img</span>(<span class="hljs-params">src,title</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#这里需要使用global下面才能自加一</span><br>        <span class="hljs-keyword">global</span> bigbig<br>        path=<span class="hljs-string">&#x27;D:\download\鬼灭之刃\&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(title)<br>        <span class="hljs-comment">#os库判断路径是否存在，不存在则创建</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):<br>            os.makedirs(<span class="hljs-string">&#x27;D:\download\鬼灭之刃\&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(title))  <br>        path=<span class="hljs-string">&#x27;&#123;&#125;\&#123;&#125;.jpeg&#x27;</span>.<span class="hljs-built_in">format</span>(path,bigbig) <br>        bigbig=bigbig+<span class="hljs-number">1</span><br>        header=&#123;<br>        <span class="hljs-string">&quot;accept&quot;</span>: <span class="hljs-string">&quot;image/avif,image/webp,image/apng,image/*,*/*;q=0.8&quot;</span>,<br>        <span class="hljs-string">&quot;accept-encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br&quot;</span>,<br>        <span class="hljs-string">&quot;accept-language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;</span>,<br>        <span class="hljs-string">&quot;dnt&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-string">&quot;referer&quot;</span>: <span class="hljs-string">&quot;https://www.manhuagui.com/&quot;</span>,<br>        <span class="hljs-string">&quot;sec-fetch-dest&quot;</span>: <span class="hljs-string">&quot;image&quot;</span>,<br>        <span class="hljs-string">&quot;sec-fetch-mode&quot;</span>: <span class="hljs-string">&quot;no-cors&quot;</span>,<br>        <span class="hljs-string">&quot;sec-fetch-site&quot;</span>: <span class="hljs-string">&quot;cross-site&quot;</span>,<br>        <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span> <br>        &#125;<br>        <span class="hljs-built_in">print</span>(src)<br>        re=requests.get(url=src,headers=header)<br>        content=re.content<br>        <span class="hljs-comment">#文件写入二进制</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> haha:<br>            haha.write(content)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok!!!!&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;保存到文件时出错&quot;</span>)<br><br>booksrc=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> get_chapter():<br>    booksrc.append(i)<br><br><span class="hljs-comment">#丢入某回的地址</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">i</span>):<br>    src=i.get(<span class="hljs-string">&#x27;chapter&#x27;</span>)<br>    title=i.get(<span class="hljs-string">&#x27;title&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在获取&#123;&#125;     &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(title,src))<br>    get_detail(src,title)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#多线程</span><br>    pool=Pool(processes=<span class="hljs-number">4</span>)   <span class="hljs-comment">#20个进程调用获得所有书</span><br>    group=booksrc  <span class="hljs-comment">#a列表是网站所有书的链接地址</span><br>    <span class="hljs-built_in">print</span>(group)<br>    pool.<span class="hljs-built_in">map</span>(main,group)<br>    <br></code></pre></td></tr></table></figure><p>爬取巨慢，完成图像</p><p><img src="/%E6%BC%AB%E7%94%BB%E6%9F%9C%E3%80%8A%E9%AC%BC%E7%81%AD%E4%B9%8B%E5%88%83%E3%80%8B%E7%88%AC%E5%8F%96/1607177847912.png"></p><p>有待优化：当浏览器加载到某个元素后就可以结束得到源码，或者渲染出图片后就以二进制保存</p>]]></content>
    
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《钢之炼金术师》</title>
    <link href="/%E3%80%8A%E9%92%A2%E4%B9%8B%E7%82%BC%E9%87%91%E6%9C%AF%E5%B8%88%E3%80%8B/"/>
    <url>/%E3%80%8A%E9%92%A2%E4%B9%8B%E7%82%BC%E9%87%91%E6%9C%AF%E5%B8%88%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>人没有什么牺牲的话就什么都得不到，</p><span id="more"></span><p>为了得到什么东西，就需要付出同等的代价，</p><p>这就是炼金术的等价交换原则.</p><hr><p><img src="/%E3%80%8A%E9%92%A2%E4%B9%8B%E7%82%BC%E9%87%91%E6%9C%AF%E5%B8%88%E3%80%8B/1608289296795.webp" alt="休斯准将"></p>]]></content>
    
    
    
    <tags>
      
      <tag>小记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疑邻盗斧</title>
    <link href="/%E7%96%91%E9%82%BB%E7%9B%97%E6%96%A7/"/>
    <url>/%E7%96%91%E9%82%BB%E7%9B%97%E6%96%A7/</url>
    
    <content type="html"><![CDATA[<p>人有亡斧者，意其邻之子。</p><span id="more"></span><p>视其行步，窃斧也；</p><p>颜色，窃斧也；</p><p>言语，窃斧也；</p><p>动作态度，无为而不窃斧也。</p>]]></content>
    
    
    
    <tags>
      
      <tag>小记</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是值传递，什么是引用传递。为什么说Java中只有值传递。</title>
    <link href="/%E5%80%BC%E4%BC%A0%E9%80%92/"/>
    <url>/%E5%80%BC%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<p>关于这个问题，在StackOverflow上也引发过广泛的讨论，看来很多程序员对于这个问题的理解都不尽相同，甚至很多人理解的是错误的。还有的人可能知道Java中的参数传递是值传递，但是说不出来为什么。</p><p>在开始深入讲解之前，有必要纠正一下大家以前的那些错误看法了。如果你有以下想法，那么你有必要好好阅读本文。</p><p>错误理解一：值传递和引用传递，区分的条件是传递的内容，如果是个值，就是值传递。如果是个引用，就是引用传递。</p><p>错误理解二：Java是引用传递。</p><p>错误理解三：传递的参数如果是普通类型，那就是值传递，如果是对象，那就是引用传递</p><span id="more"></span><h2 id="实参与形参"><a href="#实参与形参" class="headerlink" title="实参与形参"></a>实参与形参</h2><p>我们都知道，在Java中定义方法的时候是可以定义参数的。比如Java中的main方法：</p><p><code>public static void main(String[] args)</code><br>这里面的args就是参数。参数在程序语言中分为形式参数和实际参数。</p><p>形式参数：是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数。</p><p>实际参数：在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”。</p><p>简单举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <span class="hljs-title class_">ParamTest</span> pt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamTest</span>();<br>    pt.<span class="hljs-title function_">sout</span>(<span class="hljs-string">&quot;Hollis&quot;</span>);<span class="hljs-comment">//实际参数为 Hollis</span><br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sout</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123; <span class="hljs-comment">//形式参数为 name</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>实际参数是调用有参方法的时候真正传递的内容，而形式参数是用于接收实参内容的参数。</p><h2 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h2><p>上面提到了，当我们调用一个有参函数的时候，会把实际参数传递给形式参数。但是，在程序语言中，这个传递过程中传递的两种情况，即值传递和引用传递。我们来看下程序语言中是如何定义和区分值传递和引用传递的。</p><p>值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><p>有了上面的概念，然后大家就可以写代码实践了，来看看Java中到底是值传递还是引用传递 ，于是，最简单的一段代码出来了：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>    ParamTest pt = <span class="hljs-keyword">new</span> ParamTest();<br> <br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">10</span>;<br>    pt.pass(i );<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;print in main , i is &quot;</span> + i);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pass</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> j</span>)</span> &#123;<br>    j = <span class="hljs-number">20</span>;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;print in pass , j is &quot;</span> + j);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，我们在pass方法中修改了参数j的值，然后分别在pass方法和main方法中打印参数的值。输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">pass</span> , j <span class="hljs-keyword">is</span> <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> main , i <span class="hljs-keyword">is</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>可见，pass方法内部对name的值的修改并没有改变实际参数i的值。那么，按照上面的定义，有人得到结论：Java的方法传递是值传递。</p><p>但是，很快就有人提出质疑了（哈哈，所以，不要轻易下结论咯。）。然后，他们会搬出以下代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>    ParamTest pt = <span class="hljs-built_in">new</span> ParamTest();<br> <br>    <span class="hljs-keyword">User</span> hollis = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    hollis.setName(&quot;Hollis&quot;);<br>    hollis.setGender(&quot;Male&quot;);<br>    pt.pass(hollis);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;print in main , user is &quot; + hollis);<br>&#125;<br> <br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> pass(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>    <span class="hljs-keyword">user</span>.setName(&quot;hollischuang&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;print in pass , user is &quot; + <span class="hljs-keyword">user</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同样是一个pass方法，同样是在pass方法内修改参数的值。输出结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> pass ,<span class="hljs-built_in"> user </span>is User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;hollischuang&#x27;</span>, <span class="hljs-attribute">gender</span>=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> main ,<span class="hljs-built_in"> user </span>is User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;hollischuang&#x27;</span>, <span class="hljs-attribute">gender</span>=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>经过pass方法执行后，实参的值竟然被改变了，那按照上面的引用传递的定义，实际参数的值被改变了，这不就是引用传递了么。于是，根据上面的两段代码，有人得出一个新的结论：Java的方法中，在传递普通类型的时候是值传递，在传递对象类型的时候是引用传递。</p><p>但是，这种表述仍然是错误的。不信你看下面这个参数类型为对象的参数传递：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>    ParamTest pt = <span class="hljs-built_in">new</span> ParamTest();<br> <br>    String <span class="hljs-type">name</span> = &quot;Hollis&quot;;<br>    pt.pass(<span class="hljs-type">name</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;print in main , name is &quot; + <span class="hljs-type">name</span>);<br>&#125;<br> <br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> pass(String <span class="hljs-type">name</span>) &#123;<br>    <span class="hljs-type">name</span> = &quot;hollischuang&quot;;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;print in pass , name is &quot; + <span class="hljs-type">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码输出结果为</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">pass</span> , <span class="hljs-keyword">name</span> is hollischuang<br><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> main , <span class="hljs-keyword">name</span> is Hollis<br></code></pre></td></tr></table></figure><p>这又作何解释呢？同样传递了一个对象，但是原始参数的值并没有被修改，难道传递对象又变成值传递了？</p><h2 id="Java中的值传递"><a href="#Java中的值传递" class="headerlink" title="Java中的值传递"></a>Java中的值传递</h2><p>上面，我们举了三个例子，表现的结果却不一样，这也是导致很多初学者，甚至很多高级程序员对于Java的传递类型有困惑的原因。</p><p>其实，我想告诉大家的是，上面的概念没有错，只是代码的例子有问题。来，我再来给大家画一下概念中的重点，然后再举几个真正恰当的例子。</p><p>值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><p>那么，我来给大家总结一下，值传递和引用传递之前的区别的重点是什么。</p><p><img src="/%E5%80%BC%E4%BC%A0%E9%80%92/1606784245186.png"></p><p>我们上面看过的几个pass的例子中，都只关注了实际参数内容是否有改变。如传递的是User对象，我们试着改变他的name属性的值，然后检查是否有改变。其实，在实验方法上就错了，当然得到的结论也就有问题了。</p><p>为什么说实验方法错了呢？这里我们来举一个形象的例子。再来深入理解一下值传递和引用传递，然后你就知道为啥错了。</p><p><strong>你有一把钥匙，当你的朋友想要去你家的时候，如果你直接把你的钥匙给他了，这就是引用传递。这种情况下，如果他对这把钥匙做了什么事情，比如他在钥匙上刻下了自己名字，那么这把钥匙还给你的时候，你自己的钥匙上也会多出他刻的名字.</strong></p><p><strong>你有一把钥匙，当你的朋友想要去你家的时候，你复刻了一把新钥匙给他，自己的还在自己手里，这就是值传递。这种情况下，他对这把钥匙做什么都不会影响你手里的这把钥匙。</strong></p><p><strong>但是，不管上面哪种情况，你的朋友拿着你给他的钥匙，进到你的家里，把你家的电视砸了。那你说你会不会受到影响？而我们在pass方法中，改变user对象的name属性的值的时候，不就是在“砸电视”么。你改变的不是那把钥匙，而是钥匙打开的房子.</strong></p><p>还拿上面的一个例子来举例，我们真正的改变参数，看看会发生什么?</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>    ParamTest pt = <span class="hljs-built_in">new</span> ParamTest();<br> <br>    <span class="hljs-keyword">User</span> hollis = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    hollis.setName(&quot;Hollis&quot;);<br>    hollis.setGender(&quot;Male&quot;);<br>    pt.pass(hollis);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;print in main , user is &quot; + hollis);<br>&#125;<br> <br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> pass(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>    <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    <span class="hljs-keyword">user</span>.setName(&quot;hollischuang&quot;);<br>    <span class="hljs-keyword">user</span>.setGender(&quot;Male&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;print in pass , user is &quot; + <span class="hljs-keyword">user</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中，我们在pass方法中，改变了user对象，输出结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> pass ,<span class="hljs-built_in"> user </span>is User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;hollischuang&#x27;</span>, <span class="hljs-attribute">gender</span>=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br>   <span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> main ,<span class="hljs-built_in"> user </span>is User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;Hollis&#x27;</span>, <span class="hljs-attribute">gender</span>=<span class="hljs-string">&#x27;Male&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>我们来画一张图，看一下整个过程中发生了什么，然后我再告诉你，为啥Java中只有值传递。<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92/1606784851190.png"></p><p>稍微解释下这张图，当我们在main中创建一个User对象的时候，在堆中开辟一块内存，其中保存了name和gender等数据。然后hollis持有该内存的地址0x123456（图1）。</p><p>当尝试调用pass方法，并且hollis作为实际参数传递给形式参数user的时候，会把这个地址0x123456交给user，这时，user也指向了这个地址（图2）。</p><p>然后在pass方法内对参数进行修改的时候，即user &#x3D; new User();，会重新开辟一块0X456789的内存，赋值给user。后面对user的任何修改都不会改变内存0X123456的内容（图3）。</p><p>上面这种传递是什么传递？肯定不是引用传递，如果是引用传递的话，在执行user &#x3D; new User();的时候，实际参数的引用也应该改为指向0X456789，但是实际上并没有。</p><p>通过概念我们也能知道，这里是把实际参数的引用的地址<strong>复制</strong>了一份，传递给了形式参数。<strong>所以，上面的参数其实是值传递，把实参对象引用的地址当做值传递给了形式参数。</strong></p><p>我们再来回顾下之前的那个“砸电视”的例子，看那个例子中的传递过程发生了什么。<br><img src="/%E5%80%BC%E4%BC%A0%E9%80%92/1606784906083.png"></p><p>同样的，在参数传递的过程中，实际参数的地址0X1213456被拷贝给了形参，只是，在这个方法中，并没有对形参本身进行修改，而是修改的形参持有的地址中存储的内容。</p><p><strong>所以，值传递和引用传递的区别并不是传递的内容。而是实参到底有没有被复制一份给形参。</strong>在判断实参内容有没有受影响的时候，要看传的的是什么，如果你传递的是个地址，那么就看这个地址的变化会不会有影响，而不是看地址指向的对象的变化。就像钥匙和房子的关系。</p><p>那么，既然这样，为啥上面同样是传递对象，传递的String对象和User对象的表现结果不一样呢？我们在pass方法中使用name &#x3D; “hollischuang”;试着去更改name的值，阴差阳错的直接改变了name的引用的地址。因为这段代码，会new一个String，再把引用交给name，即等价于：</p><p><code>name = new String(&quot;hollischuang&quot;);</code><br>而原来的那个”Hollis”字符串还是由实参持有着的，所以，并没有修改到实际参数的值。</p><p><img src="/%E5%80%BC%E4%BC%A0%E9%80%92/1606785028709.png"></p><p><strong>所以说，Java中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无论是值传递还是引用传递，其实都是一种求值策略(Evaluation strategy)。在求值策略中，还有一种叫做按共享传递(call by sharing)。其实Java中的参数传递严格意义上说应该是按共享传递。</p><p>按共享传递，是指在调用函数时，传递给函数的是实参的地址的拷贝（如果实参在栈中，则直接拷贝该值）。在函数内部对参数进行操作时，需要先拷贝的地址寻找到具体的值，再进行操作。如果该值在栈中，那么因为是直接拷贝的值，所以函数内部对参数进行操作不会对外部变量产生影响。如果原来拷贝的是原值在堆中的地址，那么需要先根据该地址找到堆中对应的位置，再进行操作。因为传递的是地址的拷贝所以函数内对值的操作对外部变量是可见的。</p><p>简单点说，Java中的传递，是值传递，而这个值，实际上是对象的引用。</p><p><strong>而按共享传递其实只是按值传递的一个特例罢了</strong>。所以我们可以说Java的传递是按共享传递，或者说Java中的传递是值传递。</p><p> <strong>转载自：</strong> <code>Hollis </code>公众号</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>习惯的力量</title>
    <link href="/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/"/>
    <url>/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>两条小鱼在游泳，恰好看到一条大鱼在往另一个方向游，这条大鱼对这群小鱼点头致意说，‘早上好，孩子们，今天的水怎样？’两条小鱼继续往前游了一点儿，最后其中一条看着另一条说，‘水是什么东西啊？’”</p><p>水就是习惯，我们每天都被不假思索的选择和无形的决定包围着，而你只要看看它们，你就会发现它们….</p><span id="more"></span><h2 id="个体的习惯"><a href="#个体的习惯" class="headerlink" title="个体的习惯"></a>个体的习惯</h2><p>你早上起来做的第一件事是什么？是去洗澡、查邮件，还是从厨房灶台那里抓个甜甜圈？你是洗脸前刷牙还是洗脸后刷牙？是先系左脚的鞋带还是右脚的鞋带？你在出门的时候会跟孩子们说什么？你开车走哪条路上班？你坐到办公室时，是先看邮件，还是先和同事聊天，又或者直接写备忘录？中午吃沙拉还是汉堡包？回家时，你是穿上跑鞋跑步，还是倒杯酒，在电视机前吃晚餐？威廉·詹姆斯在1892年曾这样写道：“所有人的生活都有其明确的形态，但其实都是由各种各样的习惯构成的。</p><!-- more --><p>你可以将人的大脑想象成一颗洋葱，由一层又一层的细胞组成，然后是离头皮最近的外层部分，从进化的角度来看，这部分通常是最近才产生的。你要是梦见新发明或者被朋友的笑话逗乐，这是你大脑的外层部分在工作，也是思维产生的最复杂的地方。<br>在大脑深处，靠近脑干，也就是脊柱和大脑结合的位置，这里有着更老、更原始的结构，它们控制着你的自动行为，比如呼吸和吞咽，有人从灌木丛后面跳出来时，你的那种惊吓的反应也是源自这里。大脑骨的中心是一个高尔夫球大小的组织块，这个组织块与在鱼类、爬行动物或哺乳动物脑部的一样，这就是基底核，是细胞组成的一个椭圆形组织。习惯就形成于基底核中。<br>有人把说我们的眼睛比喻成照相机的话，相当于有5.6亿像素，研究还表明人体每平方厘米的皮肤上至少有200个传感器。再想到现代工业的结晶自动驾驶汽车，整辆车还不到200个传感器就越来越惊叹大脑的神奇了。是大脑的强大的后台处理才能让我们在浩如烟海的信息中提取出丝丝缕缕对我们有用的信息让我们能正常刷牙洗脸。习惯也是后台的一种表现！</p><blockquote><p>习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那大脑就会让几乎所有的惯常行为活动变成习惯，因为习惯能让大脑得到更多的休息。这种省力的本能是一大优势。工作高效的大脑需要的空间更少，人的头部也会更小，这样的孩子在出生时更容易，因此也会降低婴儿和母亲的死亡率。同样，这样的大脑还能让我们不用再思考基本的行为，比如走路以及选择吃什么，所以人就有更多的脑力来发明长矛、灌溉系统，最终发明出飞机和电视游戏。但保留脑力也是件麻烦的事，因为如果人的大脑在错误的时候停工，我们就可能错过重要的事情，比如没有发现躲在灌木丛中的食肉动物或者上街的时候无法躲过超速的汽车</p></blockquote><hr><h2 id="习惯的利用"><a href="#习惯的利用" class="headerlink" title="习惯的利用"></a>习惯的利用</h2><ol><li>早期的牙膏是没有丝丝凉凉的感觉的，后来一厂商添加了薄荷在里面，顿时占领了当时的市场，这是利用了公众习惯喜欢刺激感的东西</li><li>超市利用顾客进入超市后习惯右转而把利润最高的商品摆放在右边货架，利用顾客排队收银结账时感到无聊的习惯把小物品（糖果，玩具，避孕套….）摆在收银处</li><li>淘宝，京东等通过分析顾客的购买习惯可以精确的刻画用户画像（他们比你自己还要了解你自己）,通过女人购买物品的习惯偏移分析来为她发放纸尿裤优惠券（如一个孕妇孕前20周左右会购买宽松衣服，10周左右会购买很多维生素剂片，他们可以精确分析到你的临盆日期）</li><li>政府依靠公众的习惯进行社会制度的改革，如宣言学习雷锋运动，让公众学习奉献</li><li>跑步的习惯可以让你邂逅漂亮妹子，总成大器😂</li></ol><hr><h2 id="改变习惯"><a href="#改变习惯" class="headerlink" title="改变习惯"></a>改变习惯</h2><p>赌徒倾家荡产，身子越来越虚（(＠_＠)….  ,学习越来越不用心….，游戏越来越上瘾….是该农奴干地主了了！！<br>但是老话说旧习难改。。。。<br>其实也不尽然！</p><blockquote><p>必须有意识地去努力寻找驱动着你的习惯每天发生的暗示和奖赏，并且找到它们的替代品。你必须知道自己可以控制习惯，也有足够的意识去使用习惯</p></blockquote><h2 id="改变可能不会很快，而且并不总是容易。但只要付出时间和努力，几乎所有的习惯都是可以改变的。理解框架：找出惯常行为用各种奖赏进行试验将暗示隔离出来制订计划"><a href="#改变可能不会很快，而且并不总是容易。但只要付出时间和努力，几乎所有的习惯都是可以改变的。理解框架：找出惯常行为用各种奖赏进行试验将暗示隔离出来制订计划" class="headerlink" title="改变可能不会很快，而且并不总是容易。但只要付出时间和努力，几乎所有的习惯都是可以改变的。理解框架：找出惯常行为用各种奖赏进行试验将暗示隔离出来制订计划"></a>改变可能不会很快，而且并不总是容易。但只要付出时间和努力，几乎所有的习惯都是可以改变的。<br>理解框架：<br>找出惯常行为<br>用各种奖赏进行试验<br>将暗示隔离出来<br>制订计划</h2><h3 id="第一步：找出惯常行为"><a href="#第一步：找出惯常行为" class="headerlink" title="第一步：找出惯常行为"></a>第一步：找出惯常行为</h3><blockquote><p>第一章中麻省理工学院的研究人员在每种习惯中发现了一种简单的神经逻辑回路，这种回路包含三部分：暗示、惯常行为和奖赏。<br><img src="/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/1606204423281.jpg" title="习惯的结构"><br>要了解自己的习惯，你得找到回路的各个部分。一旦发现行为中存在的习惯回路，你就能想办法用新的惯常行为取代旧的坏习惯。<br>比如你有一个坏习惯，就像我为撰写本书做研究时的习惯一样，喜欢每天下午去咖啡厅买巧克力豆饼干。假设这个习惯让你胖了几磅，或者说这个习惯实际上让你胖了8磅，然后你妻子针对你的体重说了一些让你不爽的话。于是你总是强迫自己停止吃饼干，但徒劳无益，你觉得很累，你甚至还在电脑上贴了即时贴，写着再也不吃饼干了。但是每天下午你都会当这张即时贴不存在，照样晃悠着去咖啡厅，然后买饼干，接着在收银台附近与同事闲聊时就开始吃。吃的时候感觉很好，吃完就难受了。你跟自己发誓，说你明天会用全部的意志力来抵制饼干的诱惑，明天会是新的一天。<br>不过第二天这个习惯照旧。<br>你怎样开始分析，然后改变自己的行为呢？<br>就是要弄清楚自己的习惯回路。第一步是找出自己的惯常行为。饼干的案例和大部分习惯一样，其中的惯常行为几乎是最明显的，是你想要改变的行为。你的惯常行为是下午从桌子旁起来，走到咖啡厅，买巧克力豆饼干，然后在和朋友聊天的时候吃，那么这就是你加入到习惯回路中的东西。<br>接着，还有一些较为隐蔽的问题：这一惯常行为的暗示是什么？是饥饿吗？是无聊吗？是因为低血糖？还是说你在全身心投入到下一件工作前，需要休息下，而吃饼干就是休息的一种方式？<br>那么奖赏是什么？是饼干吗？还是换了环境？或者是暂时散散心？又或者是与同事聊天？也有可能通过突然摄入那么多糖获得了能量充沛的感觉?<br>要弄清楚究竟怎么回事，你需要做点儿实验。</p></blockquote><h3 id="第二步：用奖赏做实验"><a href="#第二步：用奖赏做实验" class="headerlink" title="第二步：用奖赏做实验"></a>第二步：用奖赏做实验</h3><blockquote><p>奖赏的影响力很大，因为它们能满足人的渴求感。但人往往意识不到在背后驱动我们行为的渴求。比如，纺必适营销团队发现消费者在每次例行清洁后需要新鲜的气味，他们找到了一种任何人都不曾意识到的渴求。其中的奥秘就在眼前。回想一下，就会发现大多数渴求都非常明显，但我们就在它们面前却视而不见，这实在令人难以置信。<br><img src="/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/1606204444674.jpg"><br>为了确定是哪些渴求在驱动习惯，就要用不同的奖赏做实验。这也许会花几天、一周或者更长的时间。在这段时间里，你在做出切实的改变时不应该感到任何压力，把自己想象成数据收集阶段的科学家就行。<br>在实验的第一天，你会非常想去咖啡厅买饼干，那么你得调整一下你的惯常行为，这样会得到不同的奖赏。比如，你没有去咖啡厅，而是在社区附近散步，然后回到办公桌前，什么也没吃。第二天，你去咖啡厅买了个甜甜圈，或者糖果条，然后回桌子那儿吃。第三天，你去了咖啡厅，买了个苹果，然后和朋友聊天时吃了。接着，你试着改成麦咖啡，然后你都不去咖啡厅了，而是到朋友的办公室闲聊几分钟，然后回去工作。<br>这下你应该懂了。你选择用什么行为取代买饼干并不重要，重要的是要测试各种假设，确定哪种渴求在驱动你的惯常行为。你是因为渴求饼干本身，还是想休息一下再工作？如果是饼干本身，那是因为你饿了吗？（如果是这样，苹果应该也可以满足你。）<br>或者是因为你需要饼干提供的能量？（如果是这样，咖啡应该可以满足你。）或者，你走去咖啡厅是因为你想找人闲聊，而饼干不过是个比较好的借口？（要是这样，走到别人办公桌前，和对方闲聊几分钟，应该能满足你的冲动。)<br>等你试了4~5个不同的奖赏后，你就可以用老办法寻找其中的规律：每次活动之后，拿支笔在纸上写下你一回到桌前就想到的头三样东西。可以是你的情绪或者思维，或者写下对自己感觉的想法，要么就写出头三个你想到的词。<br>然后，在手表或电脑上设个15分钟后就响的闹钟。等到闹钟响了，你就问自己是否还有吃饼干的冲动。写下三样东西很重要，就算写下的词毫无意义，你也要写，原因有两个。其一，这样做会迫使你此刻意识到自己在想什么或者感觉如何。比如第三章中咬指甲的曼蒂，她就拿着一本写满了严厉措辞的笔记本，为的就是让她意识到自己习惯的冲动，所以写下三个词会让她临时注意到这一点。其二，研究表明，写几个单词有助于你今后回忆起自己当时在想什么。在实验结束时，如果你回顾自己的笔记，就能很容易记起自己当时的所思所想，在那一刻究竟是什么感觉。因为你写下的东西会帮助你进行全面的回忆。<br>那为什么闹钟设的时间是15分钟后呢？因为这些测试的重点是找出你渴求的奖赏是什么。如果吃掉甜甜圈15分钟后，你还是有冲动起身去咖啡厅，那驱动你习惯的就不是对糖的渴求。如果在和同事闲聊之后，你还是想吃饼干，那么与人接触的需求就不是你吃饼干行为的诱因。<br>从另一个角度看，如果和朋友聊天的15分钟后，你发现自己可以轻松地回去工作，那么你就找到了习惯回路中的奖赏，也就是临时散散心，和人聊聊天。这就是你的习惯想要满足的东西。<br>通过用不同的奖赏进行试验，你可以将你实际渴求的对象分隔出来，这就是重塑习惯最基本的要素。<br>一旦你找出惯常行为和奖赏，剩下要做的就是找到暗示了</p></blockquote><h3 id="第三步：分隔出暗示"><a href="#第三步：分隔出暗示" class="headerlink" title="第三步：分隔出暗示"></a>第三步：分隔出暗示</h3><blockquote><p>很多实验显示，几乎所有的习惯性暗示都可以归为以下五大类中的一类：<br>地点<br>时间<br>情绪状态<br>其他人<br>之前紧挨着的动作<br>所以如果你想找到“去咖啡厅并买巧克力豆饼干”这个习惯的暗示，那请在这一冲动出现时写下5样东西（下面这些是我在分析自己的习惯时做的笔记）：<br>你在哪？（坐在我的办工桌前）<br>现在几点？（下午3点36分）<br>你的情绪怎样？（觉得无聊）<br>周围有谁？（空无一人）<br>在买饼干的冲动之前，你做了什么？（我回复了一封电子邮件）<br>第二天：<br>你在哪？（从复印机那儿往回走）<br>现在几点？（下午3点18分）<br>你的情绪怎样？（觉得开心）<br>周围有谁？（体育部的吉姆）<br>在买饼干的冲动之前，你做了什么？（我复印了一份东西）<br>第三天：<br>你在哪？（会议室）<br>现在几点？（下午3点41分）<br>你的情绪怎样？（累，对自己正在做的项目感到激动）<br>周围有谁？（其他来开会的编辑）<br>在买饼干的冲动之前，你做了什么？（我坐了下来，因为会议要开始了）<br>有这三天的记录，已经可以清楚地看到是什么暗示诱发了我买饼干的习惯，让我每天在固定的时间有吃零食的冲动。在第二步我就发现我有这个习惯并不是因为饿。我找寻的奖赏是暂时散散心，也就是通过与朋友闲聊得到消遣。我现在知道这一习惯诱发的时间是在下午3点到4点之间</p></blockquote><h3 id="第四步：制订计划"><a href="#第四步：制订计划" class="headerlink" title="第四步：制订计划"></a>第四步：制订计划</h3><blockquote><p>一旦你发现了你的习惯回路，你就找到了驱动你行为的奖赏、诱发你习惯的暗示以及惯常行为本身，这样你就可以开始改变你的行为了。通过围绕暗示设计，选择能够满足你所渴求的奖赏的行为，你就可以改善你的习惯。你需要的是一个计划。在前言中，我们了解到习惯是一种在特定的时间，你会做出的选择，然后你便不会再去想，却会日复一日地重复它。<br><img src="/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/1606204459059.jpg"><br>换句话说，习惯是大脑自动遵循的行为模式，也就是我看到暗示时，我会做出惯常行为，目的是要得到奖赏。为了调整这个模式，我们需要重新进行选择。许多研究表明，这样做最容易的方式是制订计划。在心理学里中，这些计划被称为“执行意图”。<br>比如，拿我在下午买饼干的习惯作为例子，通过这个框架，我发现我的暗示一般大约出现在下午的3点半。我知道我的惯常行为是去咖啡厅买饼干，同时还与朋友聊天。通过实验，我发现我渴求的并不是饼干本身，而是那一小段时间的悠闲以及与别人交往的机会。<br>于是我为自己制订了计划：<br>每天下午3点半，我会到朋友的办公室和他聊上10分钟。<br>为了确保我记得这样做，我在手表上设了下午3点半的闹钟。 </p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>很喜欢里面的一句话：<code>一旦我们选择想变成什么，我们就会“越来越熟悉自己实践过的方法，就像一张纸或者一件大衣，一旦折过或者叠过，今后要是再折叠，它们会永远沿着同样的痕迹折叠下去 </code></p><ul><li><a href="https://wws.lanzous.com/iW0sRiq2taf">进度天下</a></li><li><a href="https://wws.lanzous.com/iYbFViq2syd">《习惯的力量》</a></li></ul><hr>]]></content>
    
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法(第四版)-1.3.14答案</title>
    <link href="/%E3%80%8A%E7%AE%97%E6%B3%95%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E3%80%8B/"/>
    <url>/%E3%80%8A%E7%AE%97%E6%B3%95%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%89%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>算法(第四版)-1.3.14 编写一个类ResizingArrayQueueOfStrings，使用定长数组实现队列的抽象，然后扩展实现，使用调整数组的方法突破大小的限制。</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>编写一个类ResizingArrayQueueOfStrings，使用定长数组实现队列的抽象，然后扩展实现，使用调整数组的方法突破大小的限制。</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> _1_3;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.NoSuchElementException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 非静态内部类因为是了属于对象的，所以初始化时需要先初始化一个外部类实例对象， 然后使用此对象调用内部类的构造方法。</span><br><span class="hljs-comment"> * 静态内部类属于类本身，初始化时直接使用外部类调用静态内部类的构造方法即可。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 煨酒小童</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">_1_3_14</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>_1_3_14.Resizingarrayqueueofstrings&lt;Integer&gt; haha = <span class="hljs-keyword">new</span> <span class="hljs-title class_">_1_3_14</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Resizingarrayqueueofstrings</span>&lt;Integer&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>haha.enqueue(i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : haha) &#123;<br>System.out.println(i);<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Resizingarrayqueueofstrings</span>&lt;Item&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;Item&gt; &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> head;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tail, N;<br><span class="hljs-keyword">private</span> Item a[];<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Resizingarrayqueueofstrings</span><span class="hljs-params">()</span> &#123;<br>a = (Item[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">2</span>];<br>head = <span class="hljs-number">0</span>;<br>tail = <span class="hljs-number">0</span>; <span class="hljs-comment">// 放置下一个物品</span><br>N = <span class="hljs-number">0</span>; <span class="hljs-comment">// 队列大小</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> N;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> N == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(Item temp)</span> &#123;<br><span class="hljs-keyword">if</span> (tail == a.length - <span class="hljs-number">1</span>) &#123;<br>resize(<span class="hljs-number">2</span> * a.length);<br>&#125;<br>a[tail++] = temp;<br>N++;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>Item[] temp = (Item[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[num];<br><span class="hljs-type">int</span> <span class="hljs-variable">haha</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> head; i &lt;= tail - <span class="hljs-number">1</span>; i++) &#123;<br>temp[haha++] = a[i];<br>a[i] = <span class="hljs-literal">null</span>;<br>&#125;<br>head = <span class="hljs-number">0</span>;<br>tail = N;<br>a = temp;<br>&#125;<br><br><span class="hljs-keyword">public</span> Item <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br><span class="hljs-type">Item</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> a[head];<br>a[head] = <span class="hljs-literal">null</span>;<br>head++;<br><span class="hljs-keyword">if</span> (head &gt; a.length / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) &#123;<br>resize(a.length / <span class="hljs-number">2</span>);<br>&#125;<br>N--;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-keyword">public</span> Item <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-keyword">while</span> (temp &lt; tail)<br><span class="hljs-keyword">return</span> a[temp++];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Iterator&lt;Item&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReverseArrayIterator</span>();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReverseArrayIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;Item&gt; &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> head; <span class="hljs-comment">// 这里迭代时不能改变队头，要一个临时变量指向对头</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-keyword">return</span> i &lt; N;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Item <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>i++;<br><span class="hljs-keyword">return</span> a[start++];<br><br>&#125;<br><br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>《算法(第四版)》</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uu加速器抓包领取ow</title>
    <link href="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/"/>
    <url>/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/</url>
    
    <content type="html"><![CDATA[<p>最近uu加速器可白嫖《守望先锋》，啥子1个月内，用uu加速累计24h就可以白嫖了，奈何太多白嫖怪，每日11：00放送资源时，服务器就爆炸了，好不容易进去后，又显示请你明天再来，…(⊙_⊙;)…这就很让人炸裂了….</p><span id="more"></span><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>最近uu加速器可白嫖《守望先锋》，啥子1个月内，用uu加速累计24h就可以白嫖了，奈何太多白嫖怪，每日11：00放送资源时，服务器就爆炸了，好不容易进去后，又显示请你明天再来，…(⊙_⊙;)…这就很让人炸裂了.</p><p><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0Ygtf.jpg" alt="t0Ygtf.jpg"></p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>作为一个写程序的怎么能挤不赢别人?因为领取步骤会跳很多网页验证登录啥子的,能不能直接跳到最后一步领取呢?显而易见,抓包试试.</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>Fiddler的使用不再赘述,网上很多帖子.左键点击这个不要放开,移动鼠标到uu加速器界面就可以只捕获uu加速器的数据了.然后按正常领取步骤全部在uu加速器上做一遍就行了,可以看到捕获了很多流量.</p><p><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0Y4Xj.png" alt="t0Y4Xj.png"></p><p>双击进去分析可以找出标号1,2是我们所需要的.这时候用python模拟这一个post就可以了.</p><p><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0Y2h8.png" alt="t0Y2h8.png"><br><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0YhcQ.png" alt="t0YhcQ.png"></p><p>点进request中的header,右键选择 copy all Headers就可以全部复制了.然后粘贴进模块2,要去掉最后一个逗号,然后结果粘贴进模块1,运行就可以了.</p><p>下面贴代码了:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#模块一</span><br>import requests<br>url=&#x27;https://ie.uu.163.com/activity/ow/get&#x27;<br>data=&#123;&#125;<br>header=&#123;<br>&#x27;Accept&#x27;:&#x27;application/json, text/javascript, */*; q=0.01&#x27;,<br>&#x27;Ntes-UU&#x27;:&#x27;10.<span class="hljs-number">41389614</span>6&#x27;,<span class="hljs-meta">#替换内容（抓包标号2里面有）</span><br>&#x27;Ntes-UU-Token&#x27;:&#x27;DSQbPVKanQl3ohmNyWXnw5zwDxOQaOb3NhemaZBbkmL67f01yARCdpGLLjdOCmrZ&#x27;,<span class="hljs-meta">#替换内容（抓包标号2里面有）</span><br>&#x27;X-Requested-With&#x27;:&#x27;XMLHttpRequest&#x27;,<br>&#x27;Referer&#x27;:&#x27;https://ie.uu.163.com/activity/ow/callback?code=CNVFSDJP2SQYFF1CDRIH4ODA9NXGL2SRV9&amp;state=ORgBJeo4bdPuzYdB&#x27;,<br>&#x27;Accept-Language&#x27;:&#x27;zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3&#x27;,<br>&#x27;Accept-Encoding&#x27;:&#x27;gzip, deflate&#x27;,<br>&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;,<br>&#x27;Host&#x27;:&#x27;ie.uu.163.com&#x27;,<br>&#x27;Content-Length&#x27;:&#x27;0&#x27;,<br>&#x27;Connection&#x27;:&#x27;Keep-Alive&#x27;,<br>&#x27;Cache-Control&#x27;:&#x27;no-cache&#x27;,<br>&#x27;Cookie&#x27;:&#x27;_ntes_nnid=1c232db28ae<span class="hljs-number">8831</span>c<span class="hljs-number">3679</span>2bc911ea<span class="hljs-number">0256</span>,<span class="hljs-number">159098090036</span>9; _ntes_nuid=1c232db28ae<span class="hljs-number">8831</span>c<span class="hljs-number">3679</span>2bc911ea<span class="hljs-number">0256</span>; session=IeZ47FhSu7kS7uYaJoiZLE696k46_5oD-JfDO2e_&#x27; <span class="hljs-meta">#替换内容（抓包标号2里面有）</span><br>&#125;<br><br>r1=requests.post(url,headers=header,data=data)<br>print(r1.status_code)<br><span class="hljs-meta">#r.encoding=&#x27;utf-8&#x27;</span><br>s=r1.text<br>print(s.encode(&#x27;utf-8&#x27;).decode(<span class="hljs-string">&quot;unicode_escape&quot;</span>))<br><br></code></pre></td></tr></table></figure><p>这个模块是领取模块,因为是下午做的图文,忘了截图,领取成功后再运行就403了.没法了,不能截图了,应该平常运行时显示已经领取完了,时Unicode字符,需要自己解码,在11:00那一刻,会成功显示ok</p><p><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0YcAP.png" alt="t0YcAP.png"></p><p>一个把headers转换成键值对的模块,最末尾会多一个逗号,删掉即可.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#模块2（可以不需要用，直接在抓包里面复制模块一所需要的内容就行了）</span><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># #下方引号内添加请求头内容</span><br>headers_str = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="hljs-string">Ntes-UU: 35.597966240</span><br><span class="hljs-string">Ntes-UU-Token: ow6gtBhB95p4v0elPOZDu7KMbVJHerBweZMORCL1lxIgTznTtHR74oSVmK3QvhVc</span><br><span class="hljs-string">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-string">Referer: https://activity.uu.163.com/ow/html/ow.html</span><br><span class="hljs-string">Accept-Language: zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="hljs-string">Host: activity.uu.163.com</span><br><span class="hljs-string">Connection: Keep-Alive</span><br><span class="hljs-string">Cookie: _ntes_nnid=1c232db27ae8831c36792bc911ea0256,1590980900369; _ntes_nuid=1c232db28ae8831c36792bc911ea0256; session=n7aLriYePRpuICQ7yInEfpJyA8BeL0tQEh986Fkn</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>pattern = <span class="hljs-string">&#x27;^(.*?): (.*)$&#x27;</span><br><br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> headers_str.splitlines():<br>    <span class="hljs-built_in">print</span>(re.sub(pattern,<span class="hljs-string">&#x27;\&#x27;\\1\&#x27;:\&#x27;\\2\&#x27;,&#x27;</span>,line))<br><br></code></pre></td></tr></table></figure><p>10:59时疯狂运行,有一刻会显示成功<br>再用下面这个可以检查是否成功（也可以不用检查）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#这个模块类似第一个模块用法,header中的内容也要替换,内容为我一个图的序号二.</span><br>import requests<br>url=&#x27;https://activity.uu.163.com/activity/ow/status?_=<span class="hljs-number">159123866740</span>4&#x27;<span class="hljs-meta">#最后一串数字要改，在raw里面有</span><br>header=&#123;<br>&#x27;Accept&#x27;:&#x27;application/json, text/javascript, */*; q=0.01&#x27;,<br>&#x27;Ntes-UU&#x27;:&#x27;35.<span class="hljs-number">59996624</span>0&#x27;,<span class="hljs-meta">#替换内容（抓包标号2里面有）</span><br>&#x27;Ntes-UU-Token&#x27;:&#x27;ow6gtBhB95p4v0elPOZDu7KMbVJHerBweZMORCL1lxIgTznTtHR74oSVmK3QvhVc&#x27;,<span class="hljs-meta">#替换内容</span><br>&#x27;X-Requested-With&#x27;:&#x27;XMLHttpRequest&#x27;,<br>&#x27;Referer&#x27;:&#x27;https://activity.uu.163.com/ow/html/ow.html&#x27;,<br>&#x27;Accept-Language&#x27;:&#x27;zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3&#x27;,<br>&#x27;Accept-Encoding&#x27;:&#x27;gzip, deflate&#x27;,<br>&#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;,<br>&#x27;Host&#x27;:&#x27;activity.uu.163.com&#x27;,<br>&#x27;Connection&#x27;:&#x27;Keep-Alive&#x27;,<br>&#x27;Cookie&#x27;:&#x27;_ntes_nnid=1c232db28ae<span class="hljs-number">8831</span>c<span class="hljs-number">3679</span>2bc911ea<span class="hljs-number">0256</span>,<span class="hljs-number">159098090036</span>9; _ntes_nuid=1c232db28ae<span class="hljs-number">8831</span>c<span class="hljs-number">3679</span>2bc911ea<span class="hljs-number">0256</span>; session=n7aLriYePRpuICQ7yInEfpJyA8BeL0tQEh986Fkn&#x27;<span class="hljs-meta">#替换  </span><br><br>&#125;<br>r1=requests.get(url,headers=header)<br>print(r1.status_code)<br>s=r1.text<br>print(s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>).decode(<span class="hljs-string">&quot;unicode_escape&quot;</span>))<span class="hljs-meta">#  详细解码编码说明 https:<span class="hljs-comment">//www.cnblogs.com/evening/archive/2012/04/19/2457440.html</span></span><br></code></pre></td></tr></table></figure><p>检查结果为:(最开始type&#x3D;2,意思时审核中,忘了截图,等于3的时候是已经成功了)</p><p><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0YIns.png" alt="t0YIns.png"></p><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>模块一一运行瞬间就出结果了,模块3运行时有结果时,结果uu加速器还在转圈圈,速度果然快了很多.再等待半个小时审核就成功了.</p><p><img src="/%E5%A6%82%E4%BD%95%E6%8C%A4%E8%BF%9Buu%E5%8A%A0%E9%80%9F%E5%99%A8%E7%99%BD%E5%AB%96ow/t0Yf1g.png" alt="t0Yf1g.png"></p><p>资源：<code>抓包软件:https://wws.lanzous.com/iCMJ3dblmhe</code></p><p>思考:</p><ol><li>太浮躁了自己,码文字时只想快快结束,写的很粗糙,应该很多没写清楚过程,只是一个堪堪思路而已</li><li>程序明明可以改进,这么多模块完全可以拼成一个程序,自己就是懒,总是能用就行,不想臻于完美.哎,烦(可能更怕的是自己不想面对困难,好烦(〃＞目＜))</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>战恋雪网站的爬取实战</title>
    <link href="/%E6%88%98%E6%81%8B%E9%9B%AA/"/>
    <url>/%E6%88%98%E6%81%8B%E9%9B%AA/</url>
    
    <content type="html"><![CDATA[<p>因为要释放掉那些干扰我理智思考的东西，所以一直在苦苦找寻刘备(皇叔)(づ￣ 3￣)づ网站，直到一次我搜索《战恋雪》时我发现了这个网站<a href="https://www.zhanlianxue.net/">战恋雪</a>。</p><span id="more"></span><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>因为要释放掉那些干扰我理智思考的东西，所以一直在苦苦找寻刘备(皇叔)(づ￣ 3￣)づ网站，直到一次我搜索《战恋雪》时我发现了这个网站<a href="https://www.zhanlianxue.net/">战恋雪</a>。</p><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgUv5D.jpg" alt="tgUv5D.jpg"></p><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgtcGj.png" alt="tgtcGj.png"></p><p>它网罗了网络上很优秀的xhs，以我多年习书所养成的挑剔眼光来看，我也该大大赞叹此站主深得老夫脾胃。看小说我更喜欢用手机进行阅读，不仅屏幕小不易被人发现，而且可以躺在床上看，更是体位可以保证最大舒适度进行原地起飞。结果恰恰是这个移动端超多广告，adblock插件完全对付不了，换页时频繁的强制跳转广告让我性致乏乏，一而再再而三的这样，怎么办？忍？鸡儿他可首先不同意，这谁忍得了！办他！<br>那就把网站内容全部爬取下来吧</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><h3 id="抓取所有书籍链接"><a href="#抓取所有书籍链接" class="headerlink" title="抓取所有书籍链接"></a>抓取所有书籍链接</h3><p>先是用chrome控制台分析首页，很容易发现首页上就有网站所有书籍的链接地址，而且全部保存到了一个html页面上了，只要提取这个html页面的书籍信息既可以了。分析页面可以看到书籍地址保存在 menu标签的li标签的a标签中，用bs4可以提取</p><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgtgRs.png" alt="tgtgRs.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def get_book():     #战恋雪网站所有书籍链接<br>    try:<br>        <span class="hljs-attribute">re</span>=requests.get(&#x27;https://www.zhanlianxue.net/&#x27;)<br>        <span class="hljs-attribute">html</span>=re.text<br>        <span class="hljs-attribute">soup</span>=BeautifulSoup(html,&#x27;html.parser&#x27;)<br>        <span class="hljs-attribute">haha</span>=soup(&#x27;ul&#x27;,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;menu&#x27;</span>&#125;)<br><br>        <span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> haha[0](<span class="hljs-string">&#x27;a&#x27;</span>):<br>            <span class="hljs-attribute">title</span>=book.text<br>            <span class="hljs-attribute">url</span>=book.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-attribute">title</span>==&#x27;首页&#x27;:    #有一个首页，不是一本书，需去掉<br>                continue<br>            yield&#123;<br>                <span class="hljs-string">&#x27;title&#x27;</span>:title,<br>                <span class="hljs-string">&#x27;url&#x27;</span>:url<br>            &#125;<br>    except:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获得所有书本信息错误&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="抓取书籍章节"><a href="#抓取书籍章节" class="headerlink" title="抓取书籍章节"></a>抓取书籍章节</h3><p>再我们打开一个书籍地址，可以看到有很多章节，控制台分析，章节地址保存在ul标签的li标签的a标签中，用bs4可以提取</p><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgtrdS.png" alt="tgtrdS.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def get_bookcapital(url):    #获得一本书的所有章节名称与章节链接<br><br>    try:<br>        <span class="hljs-attribute">re</span>=requests.get(url,timeout=60)<br>        <span class="hljs-attribute">html</span>=re.text<br>        <span class="hljs-attribute">soup</span>=BeautifulSoup(html,&#x27;html.parser&#x27;)<br>        <span class="hljs-attribute">haha</span>=soup(&#x27;ul&#x27;)[1]<br>        <br>        <span class="hljs-keyword">for</span> chapter <span class="hljs-keyword">in</span> haha(<span class="hljs-string">&#x27;li&#x27;</span>):<br>            <br>            <span class="hljs-attribute">title</span>=chapter(&#x27;a&#x27;)[0].text<br>            <br>            <span class="hljs-attribute">url</span>=chapter(&#x27;a&#x27;)[0].attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            yield&#123;<br>                <span class="hljs-string">&#x27;ctitle&#x27;</span>:title,<br>                <span class="hljs-string">&#x27;curl&#x27;</span>:url<br>            &#125;<br>    except:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取书的章节链接错误&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="抓取书籍内容"><a href="#抓取书籍内容" class="headerlink" title="抓取书籍内容"></a>抓取书籍内容</h3><p>然后我们打开一个章节定位到内容中，经过多个页面的比对可以发现所有内容都存储在最上面箭头的那个标签中，直接获取标签范围所有内容就可（要是范围太大，可能内容会提取到代码，可以用正则表达式清除）。最后就是把内容保存到文档中</p><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgtsIg.png" alt="tgtsIg.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">savechapter</span>(<span class="hljs-params">bookname,url</span>):   <span class="hljs-comment">#根据章节连接，保存章节里面的文本</span><br><br>    <span class="hljs-keyword">try</span>:<br>        re1=requests.get(url,timeout=<span class="hljs-number">60</span>)<br>        html=re1.text<br>        html=re.sub(<span class="hljs-string">&#x27;&lt;br.*?&gt;&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>,html)<br>        soup=BeautifulSoup(html,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        content=soup(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;single-box clearfix entry-content&#x27;</span>&#125;)[<span class="hljs-number">0</span>]<br>        a=content(<span class="hljs-string">&#x27;script&#x27;</span>)   <span class="hljs-comment">#清除文本中的干扰代码（美观）</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>            i.clear()<br>        makebook(bookname,content.text)<br>    <span class="hljs-keyword">except</span>:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;存入文本错误&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makebook</span>(<span class="hljs-params">bookname,text</span>):    <span class="hljs-comment">#保存文本</span><br>    path=<span class="hljs-string">&#x27;F:\战恋雪\&#123;&#125;.txt&#x27;</span>.<span class="hljs-built_in">format</span>(bookname)      <span class="hljs-comment">#这里F盘需要先创建战恋雪这个文件夹</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<span class="hljs-keyword">as</span> haha:<br>        haha.write(<span class="hljs-string">&#x27;\n&#x27;</span>+text)<br></code></pre></td></tr></table></figure><h3 id="多进程下载书籍"><a href="#多进程下载书籍" class="headerlink" title="多进程下载书籍"></a>多进程下载书籍</h3><p>因为书籍太多，再加上章节一章一章获取实在是太慢，开启多进程同时下载多本书会快很多</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span> <span class="hljs-attribute">__name__</span>==&#x27;__main__&#x27;:<br>    <span class="hljs-attribute">pool</span>=Pool(processes=20)   #20个进程调用获得所有书<br>    <span class="hljs-attribute">group</span>=a  #a列表是网站所有书的链接地址<br>    <span class="hljs-built_in">print</span>(group)<br>    pool.map(main,group)<br></code></pre></td></tr></table></figure><h2 id="所有代码"><a href="#所有代码" class="headerlink" title="所有代码"></a>所有代码</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> bs4 import BeautifulSoup<br>import re<br>import requests<br><span class="hljs-keyword">from</span> multiprocessing import<span class="hljs-built_in"> Pool</span><br><span class="hljs-built_in"></span>def get_book():     #战恋雪网站所有书籍链接<br>    try:<br>        <span class="hljs-attribute">re</span>=requests.get(&#x27;https://www.zhanlianxue.net/&#x27;)<br>        <span class="hljs-attribute">html</span>=re.text<br>        <span class="hljs-attribute">soup</span>=BeautifulSoup(html,&#x27;html.parser&#x27;)<br>        <span class="hljs-attribute">haha</span>=soup(&#x27;ul&#x27;,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;menu&#x27;</span>&#125;)    #ul标签可能很多，直接搜索标签会返回列表，自己找到所需内容的ul标签下标，其他的都是同理<br><br>        <span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> haha[0](<span class="hljs-string">&#x27;a&#x27;</span>):  <br>            <span class="hljs-attribute">title</span>=book.text<br>            <span class="hljs-attribute">url</span>=book.attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-attribute">title</span>==&#x27;首页&#x27;:    #有一个首页，不是一本书，需去掉<br>                continue<br>            yield&#123;<br>                <span class="hljs-string">&#x27;title&#x27;</span>:title,<br>                <span class="hljs-string">&#x27;url&#x27;</span>:url<br>            &#125;<br>    except:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获得所有书本信息错误&#x27;</span>)<br><br><br><br>def get_bookcapital(url):    #获得一本书的所有章节名称与章节链接<br><br>    try:<br>        <span class="hljs-attribute">re</span>=requests.get(url,timeout=60)<br>        <span class="hljs-attribute">html</span>=re.text<br>        <span class="hljs-attribute">soup</span>=BeautifulSoup(html,&#x27;html.parser&#x27;)<br>        <span class="hljs-attribute">haha</span>=soup(&#x27;ul&#x27;)[1]  <br>        <br>        <span class="hljs-keyword">for</span> chapter <span class="hljs-keyword">in</span> haha(<span class="hljs-string">&#x27;li&#x27;</span>):<br>            <br>            <span class="hljs-attribute">title</span>=chapter(&#x27;a&#x27;)[0].text<br>            <br>            <span class="hljs-attribute">url</span>=chapter(&#x27;a&#x27;)[0].attrs[<span class="hljs-string">&#x27;href&#x27;</span>]<br>            yield&#123;<br>                <span class="hljs-string">&#x27;ctitle&#x27;</span>:title,<br>                <span class="hljs-string">&#x27;curl&#x27;</span>:url<br>            &#125;<br>    except:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取书的章节链接错误&#x27;</span>)<br><br><br><br>def savechapter(bookname,url):   #根据章节连接，保存章节里面的文本<br><br>    try:<br>        <span class="hljs-attribute">re1</span>=requests.get(url,timeout=60)<br>        <span class="hljs-attribute">html</span>=re1.text<br>        <span class="hljs-attribute">html</span>=re.sub(&#x27;&lt;br.*?&gt;&#x27;,&#x27;\n&#x27;,html)<br>        <span class="hljs-attribute">soup</span>=BeautifulSoup(html,&#x27;html.parser&#x27;)<br>        <span class="hljs-attribute">content</span>=soup(&#x27;div&#x27;,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;single-box clearfix entry-content&#x27;</span>&#125;)[0]<br>        <span class="hljs-attribute">a</span>=content(&#x27;script&#x27;)   #清除文本中的干扰代码（美观）<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>            i.clear()<br>        makebook(bookname,content.text)<br>    except:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;存入文本错误&#x27;</span>)<br><br><br>def makebook(bookname,text):    #保存文本<br>    <span class="hljs-attribute">path</span>=<span class="hljs-string">&#x27;F:\战恋雪\&#123;&#125;.txt&#x27;</span>.format(bookname)     #这里F盘需要先创建战恋雪这个文件夹<br>    with open(path,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>)as haha:<br>        haha.write(<span class="hljs-string">&#x27;\n&#x27;</span>+text)<br><br>def makebook_chapter(bookname,cname):   #在文本中还要保存章节名称<br>    <span class="hljs-attribute">path</span>=<span class="hljs-string">&#x27;F:\战恋雪\&#123;&#125;.txt&#x27;</span>.format(bookname)     #这里F盘需要先创建战恋雪这个文件夹<br>    with open(path,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>)as haha:<br>        haha.write(cname+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>def main(haha):   #获得一本书的所有步骤<br>    <span class="hljs-attribute">book</span>=haha<br>    <span class="hljs-built_in">print</span>(book)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在获取  &#123;&#125;  &#123;&#125;&#x27;</span>.format(book.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>),book.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>)))<br>    <span class="hljs-keyword">for</span> chapter <span class="hljs-keyword">in</span> get_bookcapital(book.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前《&#123;&#125;》--获取章节 &#123;&#125;  &#123;&#125;  &#x27;</span>.format(book.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>),chapter.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;ctitle&#x27;</span>),chapter.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;curl&#x27;</span>)))<br>            makebook_chapter(book.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>),chapter.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;ctitle&#x27;</span>))<br>            savechapter(book.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>),chapter.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;curl&#x27;</span>))<br><br><span class="hljs-comment">#把所有书籍连接放入一个列表中，方便多进程取值</span><br>a=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> get_book():<br>    a.append(i)<br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">if</span> <span class="hljs-attribute">__name__</span>==&#x27;__main__&#x27;:<br>    <span class="hljs-attribute">pool</span>=Pool(processes=20)   #20个进程调用获得所有书<br>    <span class="hljs-attribute">group</span>=a  #a列表是网站所有书的链接地址<br>    <span class="hljs-built_in">print</span>(group)<br>    pool.map(main,group)<br><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgBqA0.png" alt="tgBqA0.png"></p><p><img src="/%E6%88%98%E6%81%8B%E9%9B%AA/tgBLNV.png" alt="tgBLNV.png"></p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ol><li>自己是不是太猥琐了，学这个鬼东西专门干这些事？</li><li>下次要写写读书笔记了</li><li>这些都还是皮毛，很纠结自己到底主Java呢，还是python呢？python是用来玩的，但是我投入的时间对他太多了。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>500px美图爬取</title>
    <link href="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/"/>
    <url>/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<p>前天在逛9gag时看到了一个血脉膨胀的图，在评论区溯源于是找到了<a href="https://500px.com/david-foto">500px</a>这个网站，根据链接进去一看，乖乖~！发现一个宝藏了，这个作者拍摄的完全是我喜欢的类型，文文艺艺，热情奔放，含而不漏，张弛有度(๐॔˃̶ᗜ˂̶๐॓)。<br>就是下图这样子！</p><span id="more"></span><h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>前天在逛9gag时看到了一个血脉膨胀的图，在评论区溯源于是找到了<a href="https://500px.com/david-foto">500px</a>这个网站，根据链接进去一看，乖乖~！发现一个宝藏了，这个作者拍摄的完全是我喜欢的类型，文文艺艺，热情奔放，含而不漏，张弛有度(๐॔˃̶ᗜ˂̶๐॓)。<br>就是下图这样子！</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0UEmd.png" alt="t0UEmd.png"></p><p>下意识的右键点击保存时，嘿，没想到遇到一个狠角色，这种防范还是我第一次见</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0UF6e.png" alt="t0UF6e.png"></p><p>图片上右键不是平常的保存图片啥的，而是强制的弹出<code>Hey,this photo is @author</code>，这就很好的刺激我了，由此就开始了我的造作了。</p><h2 id="承"><a href="#承" class="headerlink" title="承"></a>承</h2><p>在非图片区域右键直接检查元素，点击选择器定位图片元素，内容没有加密，很明显那个src的值肯定是图片真实地址了，复制在新窗口中打开，如愿的拿到图了，右键保存图片质量还行(￣_,￣ )</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0UV0A.png" alt="t0UV0A.png"></p><p>当然并不能止步于此，图片都太可口了，一个一个保存实在太累了，最好找到接口批量爬取（笑）</p><p>最开始的想法是，在作者主页面审查元素兴许包含每张图片的真实地址，如果这样直接请求这个作者的主页然后不管是正则还是煲美丽汤都可以很快的提取链接出来。</p><p>打开检查，从上一步拿到的那个真实图片地址中间<strong>复制一部分</strong> <em>这里我曾经爬取其他网站时走了很多弯路，因为有的链接的特征是拼接起来的，它把真实链接分成两部分，然后拼起来访问，你要是复制一整串去找绝对找不到的，所以以后我都是随机截取一小段在html源文档中搜索</em>然后在源文档中查找，很可惜没有。</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0UkOH.png" alt="t0UkOH.png"></p><p>那就有可能是动态加载的了，这个时候我的思路倾向于这个图片是通过ajax加载的，ajax里面兴许包含真实链接，于是兴冲冲的就重新在<strong>主页</strong>刷新并划了几下，打开XHR(这里不选择打开图片页那里刷新是因为主页包含全部照片，这里可以找到全部照片信息的可能性最大)</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0UPSO.png" alt="t0UPSO.png"></p><p>还行通过page的变化，加上点击那个Preview大致预览了一下，这就是我们要找的东西，打开Preview，如下图：</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0UilD.png" alt="t0UilD.png"></p><p>这就是我们所要的内容了，里面全是每一张的照片信息，如title，image_url等等很实在的参数，对于image_url又分了很多类，复制打开观察，发现是照片的分辨率参数，自认为最好的品质是 8 那一栏了，继续观察，这里的照片信息总共只有 50 张，这个ajax中有<code>total_items=107</code>，应该是 107 张照片了，<code>total_page=3</code>，应该就是总页数了，接下来只要找出偏移量就万事俱备了。</p><p>剩下的工作就是找不同，通过滑动主页，让剩下来的内容都加载出来，对比ajax的不同：</p><p><img src="/500px%E7%BE%8E%E5%9B%BE%E7%88%AC%E5%8F%96/t0U9fK.png" alt="t0U9fK.png"></p><p>可以看出来，偏移量就是page这个参数了，user_id盲猜就是用户ID，对于rpp&#x3D;50，自然的可以想到是一次性加载 50 个照片，根据总页数为 3，总照片为 107，也可以进一步证实猜测。接着也可以看到请求中包含image_size参数，对应着照片的分辨率。</p><p>实验性的复制请求去访问，发现可以得到一个刚刚分析ajax时一模一样的json字符串，再更大胆的改一下参数，rpp&#x3D;200,或者把那些image_size删除一些看看有什么变化。如：<code>https://api.500px.com/v1/photos?feature=user&amp;stream=photos&amp;user_id=19539&amp;image_size%5B%5D=2048&amp;page=1&amp;rpp=200</code>,多次试测试，可以得出结论，每次最多返回 100 个照片信息，且通过调节image_size参数可以让其选择性的返回品质最高的照片。</p><h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><h2 id="下面直接贴代码了："><a href="#下面直接贴代码了：" class="headerlink" title="下面直接贴代码了："></a>下面直接贴代码了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlencode    <span class="hljs-comment">#为了把字典型转为请求的参数</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json     <br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>head=&#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createurl</span>(<span class="hljs-params">page</span>):                        <span class="hljs-comment">#这里根据偏移量构造请求url</span><br>    url=<span class="hljs-string">&#x27;https://api.500px.com/v1/photos?&#x27;</span><br>    parser=&#123;<br>    <span class="hljs-string">&#x27;feature&#x27;</span>:<span class="hljs-string">&#x27;user&#x27;</span>,<br>    <span class="hljs-string">&#x27;stream&#x27;</span>:<span class="hljs-string">&#x27;photos&#x27;</span>,<br>    <span class="hljs-string">&#x27;user_id&#x27;</span>:<span class="hljs-string">&#x27;19539&#x27;</span>,<br>    <span class="hljs-string">&#x27;image_size[]&#x27;</span>:<span class="hljs-string">&#x27;2048&#x27;</span>,<br>    <span class="hljs-string">&#x27;page&#x27;</span>:page,<br>    <span class="hljs-string">&#x27;rpp&#x27;</span>:<span class="hljs-string">&#x27;100&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> url+urlencode(parser)            <span class="hljs-comment">#urllencode可以字典转化为url参数中</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page</span>():     <span class="hljs-comment">#总共需要翻取多少页</span><br>    head=&#123;<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>:           <br>        url=<span class="hljs-string">&#x27;https://api.500px.com/v1/photos?feature=user&amp;stream=photos&amp;user_id=19539&amp;image_size%5B%5D=2048&amp;page=1&amp;rpp=100&#x27;</span><br>        re1=requests.get(url,headers=head)<br>        html=re1.json()              <span class="hljs-comment">#注：这儿可以直接返回字典型数据</span><br>        page=html.get(<span class="hljs-string">&#x27;total_pages&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(page)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取总翻页信息失败&#x27;</span>)<br><br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_detiel</span>(<span class="hljs-params">url</span>):        <span class="hljs-comment">#取得照片的url，title，formatp（格式信息）</span><br>    head=&#123;<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        re1=requests.get(url,headers=head)<br>        html=re1.json()<br>        page=html.get(<span class="hljs-string">&#x27;total_pages&#x27;</span>)<br>        photos=html.get(<span class="hljs-string">&#x27;photos&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> photos:<br>            url=i.get(<span class="hljs-string">&#x27;image_url&#x27;</span>)[<span class="hljs-number">0</span>]<br>            title=i.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>            formatp=i.get(<span class="hljs-string">&#x27;image_format&#x27;</span>)<br>            <span class="hljs-keyword">yield</span>&#123;<br>                <span class="hljs-string">&#x27;url&#x27;</span>:url,<br>                <span class="hljs-string">&#x27;title&#x27;</span>:title,<br>                <span class="hljs-string">&#x27;formatp&#x27;</span>:formatp<br>            &#125;<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取所有照片信息失败&#x27;</span>)<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lsit_photo</span>():           <span class="hljs-comment">#这里吧照片信息全部装到一个列表中，为了后面使用多进程</span><br>    list1=[]<br>    total=get_page()<br>    <span class="hljs-built_in">print</span>(total)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,total+<span class="hljs-number">1</span>):<br>        url=createurl(i)<br>        <span class="hljs-keyword">for</span> photo <span class="hljs-keyword">in</span> get_detiel(url):<br>            list1.append(photo)<br>    <span class="hljs-keyword">return</span> list1<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_phtot</span>(<span class="hljs-params">photo</span>):      <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">global</span> ppt<br>    <span class="hljs-keyword">global</span> error<br>    <span class="hljs-keyword">try</span>:<br>        a=photo.get(<span class="hljs-string">&#x27;title&#x27;</span>)<br>        a=a.replace(<span class="hljs-string">r&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)   <span class="hljs-comment">#这里作者起名很怪，打了回车键，若是不处理在保存时因为有\n不好处理故把换行符去掉</span><br>        a=a.strip()      <span class="hljs-comment">#进一步规范title</span><br>        path=<span class="hljs-string">r&#x27;F:\500px摄影\19539\&#123;&#125;----&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a,ppt,photo.get(<span class="hljs-string">&#x27;formatp&#x27;</span>))<br>        ppt+=<span class="hljs-number">1</span>     <span class="hljs-comment">#  作者更丧心病狂的取同样的名字，疯狂报错再次添加变量，用md5的话一大串字符太丑了</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path,<span class="hljs-string">&#x27;wb&#x27;</span>)<span class="hljs-keyword">as</span> haha:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在保存:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(photo.get(<span class="hljs-string">&#x27;url&#x27;</span>)))<br>            content=requests.get(photo.get(<span class="hljs-string">&#x27;url&#x27;</span>),headers=head).content<br>            haha.write(content)<br>    <span class="hljs-keyword">except</span>:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;保存文件&#123;&#125;=====&#123;&#125;    error&#x27;</span>.<span class="hljs-built_in">format</span>(path,photo.get(<span class="hljs-string">&#x27;url&#x27;</span>)))<br>         errordit=&#123;<br>                <span class="hljs-string">&#x27;url&#x27;</span>:photo.get(<span class="hljs-string">&#x27;url&#x27;</span>),<br>                <span class="hljs-string">&#x27;title&#x27;</span>:photo.get(<span class="hljs-string">&#x27;title&#x27;</span>),<br>                <span class="hljs-string">&#x27;formatp&#x27;</span>:photo.get(<span class="hljs-string">&#x27;formatp&#x27;</span>)   <br>         &#125;<br>         error.append(errordit)     <span class="hljs-comment">#这个函数因为很多次报错，总有保存不成功的，于是就把错误的收集起来可以进行二次保存 。。然鹅好像没有用。。。。懒得改了</span><br><br><br><br><br><span class="hljs-built_in">all</span>=lsit_photo()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">all</span>))<br><span class="hljs-comment">#print(all)</span><br>ppt=<span class="hljs-number">0</span><br>error=[]<br><span class="hljs-comment"># for i in all:</span><br><span class="hljs-comment">#     save_phtot(i)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">photo</span>):<br>  save_phtot(photo)<br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pool=Pool(processes=<span class="hljs-number">50</span>) <span class="hljs-comment">#50个进程</span><br>    pool.<span class="hljs-built_in">map</span>(main,<span class="hljs-built_in">all</span>)<br>    <span class="hljs-built_in">print</span>(error)<br>    <br></code></pre></td></tr></table></figure></h2><hr><h2 id="合"><a href="#合" class="headerlink" title="合"></a>合</h2><p>思考：</p><ol><li>这个网站表面做的很严，但内部竟然毫不设防，就连反扒措施也只是限制于请求来源，可以肆无忌惮的提取数据，有点奇怪</li><li>找到网站api我没有花费很多时间，关键是提取数据花费了很多时间，需要多多熟练语法</li><li>其实那个user_id还可以做很大的文章，根据作者的关注列表可以找遍很多优秀的摄像作品，兴许还可以统计统计这个网站的摄影器材的种类，镜头啥的，没兴趣弄了（笑）主要是不会</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于</title>
    <link href="/about/"/>
    <url>/about/</url>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎来到我的小站呀，很高兴遇见你！🤝</p></blockquote><h2 id="🏠-关于本站"><a href="#🏠-关于本站" class="headerlink" title="🏠 关于本站"></a>🏠 关于本站</h2><pre><code class="hljs">呵,留下一条路等改日再见！但我知道路径延绵无尽头， 恐怕我难以再回返.</code></pre><h2 id="👨‍💻-博主是谁"><a href="#👨‍💻-博主是谁" class="headerlink" title="👨‍💻 博主是谁"></a>👨‍💻 博主是谁</h2><pre><code class="hljs">男青年</code></pre><h2 id="⛹-兴趣爱好"><a href="#⛹-兴趣爱好" class="headerlink" title="⛹ 兴趣爱好"></a>⛹ 兴趣爱好</h2><pre><code class="hljs">看书，户外</code></pre><h2 id="📬-联系我呀"><a href="#📬-联系我呀" class="headerlink" title="📬 联系我呀"></a>📬 联系我呀</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
